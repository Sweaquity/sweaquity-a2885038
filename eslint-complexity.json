[{"filePath":"/workspaces/sweaquity-a2885038/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/analyze-codebase.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/admin/tickets/AdminTicketManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[958,961],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[958,961],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from \"react\";\nimport { TicketCard } from \"@/components/ticket/TicketCard\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { supabase } from \"@/lib/supabase\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { toast } from \"sonner\";\n\nexport const AdminTicketManager = () => {\n  const queryClient = useQueryClient();\n\n  const { data: tickets, isLoading } = useQuery({\n    queryKey: ['admin-tickets'],\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from('tickets')\n        .select(`\n          *,\n          assigned_user:assigned_to(email),\n          reporter_user:reporter(email),\n          project:project_id(title)\n        `)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      return data;\n    }\n  });\n\n  const updateTicketMutation = useMutation({\n    mutationFn: async ({ ticketId, updates }: { ticketId: string, updates: any }) => {\n      const { error } = await supabase\n        .from('tickets')\n        .update(updates)\n        .eq('id', ticketId);\n      \n      if (error) throw error;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin-tickets'] });\n      toast.success('Ticket updated successfully');\n    },\n    onError: (error) => {\n      console.error('Error updating ticket:', error);\n      toast.error('Failed to update ticket');\n    }\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <Skeleton className=\"h-[200px] w-full\" />\n        <Skeleton className=\"h-[200px] w-full\" />\n        <Skeleton className=\"h-[200px] w-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {tickets?.map((ticket) => (\n        <TicketCard \n          key={ticket.id} \n          ticket={ticket}\n          onTicketUpdated={(updates) => {\n            updateTicketMutation.mutate({ \n              ticketId: ticket.id, \n              updates \n            });\n          }}\n        />\n      ))}\n      {!tickets?.length && (\n        <div className=\"text-center py-8 text-muted-foreground\">\n          No tickets found\n        </div>\n      )}\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/auth/LoginForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/auth/RegisterForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1428,1431],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1428,1431],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Mail, Linkedin } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { supabase } from \"@/lib/supabase\";\n\ninterface RegisterFormProps {\n  type: string;\n}\n\nexport const RegisterForm = ({ type }: RegisterFormProps) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLinkedInLoading, setIsLinkedInLoading] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isParentAccount, setIsParentAccount] = useState(true);\n  const [companyName, setCompanyName] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [organizationId, setOrganizationId] = useState(\"\");\n\n  const handleSignUp = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      // First check if user already exists\n      const { data: existingUser } = await supabase\n        .from('profiles')\n        .select('id')\n        .eq('email', email)\n        .maybeSingle();\n\n      if (existingUser) {\n        toast.error(\"An account with this email already exists. Please try logging in or reset your password.\");\n        setIsLoading(false);\n        return;\n      }\n\n      const metadata: any = {\n        user_type: type,\n        is_parent: isParentAccount.toString()\n      };\n\n      if (isParentAccount && (type === 'business' || type === 'recruiter')) {\n        if (!companyName) {\n          throw new Error(\"Company name is required for organization accounts\");\n        }\n        metadata.company_name = companyName;\n      } else if (!isParentAccount) {\n        if (!organizationId) {\n          throw new Error(\"Organization ID is required for member accounts\");\n        }\n        if (!firstName || !lastName) {\n          throw new Error(\"First and last name are required for member accounts\");\n        }\n        metadata.organization_id = organizationId;\n        metadata.first_name = firstName;\n        metadata.last_name = lastName;\n      }\n\n      const { error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: metadata,\n          emailRedirectTo: `${window.location.origin}/auth/${type}`\n        }\n      });\n      \n      if (error) {\n        if (error.message.includes(\"User already registered\")) {\n          toast.error(\"An account with this email already exists. Please try logging in or reset your password.\");\n        } else {\n          throw error;\n        }\n        setIsLoading(false);\n        return;\n      }\n\n      toast.success(\"Registration successful! Please check your email to confirm your account.\");\n    } catch (error) {\n      console.error('Error:', error);\n      toast.error(error instanceof Error ? error.message : \"An error occurred during registration\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleLinkedInSignUp = async () => {\n    setIsLinkedInLoading(true);\n    try {\n      // Construct query parameters based on account type\n      const queryParams: Record<string, string> = {\n        userType: type,\n        isParent: isParentAccount.toString(),\n      };\n\n      // Add company name for parent business/recruiter accounts\n      if (isParentAccount && (type === 'business' || type === 'recruiter') && companyName) {\n        queryParams.companyName = companyName;\n      }\n\n      // Add member account details if not a parent account\n      if (!isParentAccount) {\n        if (organizationId) queryParams.organizationId = organizationId;\n        if (firstName) queryParams.firstName = firstName;\n        if (lastName) queryParams.lastName = lastName;\n      }\n\n      const { error } = await supabase.auth.signInWithOAuth({\n        provider: 'linkedin_oidc',\n        options: {\n          redirectTo: `${window.location.origin}/auth/${type}`,\n          queryParams\n        }\n      });\n      \n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      console.error('LinkedIn signup error:', error);\n      toast.error(\"Failed to sign up with LinkedIn\");\n    } finally {\n      setIsLinkedInLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSignUp} className=\"space-y-4\">\n      {(type === 'business' || type === 'recruiter') && (\n        <div className=\"space-y-2\">\n          <Label>Account Type</Label>\n          <div className=\"flex gap-4\">\n            <Button\n              type=\"button\"\n              variant={isParentAccount ? \"default\" : \"outline\"}\n              onClick={() => setIsParentAccount(true)}\n              className=\"flex-1\"\n            >\n              Organization\n            </Button>\n            <Button\n              type=\"button\"\n              variant={!isParentAccount ? \"default\" : \"outline\"}\n              onClick={() => setIsParentAccount(false)}\n              className=\"flex-1\"\n            >\n              Member\n            </Button>\n          </div>\n        </div>\n      )}\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"registerEmail\">Email address</Label>\n        <div className=\"relative\">\n          <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n          <Input\n            id=\"registerEmail\"\n            type=\"email\"\n            className=\"pl-9\"\n            placeholder=\"Enter your email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            required\n          />\n        </div>\n      </div>\n\n      {(type === 'business' || type === 'recruiter') && isParentAccount && (\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"companyName\">Company Name</Label>\n          <Input\n            id=\"companyName\"\n            type=\"text\"\n            placeholder=\"Enter company name\"\n            value={companyName}\n            onChange={(e) => setCompanyName(e.target.value)}\n            required\n          />\n        </div>\n      )}\n\n      {!isParentAccount && (\n        <>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"organizationId\">Organization ID</Label>\n            <Input\n              id=\"organizationId\"\n              type=\"text\"\n              placeholder=\"Enter organization ID\"\n              value={organizationId}\n              onChange={(e) => setOrganizationId(e.target.value)}\n              required\n            />\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"firstName\">First Name</Label>\n              <Input\n                id=\"firstName\"\n                type=\"text\"\n                placeholder=\"First name\"\n                value={firstName}\n                onChange={(e) => setFirstName(e.target.value)}\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"lastName\">Last Name</Label>\n              <Input\n                id=\"lastName\"\n                type=\"text\"\n                placeholder=\"Last name\"\n                value={lastName}\n                onChange={(e) => setLastName(e.target.value)}\n                required\n              />\n            </div>\n          </div>\n        </>\n      )}\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"registerPassword\">Password</Label>\n        <Input\n          id=\"registerPassword\"\n          type=\"password\"\n          placeholder=\"Create a password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          required\n          minLength={6}\n        />\n        <p className=\"text-sm text-muted-foreground\">Password must be at least 6 characters long</p>\n      </div>\n      <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n        {isLoading ? \"Creating account...\" : \"Create account\"}\n      </Button>\n\n      <div className=\"relative flex items-center py-2\">\n        <div className=\"flex-grow border-t border-gray-300\"></div>\n        <span className=\"flex-shrink mx-4 text-sm text-gray-600\">or</span>\n        <div className=\"flex-grow border-t border-gray-300\"></div>\n      </div>\n      \n      <Button \n        type=\"button\" \n        variant=\"outline\" \n        className=\"w-full flex items-center justify-center gap-2\"\n        onClick={handleLinkedInSignUp}\n        disabled={isLinkedInLoading}\n      >\n        <Linkedin className=\"h-4 w-4\" />\n        {isLinkedInLoading ? \"Connecting...\" : \"Sign up with LinkedIn\"}\n      </Button>\n    </form>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/ActiveRolesTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[593,596],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[593,596],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":116,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4649,4652],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4649,4652],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":217,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":217,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8660,8663],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8660,8663],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":318,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":318,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14291,14294],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14291,14294],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChevronDown, ChevronUp, Edit, Trash, ExternalLink, Users } from \"lucide-react\";\nimport { Card, CardHeader, CardContent } from \"@/components/ui/card\";\nimport { TooltipProvider, Tooltip, TooltipTrigger, TooltipContent } from \"@/components/ui/tooltip\";\nimport { Link } from \"react-router-dom\";\n\ninterface ActiveRolesTableProps {\n  project: any;\n}\n\nexport const ActiveRolesTable = ({ project }: ActiveRolesTableProps) => {\n  const [expandedProjects, setExpandedProjects] = useState<Set<string>>(new Set());\n  const [expandedTasks, setExpandedTasks] = useState<Set<string>>(new Set());\n\n  const toggleProject = (projectId: string) => {\n    setExpandedProjects(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(projectId)) {\n        newSet.delete(projectId);\n      } else {\n        newSet.add(projectId);\n      }\n      return newSet;\n    });\n  };\n\n  const toggleTask = (taskId: string) => {\n    setExpandedTasks(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(taskId)) {\n        newSet.delete(taskId);\n      } else {\n        newSet.add(taskId);\n      }\n      return newSet;\n    });\n  };\n\n  // Mock function for application counts - in a real app, this would fetch from the database\n  const getApplicationCount = (id: string, type: 'project' | 'task') => {\n    // For demonstration purposes, just return a random number between 0 and 5\n    return Math.floor(Math.random() * 6);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"mb-4 text-sm text-muted-foreground\">\n        These are the projects with active applications on live projects, and the progress of completion of the projects.\n      </div>\n      \n      <Card className=\"border rounded-lg overflow-hidden\">\n        <div className=\"border-b cursor-pointer\" onClick={() => toggleProject(project.project_id || project.id)}>\n          <div className=\"p-4 flex flex-col md:flex-row justify-between\">\n            <div className=\"flex-1\">\n              <div className=\"flex items-center\">\n                <Link \n                  to={`/projects/${project.project_id || project.id}`}\n                  className=\"text-blue-600 hover:underline text-lg font-medium\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  {project.title}\n                </Link>\n                \n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <Link \n                      to={`/business/applications?project=${project.project_id || project.id}`}\n                      className=\"ml-2 flex items-center text-sm text-blue-500 hover:text-blue-700\"\n                      onClick={(e) => e.stopPropagation()}\n                    >\n                      <Users className=\"h-4 w-4 mr-1\" />\n                      {getApplicationCount(project.project_id || project.id, 'project')}\n                    </Link>\n                  </TooltipTrigger>\n                  <TooltipContent>\n                    <p className=\"text-xs\">View applications for this project</p>\n                  </TooltipContent>\n                </Tooltip>\n              </div>\n              \n              <div className=\"flex items-center flex-wrap text-muted-foreground text-sm mt-1\">\n                <span className=\"mr-4\">Status: {project.status || \"Active\"}</span>\n                <span>Timeframe: {project.project_timeframe || project.timeframe || 'Not specified'}</span>\n              </div>\n              \n              <TooltipProvider>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-4\">\n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <div>\n                        <div className=\"text-xs font-medium\">Total Equity Offered</div>\n                        <div className=\"text-sm\">{project.equity_allocation}%</div>\n                      </div>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                      <p className=\"text-xs\">Total equity allocation for this project</p>\n                    </TooltipContent>\n                  </Tooltip>\n                  \n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <div>\n                        <div className=\"text-xs font-medium\">Task Equity</div>\n                        <div className=\"text-sm\">\n                          {project.tasks.reduce((sum: number, task: any) => \n                            sum + (task.equity_allocation || 0), 0)}%\n                        </div>\n                      </div>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                      <p className=\"text-xs\">Sum of equity allocated to all tasks</p>\n                    </TooltipContent>\n                  </Tooltip>\n                  \n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <div>\n                        <div className=\"text-xs font-medium\">Agreed Equity</div>\n                        <div className=\"text-sm\">0%</div>\n                      </div>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                      <p className=\"text-xs\">Total equity agreed with job seekers</p>\n                    </TooltipContent>\n                  </Tooltip>\n                  \n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <div>\n                        <div className=\"text-xs font-medium\">Equity Earned</div>\n                        <div className=\"text-sm\">0%</div>\n                      </div>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                      <p className=\"text-xs\">Equity already earned by job seekers</p>\n                    </TooltipContent>\n                  </Tooltip>\n                </div>\n              </TooltipProvider>\n\n              <div className=\"mt-2\">\n                <div className=\"text-xs font-medium\">Required Skills</div>\n                <div className=\"flex flex-wrap gap-1 mt-1\">\n                  {Array.isArray(project.skills_required) && project.skills_required.map((skill: string, index: number) => (\n                    <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                      {skill}\n                    </Badge>\n                  ))}\n                  {(!Array.isArray(project.skills_required) || project.skills_required.length === 0) && (\n                    <span className=\"text-muted-foreground text-xs\">No skills specified</span>\n                  )}\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start space-x-2 mt-4 md:mt-0\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={(e) => {\n                  e.stopPropagation();\n                  // Edit project logic would go here\n                }}\n              >\n                <Edit className=\"h-4 w-4\" />\n              </Button>\n              \n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={(e) => {\n                  e.stopPropagation();\n                  // Delete project logic would go here \n                }}\n                className=\"text-destructive hover:text-destructive\"\n              >\n                <Trash className=\"h-4 w-4\" />\n              </Button>\n              \n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={(e) => {\n                  e.stopPropagation();\n                  toggleProject(project.project_id || project.id);\n                }}\n              >\n                {expandedProjects.has(project.project_id || project.id) ? (\n                  <ChevronUp className=\"h-4 w-4\" />\n                ) : (\n                  <ChevronDown className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </div>\n          </div>\n        </div>\n        \n        {expandedProjects.has(project.project_id || project.id) && (\n          <div className=\"p-4\">\n            <h3 className=\"text-sm font-medium mb-3\">Project Tasks</h3>\n            \n            {project.tasks.length === 0 ? (\n              <p className=\"text-sm text-muted-foreground\">No tasks available for this project.</p>\n            ) : (\n              <div className=\"space-y-4\">\n                {project.tasks.map((task: any) => (\n                  <Card key={task.id || task.task_id} className=\"overflow-hidden\">\n                    <div className=\"border-b cursor-pointer\" onClick={() => toggleTask(task.id || task.task_id)}>\n                      <div className=\"p-3 flex justify-between items-start\">\n                        <div>\n                          <div className=\"flex items-center\">\n                            <div className=\"font-medium\">{task.title}</div>\n                            \n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Link \n                                  to={`/business/applications?task=${task.id || task.task_id}`}\n                                  className=\"ml-2 flex items-center text-sm text-blue-500 hover:text-blue-700\"\n                                  onClick={(e) => e.stopPropagation()}\n                                >\n                                  <Users className=\"h-4 w-4 mr-1\" />\n                                  {getApplicationCount(task.id || task.task_id, 'task')}\n                                </Link>\n                              </TooltipTrigger>\n                              <TooltipContent>\n                                <p className=\"text-xs\">View applications for this task</p>\n                              </TooltipContent>\n                            </Tooltip>\n                          </div>\n                          <div className=\"flex items-center text-xs text-muted-foreground mt-1\">\n                            <Badge variant=\"outline\" className=\"mr-2\">{task.status}</Badge>\n                            <span>Timeframe: {task.timeframe || 'Not specified'}</span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            onClick={(e) => {\n                              e.stopPropagation();\n                              toggleTask(task.id || task.task_id);\n                            }}\n                          >\n                            {expandedTasks.has(task.id || task.task_id) ? (\n                              <ChevronUp className=\"h-4 w-4\" />\n                            ) : (\n                              <ChevronDown className=\"h-4 w-4\" />\n                            )}\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {expandedTasks.has(task.id || task.task_id) && (\n                      <div className=\"p-3 bg-gray-50 border-t\">\n                        <div className=\"space-y-3\">\n                          <div>\n                            <div className=\"text-xs font-medium mb-1\">Description</div>\n                            <p className=\"text-sm\">{task.description || 'No description provided.'}</p>\n                          </div>\n                          \n                          <TooltipProvider>\n                            <div className=\"grid grid-cols-3 gap-4\">\n                              <Tooltip>\n                                <TooltipTrigger asChild>\n                                  <div>\n                                    <div className=\"text-xs font-medium\">Task Equity</div>\n                                    <div className=\"text-sm\">{task.equity_allocation || 0}%</div>\n                                  </div>\n                                </TooltipTrigger>\n                                <TooltipContent>\n                                  <p className=\"text-xs\">Equity allocated to this task</p>\n                                </TooltipContent>\n                              </Tooltip>\n                              \n                              <Tooltip>\n                                <TooltipTrigger asChild>\n                                  <div>\n                                    <div className=\"text-xs font-medium\">Agreed Equity</div>\n                                    <div className=\"text-sm\">0%</div>\n                                  </div>\n                                </TooltipTrigger>\n                                <TooltipContent>\n                                  <p className=\"text-xs\">Equity agreed for this task</p>\n                                </TooltipContent>\n                              </Tooltip>\n                              \n                              <Tooltip>\n                                <TooltipTrigger asChild>\n                                  <div>\n                                    <div className=\"text-xs font-medium\">Equity Earned</div>\n                                    <div className=\"text-sm\">0%</div>\n                                  </div>\n                                </TooltipTrigger>\n                                <TooltipContent>\n                                  <p className=\"text-xs\">Equity earned for this task</p>\n                                </TooltipContent>\n                              </Tooltip>\n                            </div>\n                          </TooltipProvider>\n                          \n                          <div>\n                            <div className=\"text-xs font-medium mb-1\">Skills Required</div>\n                            <div className=\"flex flex-wrap gap-1\">\n                              {Array.isArray(task.skill_requirements) && task.skill_requirements.length > 0 ? \n                                task.skill_requirements.map((skill: any, index: number) => {\n                                  const skillName = typeof skill === 'string' ? skill : (skill.skill || '');\n                                  const level = typeof skill === 'string' ? 'Intermediate' : (skill.level || '');\n                                  \n                                  return (\n                                    <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                      {skillName} {level && <span className=\"ml-1 opacity-70\">({level})</span>}\n                                    </Badge>\n                                  );\n                                }) : \n                                <span className=\"text-sm text-muted-foreground\">No specific skills required</span>\n                              }\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n        )}\n      </Card>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/BusinessProfileCompletion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/BusinessProfileEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/ProjectApplicationsSection.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'setupRealtimeListener'. Either include it or remove the dependency array.","line":50,"column":6,"nodeType":"ArrayExpression","endLine":50,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [setupRealtimeListener]","fix":{"range":[2676,2678],"text":"[setupRealtimeListener]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5303,5306],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5303,5306],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { Card, CardHeader, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { supabase } from \"@/lib/supabase\";\nimport { toast } from \"sonner\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { JobApplication } from \"@/types/jobSeeker\";\nimport { useApplicationActions } from \"@/components/job-seeker/dashboard/applications/hooks/useApplicationActions\";\nimport { RejectApplicationDialog } from \"./applications/RejectApplicationDialog\";\nimport { AcceptJobDialog } from \"./applications/AcceptJobDialog\";\nimport { useAcceptedJobs } from \"@/hooks/useAcceptedJobs\";\nimport { ApplicationsTable } from \"./applications/ApplicationsTable\";\nimport { ActiveProjectsTable } from \"./applications/ActiveProjectsTable\";\nimport { PendingApplicationsTable } from \"./applications/tables/PendingApplicationsTable\";\nimport { ActiveApplicationsTable } from \"./applications/tables/ActiveApplicationsTable\";\nimport { WithdrawnApplicationsTable } from \"./applications/tables/WithdrawnApplicationsTable\";\nimport { RejectedApplicationsTable } from \"./applications/tables/RejectedApplicationsTable\";\nimport { Application, Project } from \"@/types/business\";\nimport { convertApplicationToJobApplication } from \"@/utils/applicationUtils\";\n\nexport const ProjectApplicationsSection = () => {\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [expandedProjects, setExpandedProjects] = useState<Set<string>>(new Set());\n  const [expandedApplications, setExpandedApplications] = useState<Set<string>>(new Set());\n  const [newApplicationsCount, setNewApplicationsCount] = useState(0);\n  const [newMessagesCount, setNewMessagesCount] = useState(0);\n  const [rejectDialogOpen, setRejectDialogOpen] = useState(false);\n  const [selectedApplicationId, setSelectedApplicationId] = useState<string | null>(null);\n  const [acceptJobDialogOpen, setAcceptJobDialogOpen] = useState(false);\n  const [selectedApplication, setSelectedApplication] = useState<JobApplication | null>(null);\n  const [activeTab, setActiveTab] = useState(\"pending\");\n  const { isUpdatingStatus, updateApplicationStatus } = useApplicationActions(() => {\n    loadProjectsWithApplications();\n  });\n  const { acceptJobAsBusiness, isLoading: isAcceptingJobLoading } = useAcceptedJobs(() => {\n    window.location.reload();\n  });\n\n  const handleTabChange = (tab: string) => {\n    setActiveTab(tab);\n  };\n\n  useEffect(() => {\n    loadProjectsWithApplications();\n    setupRealtimeListener();\n    return () => {\n      cleanupRealtimeListener();\n    };\n  }, []);\n  \n  const setupRealtimeListener = () => {\n    const channel = supabase\n      .channel('application-updates')\n      .on(\n        'postgres_changes',\n        {\n          event: 'INSERT',\n          schema: 'public',\n          table: 'job_applications'\n        },\n        () => {\n          setNewApplicationsCount(prev => prev + 1);\n          toast.info(\"New application received!\");\n          loadProjectsWithApplications();\n        }\n      )\n      .on(\n        'postgres_changes',\n        {\n          event: 'UPDATE',\n          schema: 'public',\n          table: 'job_applications',\n          filter: 'task_discourse=neq.null'\n        },\n        () => {\n          setNewMessagesCount(prev => prev + 1);\n          toast.info(\"New message received!\");\n          loadProjectsWithApplications();\n        }\n      )\n      .subscribe();\n\n    return channel;\n  };\n\n  const cleanupRealtimeListener = () => {\n    supabase.removeChannel(supabase.channel('application-updates'));\n  };\n\n  const loadProjectsWithApplications = async () => {\n    try {\n      setIsLoading(true);\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) return;\n\n      console.log(\"Loading projects for business ID:\", session.user.id);\n\n      const { data: projectsData, error: projectsError } = await supabase\n        .from('business_projects')\n        .select('*')\n        .eq('business_id', session.user.id);\n\n      if (projectsError) {\n        console.error(\"Error fetching projects:\", projectsError);\n        throw projectsError;\n      }\n\n      console.log(\"Projects fetched:\", projectsData?.length || 0);\n\n      if (!projectsData || projectsData.length === 0) {\n        setIsLoading(false);\n        setProjects([]);\n        return;\n      }\n\n      const projectsWithApplications: Project[] = [];\n\n      for (const project of projectsData) {\n        const { data: tasksData, error: tasksError } = await supabase\n          .from('project_sub_tasks')\n          .select('task_id, skill_requirements, equity_allocation, timeframe')\n          .eq('project_id', project.project_id);\n\n        if (tasksError) {\n          console.error('Error fetching tasks for project:', project.project_id, tasksError);\n          continue;\n        }\n\n        console.log(`Fetched ${tasksData?.length || 0} tasks for project ${project.project_id}`);\n        \n        const taskIds = tasksData.map(task => task.task_id);\n\n        if (taskIds.length === 0) {\n          projectsWithApplications.push({\n            ...project,\n            applications: []\n          });\n          continue;\n        }\n\n        const taskSkillsMap = new Map<string, any>();\n        tasksData.forEach(task => {\n          taskSkillsMap.set(task.task_id, {\n            skill_requirements: task.skill_requirements || [],\n            equity_allocation: task.equity_allocation,\n            timeframe: task.timeframe\n          });\n        });\n\n        const { data: applicationsData, error: applicationsError } = await supabase\n          .from('job_applications')\n          .select('*')\n          .in('task_id', taskIds);\n\n        if (applicationsError) {\n          console.error('Error fetching applications:', applicationsError);\n          continue;\n        }\n\n        console.log(`Fetched ${applicationsData?.length || 0} applications for project ${project.project_id}`);\n\n        if (!applicationsData || applicationsData.length === 0) {\n          projectsWithApplications.push({\n            ...project,\n            applications: []\n          });\n          continue;\n        }\n\n        const applicationsWithProfiles = [];\n\n        for (const app of applicationsData) {\n          const { data: profileData, error: profileError } = await supabase\n            .from('profiles')\n            .select('first_name, last_name, title, location, employment_preference, skills')\n            .eq('id', app.user_id)\n            .maybeSingle();\n\n          if (profileError) {\n            console.error('Error fetching profile for user:', app.user_id, profileError);\n            continue;\n          }\n\n          const { data: taskData, error: taskError } = await supabase\n            .from('project_sub_tasks')\n            .select('title, description, skills_required, skill_requirements, equity_allocation, timeframe')\n            .eq('task_id', app.task_id)\n            .maybeSingle();\n\n          if (taskError) {\n            console.error('Error fetching task details:', taskError);\n            continue;\n          }\n\n          let userSkills = [];\n          if (profileData?.skills) {\n            try {\n              if (typeof profileData.skills === 'string') {\n                const parsedSkills = JSON.parse(profileData.skills);\n                if (Array.isArray(parsedSkills)) {\n                  userSkills = parsedSkills.map(s => \n                    typeof s === 'string' ? { skill: s, level: \"Intermediate\" } : s\n                  );\n                }\n              } else if (Array.isArray(profileData.skills)) {\n                userSkills = profileData.skills.map(s => \n                  typeof s === 'string' ? { skill: s, level: \"Intermediate\" } : s\n                );\n              }\n            } catch (e) {\n              console.error(\"Error parsing skills:\", e);\n            }\n          }\n\n          const userSkillNames = userSkills.map(s => s.skill.toLowerCase());\n          const taskRequiredSkills = taskData?.skill_requirements || [];\n          \n          let matchedSkills = 0;\n          if (Array.isArray(taskRequiredSkills)) {\n            taskRequiredSkills.forEach(skillObj => {\n              const skillName = typeof skillObj === 'string' ? \n                skillObj.toLowerCase() : \n                (skillObj.skill ? skillObj.skill.toLowerCase() : '');\n                \n              if (skillName && userSkillNames.includes(skillName)) {\n                matchedSkills++;\n              }\n            });\n          }\n          \n          const skillMatch = taskRequiredSkills.length > 0 \n            ? Math.round((matchedSkills / taskRequiredSkills.length) * 100) \n            : 0;\n\n          applicationsWithProfiles.push({\n            ...app,\n            profile: {\n              ...profileData,\n              skills: userSkills\n            },\n            business_roles: {\n              ...(taskData || {}),\n              project: {\n                title: project.title\n              }\n            },\n            skillMatch\n          });\n        }\n\n        projectsWithApplications.push({\n          ...project,\n          applications: applicationsWithProfiles\n        });\n      }\n\n      console.log(\"Final projects with applications:\", projectsWithApplications.length);\n      setProjects(projectsWithApplications);\n      \n      const oneDayAgo = new Date();\n      oneDayAgo.setDate(oneDayAgo.getDate() - 1);\n      \n      let newApps = 0;\n      let newMsgs = 0;\n      \n      projectsWithApplications.forEach(project => {\n        project.applications.forEach(app => {\n          const appDate = new Date(app.applied_at);\n          if (appDate > oneDayAgo && app.status === 'pending') {\n            newApps++;\n          }\n          \n          if (app.task_discourse) {\n            const lastMessageMatch = app.task_discourse.match(/\\[([^\\]]+)\\]/);\n            if (lastMessageMatch) {\n              try {\n                const msgDate = new Date(lastMessageMatch[1]);\n                if (msgDate > oneDayAgo) {\n                  newMsgs++;\n                }\n              } catch (e) {\n                console.error(\"Error parsing message date:\", e);\n              }\n            }\n          }\n        });\n      });\n      \n      setNewApplicationsCount(newApps);\n      setNewMessagesCount(newMsgs);\n    } catch (error) {\n      console.error('Error loading projects with applications:', error);\n      toast.error(\"Failed to load applications data\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const findApplicationById = (applicationId: string): Application | undefined => {\n    for (const project of projects) {\n      const application = project.applications.find(app => app.job_app_id === applicationId);\n      if (application) return application;\n    }\n    return undefined;\n  };\n\n  const handleStatusChange = async (applicationId: string, newStatus: string) => {\n    const application = findApplicationById(applicationId);\n    \n    if (!application) {\n      toast.error(\"Application not found\");\n      return;\n    }\n    \n    if (application.accepted_business || application.accepted_jobseeker) {\n      toast.error(\"Cannot change status after acceptance. Use contract management instead.\");\n      return;\n    }\n    \n    if (newStatus === 'rejected') {\n      setSelectedApplicationId(applicationId);\n      setRejectDialogOpen(true);\n      return;\n    }\n    \n    await updateApplicationStatus(applicationId, newStatus);\n  };\n\n  const openAcceptJobDialog = async (application: Application) => {\n    const jobApp = convertApplicationToJobApplication(application);\n    setSelectedApplication(jobApp);\n    setAcceptJobDialogOpen(true);\n    return Promise.resolve();\n  };\n\n  const handleRejectWithNote = async (applicationId: string, note: string) => {\n    try {\n      const { data: application, error: fetchError } = await supabase\n        .from('job_applications')\n        .select('task_discourse')\n        .eq('job_app_id', applicationId)\n        .single();\n        \n      if (fetchError) throw fetchError;\n      \n      const timestamp = new Date().toLocaleString();\n      const rejectMessage = `[${timestamp}] Business: ${note} (Rejection reason)`;\n      \n      const updatedDiscourse = application.task_discourse \n        ? `${application.task_discourse}\\n\\n${rejectMessage}`\n        : rejectMessage;\n        \n      const { error: updateError } = await supabase\n        .from('job_applications')\n        .update({ \n          status: 'rejected',\n          task_discourse: updatedDiscourse\n        })\n        .eq('job_app_id', applicationId);\n        \n      if (updateError) throw updateError;\n      \n      toast.success(\"Application rejected with note\");\n      loadProjectsWithApplications();\n    } catch (error) {\n      console.error('Error rejecting application:', error);\n      toast.error(\"Failed to reject application\");\n    }\n  };\n\n  const toggleProjectExpanded = (projectId: string) => {\n    setExpandedProjects(prev => {\n      const newExpanded = new Set(prev);\n      if (newExpanded.has(projectId)) {\n        newExpanded.delete(projectId);\n      } else {\n        newExpanded.add(projectId);\n      }\n      return newExpanded;\n    });\n  };\n\n  const toggleApplicationExpanded = (applicationId: string) => {\n    setExpandedApplications(prev => {\n      const newExpanded = new Set(prev);\n      if (newExpanded.has(applicationId)) {\n        newExpanded.delete(applicationId);\n      } else {\n        newExpanded.clear();\n        newExpanded.add(applicationId);\n      }\n      return newExpanded;\n    });\n  };\n\n  const handleAcceptJob = async (application: JobApplication) => {\n    try {\n      await acceptJobAsBusiness(application);\n      toast.success(\"Job accepted successfully\");\n      loadProjectsWithApplications();\n    } catch (error) {\n      console.error(\"Error accepting job:\", error);\n      toast.error(\"Failed to accept job\");\n    }\n  };\n\n  const getPendingApplications = () => {\n    const pendingApps: Application[] = [];\n    projects.forEach(project => {\n      project.applications.forEach(app => {\n        if (['pending', 'in review'].includes(app.status.toLowerCase())) {\n          pendingApps.push(app);\n        }\n      });\n    });\n    return pendingApps;\n  };\n\n  const getActiveApplications = () => {\n    const activeApps: Application[] = [];\n    projects.forEach(project => {\n      project.applications.forEach(app => {\n        if (['negotiation', 'accepted'].includes(app.status.toLowerCase())) {\n          activeApps.push(app);\n        }\n      });\n    });\n    return activeApps;\n  };\n\n  const getWithdrawnApplications = () => {\n    const withdrawnApps: Application[] = [];\n    projects.forEach(project => {\n      project.applications.forEach(app => {\n        if (app.status.toLowerCase() === 'withdrawn') {\n          withdrawnApps.push(app);\n        }\n      });\n    });\n    return withdrawnApps;\n  };\n\n  const getRejectedApplications = () => {\n    const rejectedApps: Application[] = [];\n    projects.forEach(project => {\n      project.applications.forEach(app => {\n        if (app.status.toLowerCase() === 'rejected') {\n          rejectedApps.push(app);\n        }\n      });\n    });\n    return rejectedApps;\n  };\n\n  const pendingApplications = getPendingApplications();\n  const activeApplications = getActiveApplications();\n  const withdrawnApplications = getWithdrawnApplications();\n  const rejectedApplications = getRejectedApplications();\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <h2 className=\"text-lg font-semibold\">Project Applications</h2>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex justify-center p-4\">\n            <p>Loading applications...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <h2 className=\"text-lg font-semibold\">Project Applications</h2>\n        <p className=\"text-muted-foreground\">\n          Applications received for your projects. Review applications, negotiate between parties, agree accepted terms.\n        </p>\n      </CardHeader>\n      <CardContent>\n        {projects.length === 0 ? (\n          <p className=\"text-muted-foreground text-center p-4\">No projects found.</p>\n        ) : (\n          <Tabs value={activeTab} onValueChange={handleTabChange}>\n            <TabsList>\n              <TabsTrigger value=\"pending\" className=\"relative\">\n                Pending\n                {newApplicationsCount > 0 && (\n                  <Badge className=\"absolute -top-2 -right-2 bg-red-500 text-white h-5 w-5 flex items-center justify-center p-0 rounded-full\">\n                    {newApplicationsCount}\n                  </Badge>\n                )}\n              </TabsTrigger>\n              <TabsTrigger value=\"active\" className=\"relative\">\n                Active Projects\n                {newMessagesCount > 0 && (\n                  <Badge className=\"absolute -top-2 -right-2 bg-red-500 text-white h-5 w-5 flex items-center justify-center p-0 rounded-full\">\n                    {newMessagesCount}\n                  </Badge>\n                )}\n              </TabsTrigger>\n              <TabsTrigger value=\"completed\">Completed</TabsTrigger>\n              <TabsTrigger value=\"withdrawn\">Withdrawn</TabsTrigger>\n              <TabsTrigger value=\"rejected\">Rejected</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"pending\" className=\"py-4\">\n              {pendingApplications.length === 0 ? (\n                <p className=\"text-muted-foreground text-center p-4\">No pending applications found.</p>\n              ) : (\n                <>\n                  <ApplicationsTable status=\"pending\" />\n                  <PendingApplicationsTable \n                    applications={pendingApplications}\n                    expandedApplications={expandedApplications}\n                    toggleApplicationExpanded={toggleApplicationExpanded}\n                    handleStatusChange={handleStatusChange}\n                    isUpdatingStatus={isUpdatingStatus}\n                  />\n                </>\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"active\" className=\"py-4\">\n              {activeApplications.length === 0 ? (\n                <p className=\"text-muted-foreground text-center p-4\">No active projects found.</p>\n              ) : (\n                <>\n                  <p className=\"text-muted-foreground mb-4\">\n                    When both users (jobseeker and business) agree on the terms both are required to 'accept terms' which will then allow the user to work on the tasks and as the tasks are completed the equity allocation is reviewed in the Live Projects tab.\n                  </p>\n                  <ActiveProjectsTable status=\"active\" />\n                  <ActiveApplicationsTable \n                    applications={activeApplications}\n                    expandedApplications={expandedApplications}\n                    toggleApplicationExpanded={toggleApplicationExpanded}\n                    handleStatusChange={handleStatusChange}\n                    isUpdatingStatus={isUpdatingStatus}\n                    onApplicationUpdate={() => loadProjectsWithApplications()}\n                    openAcceptJobDialog={openAcceptJobDialog}\n                    handleAcceptJob={handleAcceptJob}\n                    isAcceptingJobLoading={isAcceptingJobLoading}\n                  />\n                </>\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"completed\" className=\"py-4\">\n              <ApplicationsTable status=\"completed\" />\n            </TabsContent>\n\n            <TabsContent value=\"withdrawn\" className=\"py-4\">\n              {withdrawnApplications.length === 0 ? (\n                <p className=\"text-muted-foreground text-center p-4\">No withdrawn applications found.</p>\n              ) : (\n                <WithdrawnApplicationsTable \n                  applications={withdrawnApplications}\n                  expandedApplications={expandedApplications}\n                  toggleApplicationExpanded={toggleApplicationExpanded}\n                  handleStatusChange={handleStatusChange}\n                  isUpdatingStatus={isUpdatingStatus}\n                />\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"rejected\" className=\"py-4\">\n              {rejectedApplications.length === 0 ? (\n                <p className=\"text-muted-foreground text-center p-4\">No rejected applications found.</p>\n              ) : (\n                <RejectedApplicationsTable \n                  applications={rejectedApplications}\n                  expandedApplications={expandedApplications}\n                  toggleApplicationExpanded={toggleApplicationExpanded}\n                  handleStatusChange={handleStatusChange}\n                  isUpdatingStatus={isUpdatingStatus}\n                />\n              )}\n            </TabsContent>\n          </Tabs>\n        )}\n      </CardContent>\n      \n      <RejectApplicationDialog\n        isOpen={rejectDialogOpen}\n        onOpenChange={setRejectDialogOpen}\n        onReject={(note) => {\n          if (selectedApplicationId) {\n            handleRejectWithNote(selectedApplicationId, note);\n          }\n        }}\n      />\n      \n      <AcceptJobDialog\n        isOpen={acceptJobDialogOpen}\n        onOpenChange={setAcceptJobDialogOpen}\n        application={selectedApplication}\n        onAccept={handleAcceptJob}\n        isLoading={isAcceptingJobLoading}\n      />\n    </Card>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/ProjectsSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2611,2614],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2611,2614],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useEffect, useState } from \"react\";\nimport { Card, CardHeader, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { PlusCircle } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { ProjectTabs } from \"./projects/tabs/ProjectTabs\";\nimport { DeleteProjectDialog } from \"./projects/dialogs/DeleteProjectDialog\";\nimport { loadProjects, deleteProject } from \"./projects/services/ProjectSectionService\";\n\n// Define the types directly here to avoid conflicts\ninterface SkillRequirement {\n  skill: string;\n  level: string;\n}\n\ninterface Task {\n  task_id: string;\n  title: string;\n  description: string;\n  status: string;\n  hours_logged?: number;\n  equity_earned?: number;\n  equity_allocation: number;\n  timeframe: string;\n  skills_required: string[];\n  skill_requirements: SkillRequirement[];\n  dependencies: string[];\n  task_status?: string;\n  completion_percentage?: number;\n}\n\ninterface Project {\n  project_id: string;\n  title: string;\n  description: string;\n  status: string;\n  equity_allocation: number;\n  equity_allocated: number;\n  skills_required: string[];\n  project_timeframe: string;\n  tasks: Task[];\n}\n\nexport const ProjectsSection = () => {\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [showProjectForm, setShowProjectForm] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [projectToDelete, setProjectToDelete] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadProjectsData();\n  }, []);\n\n  const loadProjectsData = async () => {\n    const projectsData = await loadProjects();\n    setProjects(projectsData as unknown as Project[]);\n  };\n\n  const handleProjectCreated = (newProject: Project) => {\n    setProjects([...projects, { ...newProject, tasks: [] }]);\n    setShowProjectForm(false);\n    toast.success(\"Project created successfully\");\n  };\n\n  const handleProjectUpdated = (updatedProject: Project) => {\n    setProjects(projects.map(project => \n      project.project_id === updatedProject.project_id ? updatedProject : project\n    ));\n    toast.success(\"Project updated successfully\");\n  };\n\n  const handleProjectDeleted = (projectId: string) => {\n    setProjects(projects.filter(project => project.project_id !== projectId));\n    toast.success(\"Project deleted successfully\");\n  };\n\n  const showDeleteConfirmation = (projectId: string) => {\n    setProjectToDelete(projectId);\n    setDeleteDialogOpen(true);\n  };\n\n  const confirmDeleteProject = async () => {\n    if (projectToDelete) {\n      const success = await deleteProject(projectToDelete, projects as any);\n      if (success) {\n        handleProjectDeleted(projectToDelete);\n      }\n    }\n    setDeleteDialogOpen(false);\n    setProjectToDelete(null);\n  };\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between\">\n        <h2 className=\"text-lg font-semibold\">Projects & Tasks</h2>\n        <Button onClick={() => setShowProjectForm(true)}>\n          <PlusCircle className=\"mr-2 h-4 w-4\" />\n          New Project\n        </Button>\n      </CardHeader>\n      <CardContent>\n        <ProjectTabs\n          projects={projects}\n          showProjectForm={showProjectForm}\n          setShowProjectForm={setShowProjectForm}\n          handleProjectCreated={handleProjectCreated}\n          handleProjectUpdated={handleProjectUpdated}\n          handleProjectDeleted={showDeleteConfirmation}\n        />\n      </CardContent>\n      \n      <DeleteProjectDialog\n        isOpen={deleteDialogOpen}\n        onOpenChange={setDeleteDialogOpen}\n        onCancel={() => setProjectToDelete(null)}\n        onConfirm={confirmDeleteProject}\n      />\n    </Card>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/applications/AcceptJobDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/applications/ActiveProjectsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/applications/ApplicationCard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAcceptedJob'. Either include it or remove the dependency array.","line":45,"column":6,"nodeType":"ArrayExpression","endLine":45,"endColumn":81,"suggestions":[{"desc":"Update the dependencies array to be: [isExpanded, application.accepted_business, application.accepted_jobseeker, loadAcceptedJob]","fix":{"range":[1725,1800],"text":"[isExpanded, application.accepted_business, application.accepted_jobseeker, loadAcceptedJob]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { Application } from \"@/types/business\";\nimport { ChevronDown, ChevronRight, Bell, CheckCircle, FileText, Loader2 } from \"lucide-react\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { useAcceptedJobsCore, AcceptedJob } from \"@/hooks/jobs/useAcceptedJobsCore\";\nimport { ExpandedApplicationContent } from \"./ExpandedApplicationContent\";\nimport { previewApplicationCV } from \"@/utils/setupStorage\";\n\ninterface ApplicationCardProps {\n  application: Application;\n  isExpanded: boolean;\n  toggleExpand: () => void;\n  openAcceptJobDialog: (application: Application) => void;\n  handleStatusChange: (applicationId: string, newStatus: string) => Promise<void>;\n}\n\nexport const ApplicationCard = ({\n  application,\n  isExpanded,\n  toggleExpand,\n  openAcceptJobDialog,\n  handleStatusChange\n}: ApplicationCardProps) => {\n  const [acceptedJob, setAcceptedJob] = useState<AcceptedJob | null>(null);\n  const [isUpdatingStatus, setIsUpdatingStatus] = useState<string | null>(null);\n  const { getAcceptedJob } = useAcceptedJobsCore(() => {\n    loadAcceptedJob();\n  });\n  \n  const loadAcceptedJob = async () => {\n    if (application.accepted_business && application.accepted_jobseeker) {\n      const jobData = await getAcceptedJob(application.job_app_id);\n      setAcceptedJob(jobData);\n    }\n  };\n  \n  useEffect(() => {\n    if (isExpanded) {\n      loadAcceptedJob();\n    }\n  }, [isExpanded, application.accepted_business, application.accepted_jobseeker]);\n  \n  // Check if CV exists and is from the job_applications bucket\n  const hasCvInJobApplicationsBucket = application.cv_url && \n    (application.cv_url.includes('job_applications/') || application.cv_url.includes('job-applications/'));\n  \n  // Handle CV download safely\n  const handleCvDownload = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (application.cv_url) {\n      previewApplicationCV(application.cv_url);\n    }\n  };\n\n  // Handle status change with loading state\n  const onStatusChange = async (e: React.ChangeEvent<HTMLSelectElement>) => {\n    e.stopPropagation();\n    setIsUpdatingStatus(application.job_app_id);\n    try {\n      await handleStatusChange(application.job_app_id, e.target.value);\n    } finally {\n      setIsUpdatingStatus(null);\n    }\n  };\n  \n  return (\n    <Card className=\"shadow-sm hover:shadow transition-shadow\">\n      <Collapsible open={isExpanded} onOpenChange={toggleExpand}>\n        <CardHeader className=\"p-4 pb-3\">\n          {/* Two-row grid layout */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-2\">\n            {/* First row */}\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"font-semibold\">Applicant:</span>\n              <span>{application.profile?.first_name} {application.profile?.last_name}</span>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <span className=\"font-semibold\">Role:</span>\n              <span>{application.business_roles?.title || \"Untitled Role\"}</span>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <span className=\"font-semibold\">Description:</span>\n              <span className=\"truncate\">{application.business_roles?.description || \"No description\"}</span>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <span className=\"font-semibold\">Equity:</span>\n              <span>{application.business_roles?.equity_allocation ? `${application.business_roles.equity_allocation}%` : \"N/A\"}</span>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <span className=\"font-semibold\">Status:</span>\n              <div className=\"flex items-center\">\n                <select \n                  className=\"px-2 py-1 border rounded text-sm bg-white\"\n                  value={application.status}\n                  onChange={onStatusChange}\n                  onClick={(e) => e.stopPropagation()}\n                  disabled={isUpdatingStatus === application.job_app_id}\n                >\n                  <option value=\"negotiation\">Negotiation</option>\n                  <option value=\"accepted\">Accepted</option>\n                  <option value=\"rejected\">Rejected</option>\n                </select>\n                {isUpdatingStatus === application.job_app_id && (\n                  <Loader2 className=\"animate-spin ml-2 h-4 w-4\" />\n                )}\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <span className=\"font-semibold\">Jobseeker Accepted:</span>\n              <span>{application.accepted_jobseeker ? \"Yes\" : \"No\"}</span>\n            </div>\n\n            {/* Only show CV download button if CV exists in job_applications bucket */}\n            {hasCvInJobApplicationsBucket && (\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleCvDownload}\n                >\n                  <FileText className=\"mr-1 h-4 w-4\" />\n                  Download Application CV\n                </Button>\n              </div>\n            )}\n          </div>\n          \n          {/* Second row */}\n          <div className=\"mt-2 grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-2\">\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"font-semibold\">Skills Required:</span>\n              <div className=\"flex flex-wrap gap-1\">\n                {application.business_roles?.skill_requirements?.map((skill, index) => (\n                  <Badge key={index} variant=\"outline\" className=\"bg-slate-50\">\n                    {typeof skill === 'string' ? skill : skill.skill}\n                    {typeof skill !== 'string' && skill.level && \n                      <span className=\"ml-1 opacity-70\">({skill.level})</span>\n                    }\n                  </Badge>\n                ))}\n                {(!application.business_roles?.skill_requirements || \n                  application.business_roles.skill_requirements.length === 0) && \n                  <span className=\"text-muted-foreground\">No specific skills required</span>\n                }\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <span className=\"font-semibold\">Timeframe:</span>\n              <span>{application.business_roles?.timeframe || \"Not specified\"}</span>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-between items-center mt-3\">\n            <CollapsibleTrigger asChild>\n              <Button variant=\"ghost\" size=\"sm\" className=\"flex items-center\">\n                {isExpanded ? (\n                  <>\n                    <ChevronDown className=\"h-4 w-4 mr-1\" />\n                    Hide Details\n                  </>\n                ) : (\n                  <>\n                    <ChevronRight className=\"h-4 w-4 mr-1\" />\n                    Show Details\n                  </>\n                )}\n              </Button>\n            </CollapsibleTrigger>\n            \n            {application.status === 'accepted' && (\n              <TooltipProvider>\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <Button \n                      size=\"sm\" \n                      variant=\"outline\" \n                      className=\"h-8 px-2\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        openAcceptJobDialog(application);\n                      }}\n                      disabled={application.accepted_business}\n                    >\n                      {application.accepted_business ? (\n                        <CheckCircle className=\"h-4 w-4 mr-1 text-green-500\" />\n                      ) : (\n                        <Bell className=\"h-4 w-4 mr-1\" />\n                      )}\n                      {application.accepted_business ? \"Accepted\" : \"Accept Contract\"}\n                    </Button>\n                  </TooltipTrigger>\n                  <TooltipContent>\n                    {application.accepted_business \n                      ? \"You have accepted this job contract\" \n                      : \"Accept job contract and finalize equity agreement\"}\n                  </TooltipContent>\n                </Tooltip>\n              </TooltipProvider>\n            )}\n          </div>\n        </CardHeader>\n        \n        <CollapsibleContent>\n          <ExpandedApplicationContent \n            application={application}\n            acceptedJob={acceptedJob}\n            onUpdate={loadAcceptedJob}\n          />\n        </CollapsibleContent>\n      </Collapsible>\n    </Card>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/applications/ApplicationsTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[894,897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[894,897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1239,1242],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1239,1242],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchApplicationCount'. Either include it or remove the dependency array.","line":207,"column":6,"nodeType":"ArrayExpression","endLine":207,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [fetchApplicationCount, status]","fix":{"range":[7874,7882],"text":"[fetchApplicationCount, status]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchApplicationCount'. Either include it or remove the dependency array.","line":280,"column":6,"nodeType":"ArrayExpression","endLine":280,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [status, projectFilter, fetchApplicationCount]","fix":{"range":[10042,10065],"text":"[status, projectFilter, fetchApplicationCount]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🔧 Enhanced ApplicationsTable with Auto Contract Generation - FIXED EQUITY REFERENCES\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from '@/components/ui/select';\nimport { supabase } from '@/lib/supabase';\nimport { useSearchParams, useNavigate } from 'react-router-dom';\nimport { Badge } from '@/components/ui/badge';\nimport { toast } from 'sonner';\n\ninterface ApplicationsTableProps {\n  status: string;\n}\n\nexport const ApplicationsTable = ({ status }: ApplicationsTableProps) => {\n  const navigate = useNavigate();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [projectFilter, setProjectFilter] = useState<string | null>(searchParams.get('project') || null);\n  const [projects, setProjects] = useState<any[]>([]);\n  const [applicationCount, setApplicationCount] = useState<number>(0);\n  const [pendingActionCount, setPendingActionCount] = useState<number>(0);\n  const [loading, setLoading] = useState<boolean>(true);\n\n  // 🔧 FIXED: Auto-create accepted_jobs when status changes to 'accepted'\n  const createAcceptedJobRecord = async (application: any) => {\n    try {\n      console.log('Creating accepted_jobs record for application:', application.job_app_id);\n      \n      // Check if accepted_jobs record already exists\n      const { data: existingJob, error: checkError } = await supabase\n        .from('accepted_jobs')\n        .select('id')\n        .eq('job_app_id', application.job_app_id)\n        .single();\n        \n      if (existingJob) {\n        console.log('Accepted job record already exists:', existingJob.id);\n        return existingJob;\n      }\n      \n      // 🎯 FIXED: Get task details with correct column names for equity calculation\n      // Based on your schema, business_roles contains the task-level equity allocation\n      const { data: taskData, error: taskError } = await supabase\n        .from('business_roles')\n        .select(`\n          project_id,\n          equity_allocation,\n          role_id,\n          title,\n          description\n        `)\n        .eq('role_id', application.role_id)\n        .single();\n        \n      if (taskError) {\n        console.error('Error fetching task data:', taskError);\n        console.error('Attempted to fetch role_id:', application.role_id);\n        throw new Error(`Failed to fetch task equity information: ${taskError.message}`);\n      }\n\n      if (!taskData) {\n        throw new Error('No task data found for the specified role');\n      }\n\n      // 💡 EQUITY FLOW EXPLANATION:\n      // 1. business_roles.equity_allocation = Total equity allocated to this specific task/role\n      // 2. accepted_jobs.equity_agreed = Agreed equity when job is accepted (copied from business_roles.equity_allocation)\n      // 3. accepted_jobs.jobs_equity_allocated = Actually allocated equity as work progresses (starts at 0)\n      \n      const taskEquityAllocation = taskData.equity_allocation || 0;\n      \n      console.log('Task equity allocation:', taskEquityAllocation);\n      \n      // 🔧 ENHANCED: Create the accepted_jobs record with proper equity tracking\n      const { data: newAcceptedJob, error: createError } = await supabase\n        .from('accepted_jobs')\n        .insert({\n          job_app_id: application.job_app_id,\n          user_id: application.user_id,\n          business_id: application.business_id,\n          project_id: taskData.project_id,\n          role_id: application.role_id,\n          // 💰 EQUITY AGREED: This is the total equity the job seeker will earn for completing this task\n          equity_agreed: taskEquityAllocation,\n          // 📊 EQUITY ALLOCATED: This starts at 0 and increases as work is completed\n          jobs_equity_allocated: 0,\n          date_accepted: new Date().toISOString(),\n          status: 'active',\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        })\n        .select()\n        .single();\n        \n      if (createError) {\n        console.error('Error creating accepted job:', createError);\n        throw new Error(`Failed to create contract record: ${createError.message}`);\n      }\n      \n      console.log('Created accepted_jobs record:', newAcceptedJob);\n      \n      // 🔧 ENHANCED: Update the application to mark both parties as accepted\n      const { error: updateError } = await supabase\n        .from('job_applications')\n        .update({\n          accepted_business: true,\n          accepted_jobseeker: true,\n          updated_at: new Date().toISOString()\n        })\n        .eq('job_app_id', application.job_app_id);\n        \n      if (updateError) {\n        console.error('Error updating application acceptance:', updateError);\n        throw new Error(`Failed to update application status: ${updateError.message}`);\n      }\n      \n      // 🎉 SUCCESS: Log to system for audit trail\n      try {\n        await supabase\n          .from('system_logs')\n          .insert({\n            event_type: 'auto_contract_creation',\n            description: `Automatically created contract for application ${application.job_app_id}`,\n            metadata: {\n              job_app_id: application.job_app_id,\n              user_id: application.user_id,\n              business_id: application.business_id,\n              equity_agreed: taskEquityAllocation,\n              role_title: taskData.title\n            }\n          });\n      } catch (logError) {\n        // Don't fail the main operation if logging fails\n        console.warn('Failed to log contract creation:', logError);\n      }\n      \n      toast.success(`Job accepted! Contract created with ${taskEquityAllocation}% equity allocation.`);\n      return newAcceptedJob;\n      \n    } catch (error) {\n      console.error('Error in createAcceptedJobRecord:', error);\n      toast.error(`Failed to process job acceptance: ${error.message}`);\n      throw error;\n    }\n  };\n\n  // 🔧 ENHANCED: Monitor for newly accepted applications and auto-process them\n  useEffect(() => {\n    const monitorAcceptedApplications = async () => {\n      if (status !== 'accepted') return;\n      \n      try {\n        // Get all accepted applications that don't have accepted_jobs records yet\n        const { data: acceptedApps, error: fetchError } = await supabase\n          .from('job_applications')\n          .select(`\n            job_app_id,\n            user_id,\n            role_id,\n            status,\n            accepted_business,\n            accepted_jobseeker,\n            business_id,\n            project_id\n          `)\n          .eq('status', 'accepted');\n          \n        if (fetchError) {\n          console.error('Error fetching accepted applications:', fetchError);\n          return;\n        }\n        \n        if (acceptedApps && acceptedApps.length > 0) {\n          console.log(`Found ${acceptedApps.length} accepted applications to check`);\n          \n          // Check which ones need accepted_jobs records\n          for (const app of acceptedApps) {\n            // Check if accepted_jobs record exists\n            const { data: existingJob } = await supabase\n              .from('accepted_jobs')\n              .select('id')\n              .eq('job_app_id', app.job_app_id)\n              .single();\n              \n            if (!existingJob && (!app.accepted_business || !app.accepted_jobseeker)) {\n              console.log('Auto-processing accepted application:', app.job_app_id);\n              await createAcceptedJobRecord(app);\n            }\n          }\n          \n          // Refresh the count after processing\n          setTimeout(() => {\n            fetchApplicationCount();\n          }, 1000);\n        }\n      } catch (error) {\n        console.error('Error monitoring accepted applications:', error);\n      }\n    };\n    \n    monitorAcceptedApplications();\n  }, [status]);\n\n  // Fetch available projects for filtering\n  useEffect(() => {\n    const fetchProjects = async () => {\n      try {\n        const { data: businessProjects, error } = await supabase\n          .from('business_projects')\n          .select('project_id, title');\n          \n        if (error) {\n          console.error('Error fetching projects for filtering:', error);\n          return;\n        }\n        \n        setProjects(businessProjects || []);\n      } catch (error) {\n        console.error('Error in project fetching:', error);\n      }\n    };\n    \n    fetchProjects();\n  }, []);\n\n  // 🔧 ENHANCED: Fetch application count with better error handling\n  const fetchApplicationCount = async () => {\n    setLoading(true);\n    try {\n      // Base query builder\n      let query = supabase\n        .from('job_applications')\n        .select('job_app_id, status, accepted_business, accepted_jobseeker', { count: 'exact' })\n        .eq('status', status);\n        \n      // Add project filter if selected\n      if (projectFilter) {\n        query = query.eq('project_id', projectFilter);\n      }\n      \n      // Execute the query\n      const { data, count, error } = await query;\n      \n      if (error) {\n        console.error('Error fetching application count:', error);\n        return;\n      }\n      \n      setApplicationCount(count || 0);\n      \n      // 🔧 ENHANCED: Count applications that need processing\n      if (status === 'accepted') {\n        // Count applications that are accepted but don't have both party acceptances\n        const needsProcessing = data?.filter(app => \n          !app.accepted_business || !app.accepted_jobseeker\n        ).length || 0;\n        \n        setPendingActionCount(needsProcessing);\n      } else if (status === 'pending') {\n        // For pending, all applications need attention\n        setPendingActionCount(count || 0);\n      } else {\n        setPendingActionCount(0);\n      }\n    } catch (error) {\n      console.error('Error counting applications:', error);\n      toast.error('Failed to load application count');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchApplicationCount();\n  }, [status, projectFilter]);\n\n  // Update URL params when project filter changes\n  const handleProjectFilterChange = (value: string) => {\n    setProjectFilter(value === 'all' ? null : value);\n    \n    // Update URL search params\n    if (value === 'all') {\n      searchParams.delete('project');\n    } else {\n      searchParams.set('project', value);\n    }\n    setSearchParams(searchParams);\n  };\n  \n  // Navigate to applications list with filter\n  const handleViewApplications = () => {\n    let url = `/business/dashboard?tab=applications&status=${status}`;\n    if (projectFilter) {\n      url += `&project=${projectFilter}`;\n    }\n    navigate(url);\n  };\n\n  // 🔧 ENHANCED: Better status descriptions with equity context\n  const getStatusInfo = () => {\n    switch (status) {\n      case 'pending':\n        return {\n          title: 'Pending Applications',\n          description: 'Applications awaiting your review and decision'\n        };\n      case 'accepted':\n        return {\n          title: 'Accepted Applications', \n          description: 'Applications accepted by business. Contract generation with equity allocation happens automatically when both parties agree.'\n        };\n      case 'active':\n        return {\n          title: 'Active Contracts',\n          description: 'Live contracts with ongoing work and equity allocation in progress.'\n        };\n      case 'completed':\n        return {\n          title: 'Completed Contracts',\n          description: 'Finished contracts where all agreed equity has been allocated.'\n        };\n      default:\n        return {\n          title: 'Applications',\n          description: 'View and manage job applications'\n        };\n    }\n  };\n\n  const statusInfo = getStatusInfo();\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between\">\n        <div>\n          <div className=\"text-lg font-semibold mb-1\">\n            {statusInfo.title}\n            <Badge variant=\"secondary\" className=\"ml-2\">\n              {applicationCount}\n              {pendingActionCount > 0 && (\n                <span className=\"ml-1 text-amber-600 font-bold\">\n                  {status === 'accepted' \n                    ? `(${pendingActionCount} auto-processing)` \n                    : `(${pendingActionCount} need attention)`\n                  }\n                </span>\n              )}\n            </Badge>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            {statusInfo.description}\n          </p>\n        </div>\n        <div className=\"w-[200px]\">\n          <Select \n            value={projectFilter || 'all'} \n            onValueChange={handleProjectFilterChange}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Filter by project\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Projects</SelectItem>\n              {projects.map((project) => (\n                <SelectItem key={project.project_id} value={project.project_id}>\n                  {project.title}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-4\">\n        {loading ? (\n          <div className=\"text-center py-4\">\n            <p className=\"text-muted-foreground\">Loading applications...</p>\n          </div>\n        ) : applicationCount === 0 ? (\n          <div className=\"text-center py-4\">\n            <p className=\"text-muted-foreground\">\n              No {status} applications found{projectFilter && ' for this project'}\n            </p>\n          </div>\n        ) : (\n          <div className=\"text-center py-4\">\n            <p className=\"text-muted-foreground\">\n              <button \n                onClick={handleViewApplications}\n                className=\"text-blue-600 hover:underline\"\n              >\n                View {applicationCount} {status} application{applicationCount !== 1 ? 's' : ''}\n                {pendingActionCount > 0 && (\n                  status === 'accepted' \n                    ? ` (${pendingActionCount} being processed)`\n                    : ` (${pendingActionCount} need attention)`\n                )}\n              </button>\n            </p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/applications/ContractActionsSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1371,1374],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1371,1374],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1444,1447],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1444,1447],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useWorkContractManagement\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":38,"column":56,"nodeType":"Identifier","endLine":38,"endColumn":81},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useAwardAgreementManagement\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":45,"column":60,"nodeType":"Identifier","endLine":45,"endColumn":87}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ContractUploadDialog } from \"./ContractUploadDialog\";\nimport { useContractManagement } from \"@/hooks/jobs/useContractManagement\";\nimport { Application } from \"@/types/business\";\nimport { AcceptedJob } from \"@/hooks/useAcceptedJobs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowUpRight, Download, FileText, Upload, FileCheck } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { useWorkContractManagement } from \"@/hooks/useWorkContractManagement\";\nimport { useAwardAgreementManagement } from \"@/hooks/useAwardAgreementManagement\";\nimport { DocumentViewer } from \"@/components/documents/DocumentViewer\";\nimport { ContractSignatureDialog } from \"@/components/documents/ContractSignatureDialog\";\n\ninterface ContractActionsSectionProps {\n  application: Application;\n  acceptedJob: AcceptedJob | null;\n  onUpdate: () => void;\n}\n\nexport const ContractActionsSection = ({\n  application,\n  acceptedJob,\n  onUpdate\n}: ContractActionsSectionProps) => {\n  const [isUploadDialogOpen, setIsUploadDialogOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState<'upload' | 'contract' | 'award'>('upload');\n  const [workContractDoc, setWorkContractDoc] = useState<any>(null);\n  const [awardAgreementDoc, setAwardAgreementDoc] = useState<any>(null);\n  const [isSignatureDialogOpen, setIsSignatureDialogOpen] = useState(false);\n  const [activeDocumentId, setActiveDocumentId] = useState<string | null>(null);\n  const [activeDocumentType, setActiveDocumentType] = useState<'work_contract' | 'award_agreement'>('work_contract');\n  \n  const { isUploading, uploadContract } = useContractManagement(onUpdate);\n  \n  // Only initialize these hooks if the dependencies exist\n  const workContractHook = useWorkContractManagement ? useWorkContractManagement() : {\n    isGenerating: false,\n    isLoadingDocuments: false,\n    generateWorkContract: async () => {},\n    getWorkContract: async () => null\n  };\n  \n  const awardAgreementHook = useAwardAgreementManagement ? useAwardAgreementManagement() : {\n    isGenerating: false,\n    isLoadingDocuments: false,\n    generateAwardAgreement: async () => {},\n    getAwardAgreement: async () => null\n  };\n  \n  const { \n    isGenerating: isGeneratingWorkContract, \n    isLoadingDocuments: isLoadingWorkContract,\n    generateWorkContract,\n    getWorkContract\n  } = workContractHook;\n  \n  const {\n    isGenerating: isGeneratingAwardAgreement,\n    isLoadingDocuments: isLoadingAwardAgreement,\n    generateAwardAgreement,\n    getAwardAgreement\n  } = awardAgreementHook;\n  \n  // Only show contract actions if both parties have accepted\n  if (!application.accepted_business || !application.accepted_jobseeker || !acceptedJob) {\n    return (\n      <Card className=\"mt-4\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-base flex items-center\">\n            <FileText className=\"h-4 w-4 mr-2\" />\n            Contract Management\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-4\">\n            <p className=\"text-muted-foreground\">\n              Contract management will be available once both parties have accepted this application.\n            </p>\n            <div className=\"mt-2 text-sm\">\n              <p>Business accepted: {application.accepted_business ? '✅' : '❌'}</p>\n              <p>Job seeker accepted: {application.accepted_jobseeker ? '✅' : '❌'}</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n  \n  const handleUploadContract = async (jobAppId: string, file: File, notes: string) => {\n    try {\n      return await uploadContract(jobAppId, file);\n    } catch (error) {\n      console.error('Error uploading contract:', error);\n      toast.error(\"Failed to upload contract\");\n      throw error;\n    }\n  };\n\n  const loadDocuments = async () => {\n    if (!acceptedJob?.id) return;\n    \n    try {\n      // Only try to load documents if the functions exist\n      if (getWorkContract) {\n        const workContract = await getWorkContract(acceptedJob.id);\n        setWorkContractDoc(workContract);\n      }\n      \n      if (getAwardAgreement) {\n        const awardAgreement = await getAwardAgreement(acceptedJob.id);\n        setAwardAgreementDoc(awardAgreement);\n      }\n    } catch (error) {\n      console.error(\"Error loading documents:\", error);\n      // Don't show error to user for missing functionality\n    }\n  };\n  \n  const handleCreateWorkContract = async () => {\n    if (!acceptedJob?.id || !application.job_app_id || !generateWorkContract) return;\n    \n    try {\n      // Get the business ID from the application\n      const businessId = application.businesses?.businesses_id || '';\n      const userId = application.user_id || '';\n      const projectId = application.project_id || '';\n      \n      await generateWorkContract(\n        acceptedJob.id,\n        businessId,\n        userId,\n        projectId,\n        application.job_app_id\n      );\n      \n      toast.success(\"Work contract created\");\n      loadDocuments();\n      setActiveTab('contract');\n    } catch (error) {\n      console.error(\"Error generating work contract:\", error);\n      toast.error(\"Failed to create work contract\");\n    }\n  };\n  \n  const handleCreateAwardAgreement = async () => {\n    if (!acceptedJob?.id || !application.job_app_id || !generateAwardAgreement) return;\n    \n    try {\n      // Get the business ID from the application\n      const businessId = application.businesses?.businesses_id || '';\n      const userId = application.user_id || '';\n      const projectId = application.project_id || '';\n      \n      await generateAwardAgreement(\n        acceptedJob.id,\n        businessId,\n        userId,\n        projectId,\n        application.job_app_id,\n        \"completed the agreed services and milestones\"\n      );\n      \n      toast.success(\"Award agreement created\");\n      loadDocuments();\n      setActiveTab('award');\n    } catch (error) {\n      console.error(\"Error generating award agreement:\", error);\n      toast.error(\"Failed to create award agreement\");\n    }\n  };\n  \n  const handleSignDocument = (docId: string, docType: 'work_contract' | 'award_agreement') => {\n    setActiveDocumentId(docId);\n    setActiveDocumentType(docType);\n    setIsSignatureDialogOpen(true);\n  };\n  \n  const handleTabChange = (tab: 'upload' | 'contract' | 'award') => {\n    setActiveTab(tab);\n    loadDocuments();\n  };\n  \n  const handleDocumentSigned = () => {\n    loadDocuments();\n    onUpdate();\n  };\n\n  return (\n    <Card className=\"mt-4\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"text-base flex items-center\">\n          <FileText className=\"h-4 w-4 mr-2\" />\n          Contract Management\n        </CardTitle>\n        \n        <div className=\"flex space-x-1 rounded-lg bg-muted p-1 text-muted-foreground mt-2\">\n          <button\n            onClick={() => handleTabChange('upload')}\n            className={`flex-1 justify-center rounded-md px-3 py-1.5 text-sm font-medium ${\n              activeTab === 'upload'\n                ? 'bg-background text-foreground shadow-sm'\n                : 'hover:bg-background/50'\n            }`}\n          >\n            Upload\n          </button>\n          <button\n            onClick={() => handleTabChange('contract')}\n            className={`flex-1 justify-center rounded-md px-3 py-1.5 text-sm font-medium ${\n              activeTab === 'contract'\n                ? 'bg-background text-foreground shadow-sm'\n                : 'hover:bg-background/50'\n            }`}\n          >\n            Work Contract\n          </button>\n          <button\n            onClick={() => handleTabChange('award')}\n            className={`flex-1 justify-center rounded-md px-3 py-1.5 text-sm font-medium ${\n              activeTab === 'award'\n                ? 'bg-background text-foreground shadow-sm'\n                : 'hover:bg-background/50'\n            }`}\n          >\n            Award Agreement\n          </button>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {activeTab === 'upload' && (\n          <>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium\">External Contract</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  {acceptedJob?.document_url \n                    ? \"External contract uploaded\" \n                    : \"Pending external contract upload\"}\n                </p>\n              </div>\n              <Badge\n                variant={acceptedJob?.document_url ? \"default\" : \"outline\"}\n                className={acceptedJob?.document_url \n                  ? \"bg-green-100 text-green-800 border-green-300\" \n                  : \"\"}\n              >\n                {acceptedJob?.document_url ? \"Uploaded\" : \"Pending\"}\n              </Badge>\n            </div>\n            \n            {acceptedJob?.document_url ? (\n              <a \n                href={acceptedJob.document_url} \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"block w-full\"\n              >\n                <Button variant=\"outline\" className=\"w-full flex justify-center items-center\">\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  View/Download External Contract\n                  <ArrowUpRight className=\"h-3 w-3 ml-1\" />\n                </Button>\n              </a>\n            ) : (\n              <Button \n                onClick={() => setIsUploadDialogOpen(true)}\n                className=\"w-full\"\n              >\n                <Upload className=\"h-4 w-4 mr-2\" />\n                Upload External Contract Document\n              </Button>\n            )}\n          </>\n        )}\n        \n        {activeTab === 'contract' && (\n          <>\n            {workContractDoc ? (\n              <DocumentViewer \n                documentId={workContractDoc.id}\n                documentType=\"work_contract\"\n                documentTitle=\"Equity Work Contract\"\n                documentContent={workContractDoc.content}\n                documentStatus={workContractDoc.status}\n                onSign={workContractDoc.status === 'final' ? \n                  () => handleSignDocument(workContractDoc.id, 'work_contract') : undefined}\n              />\n            ) : (\n              <div className=\"text-center p-6 border rounded-md\">\n                {isLoadingWorkContract || isGeneratingWorkContract ? (\n                  <p>Loading work contract...</p>\n                ) : (\n                  <>\n                    <p className=\"mb-4\">No work contract has been created yet.</p>\n                    {generateWorkContract ? (\n                      <Button onClick={handleCreateWorkContract}>\n                        <FileCheck className=\"h-4 w-4 mr-2\" />\n                        Generate Work Contract\n                      </Button>\n                    ) : (\n                      <p className=\"text-sm text-muted-foreground\">\n                        Work contract generation is not available.\n                      </p>\n                    )}\n                  </>\n                )}\n              </div>\n            )}\n          </>\n        )}\n        \n        {activeTab === 'award' && (\n          <>\n            {awardAgreementDoc ? (\n              <DocumentViewer \n                documentId={awardAgreementDoc.id}\n                documentType=\"award_agreement\"\n                documentTitle=\"Equity Award Agreement\"\n                documentContent={awardAgreementDoc.content}\n                documentStatus={awardAgreementDoc.status}\n                onSign={awardAgreementDoc.status === 'final' ? \n                  () => handleSignDocument(awardAgreementDoc.id, 'award_agreement') : undefined}\n              />\n            ) : (\n              <div className=\"text-center p-6 border rounded-md\">\n                {isLoadingAwardAgreement || isGeneratingAwardAgreement ? (\n                  <p>Loading award agreement...</p>\n                ) : (\n                  <>\n                    <p className=\"mb-4\">No award agreement has been created yet.</p>\n                    {workContractDoc && generateAwardAgreement ? (\n                      <Button onClick={handleCreateAwardAgreement}>\n                        <FileCheck className=\"h-4 w-4 mr-2\" />\n                        Generate Award Agreement\n                      </Button>\n                    ) : generateAwardAgreement ? (\n                      <p className=\"text-sm text-muted-foreground\">\n                        You need to create a work contract first before generating an award agreement.\n                      </p>\n                    ) : (\n                      <p className=\"text-sm text-muted-foreground\">\n                        Award agreement generation is not available.\n                      </p>\n                    )}\n                  </>\n                )}\n              </div>\n            )}\n          </>\n        )}\n        \n        {/* Contract Upload Dialog */}\n        <ContractUploadDialog\n          isOpen={isUploadDialogOpen}\n          onOpenChange={setIsUploadDialogOpen}\n          application={application}\n          onUpload={handleUploadContract}\n          isUploading={isUploading}\n        />\n        \n        {/* Contract Signature Dialog */}\n        {activeDocumentId && acceptedJob && (\n          <ContractSignatureDialog\n            open={isSignatureDialogOpen}\n            onOpenChange={setIsSignatureDialogOpen}\n            documentId={activeDocumentId}\n            documentType={activeDocumentType}\n            acceptedJobId={acceptedJob.id}\n            onSigned={handleDocumentSigned}\n          />\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/applications/ContractUploadDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/applications/ExpandedApplicationContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/applications/RejectApplicationDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/applications/tables/ActiveApplicationsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/applications/tables/PendingApplicationsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/applications/tables/RejectedApplicationsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/applications/tables/WithdrawnApplicationsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/dashboard/tabs/BetaTestingTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1218,1221],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1218,1221],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1471,1474],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1471,1474],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTickets'. Either include it or remove the dependency array.","line":56,"column":6,"nodeType":"ArrayExpression","endLine":56,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [userId, selectedProject, loadTickets]","fix":{"range":[2002,2027],"text":"[userId, selectedProject, loadTickets]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":132,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4154,4157],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4154,4157],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":163,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":167,"endColumn":23,"suggestions":[{"messageId":"addBrackets","fix":{"range":[4945,5985],"text":"{ const { data: ticketData } = await supabase\n            .from('tickets')\n            .select('notes')\n            .eq('id', ticketId)\n            .single();\n          \n          const { data: profileData } = await supabase\n            .from('profiles')\n            .select('first_name, last_name')\n            .eq('id', userId)\n            .single();\n          \n          const userName = profileData ? \n            `${profileData.first_name || ''} ${profileData.last_name || ''}`.trim() : \n            'User';\n          \n          const newNote = {\n            id: Date.now().toString(),\n            user: userName,\n            timestamp: new Date().toISOString(),\n            comment: data\n          };\n          \n          const currentNotes = ticketData?.notes || [];\n          const updatedNotes = [...currentNotes, newNote];\n          \n          await supabase\n            .from('tickets')\n            .update({ notes: updatedNotes })\n            .eq('id', ticketId);\n          \n          toast.success(\"Note added\");\n          break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":169,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":173,"endColumn":23,"suggestions":[{"messageId":"addBrackets","fix":{"range":[4945,5985],"text":"{ const { data: ticketData } = await supabase\n            .from('tickets')\n            .select('notes')\n            .eq('id', ticketId)\n            .single();\n          \n          const { data: profileData } = await supabase\n            .from('profiles')\n            .select('first_name, last_name')\n            .eq('id', userId)\n            .single();\n          \n          const userName = profileData ? \n            `${profileData.first_name || ''} ${profileData.last_name || ''}`.trim() : \n            'User';\n          \n          const newNote = {\n            id: Date.now().toString(),\n            user: userName,\n            timestamp: new Date().toISOString(),\n            comment: data\n          };\n          \n          const currentNotes = ticketData?.notes || [];\n          const updatedNotes = [...currentNotes, newNote];\n          \n          await supabase\n            .from('tickets')\n            .update({ notes: updatedNotes })\n            .eq('id', ticketId);\n          \n          toast.success(\"Note added\");\n          break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":175,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":177,"endColumn":20,"suggestions":[{"messageId":"addBrackets","fix":{"range":[4945,5985],"text":"{ const { data: ticketData } = await supabase\n            .from('tickets')\n            .select('notes')\n            .eq('id', ticketId)\n            .single();\n          \n          const { data: profileData } = await supabase\n            .from('profiles')\n            .select('first_name, last_name')\n            .eq('id', userId)\n            .single();\n          \n          const userName = profileData ? \n            `${profileData.first_name || ''} ${profileData.last_name || ''}`.trim() : \n            'User';\n          \n          const newNote = {\n            id: Date.now().toString(),\n            user: userName,\n            timestamp: new Date().toISOString(),\n            comment: data\n          };\n          \n          const currentNotes = ticketData?.notes || [];\n          const updatedNotes = [...currentNotes, newNote];\n          \n          await supabase\n            .from('tickets')\n            .update({ notes: updatedNotes })\n            .eq('id', ticketId);\n          \n          toast.success(\"Note added\");\n          break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":179,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":184,"endColumn":13,"suggestions":[{"messageId":"addBrackets","fix":{"range":[4945,5985],"text":"{ const { data: ticketData } = await supabase\n            .from('tickets')\n            .select('notes')\n            .eq('id', ticketId)\n            .single();\n          \n          const { data: profileData } = await supabase\n            .from('profiles')\n            .select('first_name, last_name')\n            .eq('id', userId)\n            .single();\n          \n          const userName = profileData ? \n            `${profileData.first_name || ''} ${profileData.last_name || ''}`.trim() : \n            'User';\n          \n          const newNote = {\n            id: Date.now().toString(),\n            user: userName,\n            timestamp: new Date().toISOString(),\n            comment: data\n          };\n          \n          const currentNotes = ticketData?.notes || [];\n          const updatedNotes = [...currentNotes, newNote];\n          \n          await supabase\n            .from('tickets')\n            .update({ notes: updatedNotes })\n            .eq('id', ticketId);\n          \n          toast.success(\"Note added\");\n          break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":186,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":186,"endColumn":56,"suggestions":[{"messageId":"addBrackets","fix":{"range":[4945,5985],"text":"{ const { data: ticketData } = await supabase\n            .from('tickets')\n            .select('notes')\n            .eq('id', ticketId)\n            .single();\n          \n          const { data: profileData } = await supabase\n            .from('profiles')\n            .select('first_name, last_name')\n            .eq('id', userId)\n            .single();\n          \n          const userName = profileData ? \n            `${profileData.first_name || ''} ${profileData.last_name || ''}`.trim() : \n            'User';\n          \n          const newNote = {\n            id: Date.now().toString(),\n            user: userName,\n            timestamp: new Date().toISOString(),\n            comment: data\n          };\n          \n          const currentNotes = ticketData?.notes || [];\n          const updatedNotes = [...currentNotes, newNote];\n          \n          await supabase\n            .from('tickets')\n            .update({ notes: updatedNotes })\n            .eq('id', ticketId);\n          \n          toast.success(\"Note added\");\n          break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":187,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":187,"endColumn":59,"suggestions":[{"messageId":"addBrackets","fix":{"range":[4945,5985],"text":"{ const { data: ticketData } = await supabase\n            .from('tickets')\n            .select('notes')\n            .eq('id', ticketId)\n            .single();\n          \n          const { data: profileData } = await supabase\n            .from('profiles')\n            .select('first_name, last_name')\n            .eq('id', userId)\n            .single();\n          \n          const userName = profileData ? \n            `${profileData.first_name || ''} ${profileData.last_name || ''}`.trim() : \n            'User';\n          \n          const newNote = {\n            id: Date.now().toString(),\n            user: userName,\n            timestamp: new Date().toISOString(),\n            comment: data\n          };\n          \n          const currentNotes = ticketData?.notes || [];\n          const updatedNotes = [...currentNotes, newNote];\n          \n          await supabase\n            .from('tickets')\n            .update({ notes: updatedNotes })\n            .eq('id', ticketId);\n          \n          toast.success(\"Note added\");\n          break; }"},"desc":"Add {} brackets around the case block."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState, useEffect } from \"react\";\nimport { supabase } from \"@/lib/supabase\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { TaskCompletionReview } from \"../../projects/TaskCompletionReview\";\nimport { BetaTestingTab as SharedBetaTestingTab } from \"@/components/shared/beta-testing/BetaTestingTab\";\nimport { TicketDashboard } from \"@/components/ticket/TicketDashboard\";\nimport { toast } from \"sonner\";\nimport { Ticket } from \"@/types/types\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, RefreshCw } from \"lucide-react\";\nimport { GanttChartView } from \"../../testing/GanttChartView\";\nimport { KanbanBoard } from \"@/components/ticket/KanbanBoard\";\n\nexport const BetaTestingTab = () => {\n  const [userId, setUserId] = useState<string | null>(null);\n  const [activeTab, setActiveTab] = useState(\"tickets\");\n  const [tickets, setTickets] = useState<Ticket[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [projects, setProjects] = useState<any[]>([]);\n  const [selectedProject, setSelectedProject] = useState<string | null>(null);\n  const [taskStats, setTaskStats] = useState({\n    total: 0,\n    open: 0,\n    closed: 0,\n    highPriority: 0\n  });\n  const [reviewTask, setReviewTask] = useState<any>(null);\n  const [isCompletionReviewOpen, setIsCompletionReviewOpen] = useState(false);\n  const [expandedTickets, setExpandedTickets] = useState<Set<string>>(new Set());\n\n  useEffect(() => {\n    const getCurrentUser = async () => {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (user) {\n        setUserId(user.id);\n        await fetchProjects(user.id);\n      }\n    };\n    \n    getCurrentUser();\n  }, []);\n\n  useEffect(() => {\n    if (userId && selectedProject) {\n      loadTickets(userId);\n    }\n  }, [userId, selectedProject]);\n  \n  const toggleTicketExpansion = (ticketId: string) => {\n    setExpandedTickets(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(ticketId)) {\n        newSet.delete(ticketId);\n      } else {\n        newSet.add(ticketId);\n      }\n      return newSet;\n    });\n  };\n  \n  const fetchProjects = async (userId: string) => {\n    try {\n      const { data, error } = await supabase\n        .from('business_projects')\n        .select('project_id, title')\n        .eq('business_id', userId);\n      \n      if (error) throw error;\n      \n      setProjects(data || []);\n      \n      if (data && data.length > 0) {\n        setSelectedProject(data[0].project_id);\n      }\n    } catch (error) {\n      console.error(\"Error fetching projects:\", error);\n      toast.error(\"Failed to load projects\");\n    }\n  };\n\n  const loadTickets = async (userId: string) => {\n    try {\n      setLoading(true);\n      \n      let query = supabase\n        .from('tickets')\n        .select('*')\n        .or(`reporter.eq.${userId},assigned_to.eq.${userId}`);\n      \n      if (selectedProject) {\n        query = query.eq('project_id', selectedProject);\n      }\n      \n      query = query.order('created_at', { ascending: false });\n      \n      const { data, error } = await query;\n      \n      if (error) throw error;\n      \n      const processedTickets = (data || []).map(ticket => ({\n        ...ticket,\n        description: ticket.description || \"\"  \n      }));\n      \n      setTickets(processedTickets);\n      \n      const stats = {\n        total: processedTickets.length,\n        open: processedTickets.filter(t => t.status !== 'done' && t.status !== 'closed').length,\n        closed: processedTickets.filter(t => t.status === 'done' || t.status === 'closed').length,\n        highPriority: processedTickets.filter(t => t.priority === 'high').length\n      };\n      \n      setTaskStats(stats);\n    } catch (error) {\n      console.error(\"Error loading tickets:\", error);\n      toast.error(\"Failed to load tickets\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTicketAction = async (ticketId: string, action: string, data: any) => {\n    try {\n      switch (action) {\n        case 'updateStatus':\n          await supabase\n            .from('tickets')\n            .update({ status: data })\n            .eq('id', ticketId);\n          \n          toast.success(\"Status updated\");\n          break;\n        \n        case 'updatePriority':\n          await supabase\n            .from('tickets')\n            .update({ priority: data })\n            .eq('id', ticketId);\n          \n          toast.success(\"Priority updated\");\n          break;\n        \n        case 'updateDueDate':\n          await supabase\n            .from('tickets')\n            .update({ due_date: data })\n            .eq('id', ticketId);\n          \n          toast.success(\"Due date updated\");\n          break;\n        \n        case 'addNote':\n          const { data: ticketData } = await supabase\n            .from('tickets')\n            .select('notes')\n            .eq('id', ticketId)\n            .single();\n          \n          const { data: profileData } = await supabase\n            .from('profiles')\n            .select('first_name, last_name')\n            .eq('id', userId)\n            .single();\n          \n          const userName = profileData ? \n            `${profileData.first_name || ''} ${profileData.last_name || ''}`.trim() : \n            'User';\n          \n          const newNote = {\n            id: Date.now().toString(),\n            user: userName,\n            timestamp: new Date().toISOString(),\n            comment: data\n          };\n          \n          const currentNotes = ticketData?.notes || [];\n          const updatedNotes = [...currentNotes, newNote];\n          \n          await supabase\n            .from('tickets')\n            .update({ notes: updatedNotes })\n            .eq('id', ticketId);\n          \n          toast.success(\"Note added\");\n          break;\n        \n        default:\n          console.warn(\"Unknown action:\", action);\n      }\n      \n      if (userId) {\n        await loadTickets(userId);\n      }\n    } catch (error) {\n      console.error(\"Error handling ticket action:\", error);\n      toast.error(\"Failed to update ticket\");\n    }\n  };\n\n  const handleRefresh = () => {\n    if (userId) {\n      loadTickets(userId);\n    }\n  };\n\n  const handleProjectChange = (projectId: string) => {\n    setSelectedProject(projectId);\n  };\n\n  const handleCreateTicket = () => {\n    toast.info(\"Create ticket functionality will be implemented soon\");\n  };\n\n  if (!userId) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col space-y-2\">\n        <h2 className=\"text-2xl font-bold\">Project Management</h2>\n        <p className=\"text-muted-foreground\">View and manage your project tasks</p>\n      </div>\n\n      <div className=\"flex items-center justify-between mb-4\">\n        <Select value={selectedProject || \"none\"} onValueChange={handleProjectChange}>\n          <SelectTrigger className=\"w-[180px]\">\n            <SelectValue placeholder=\"Select project\" />\n          </SelectTrigger>\n          <SelectContent>\n            {projects.length === 0 ? (\n              <SelectItem value=\"none\">No projects available</SelectItem>\n            ) : (\n              projects.map(project => (\n                <SelectItem key={project.project_id} value={project.project_id}>\n                  {project.title}\n                </SelectItem>\n              ))\n            )}\n          </SelectContent>\n        </Select>\n        \n        <div className=\"flex gap-2\">\n          <Button size=\"sm\" variant=\"outline\" onClick={handleRefresh}>\n            <RefreshCw className=\"h-4 w-4 mr-1\" /> Refresh\n          </Button>\n          \n          <Button size=\"sm\" onClick={handleCreateTicket}>\n            <Plus className=\"h-4 w-4 mr-1\" /> Create Ticket\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-sm font-medium text-muted-foreground\">All Tickets</div>\n            <div className=\"text-2xl font-bold mt-1\">{taskStats.total}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-sm font-medium text-muted-foreground\">Open Tasks</div>\n            <div className=\"text-2xl font-bold mt-1\">{taskStats.open}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-sm font-medium text-muted-foreground\">Closed Tasks</div>\n            <div className=\"text-2xl font-bold mt-1\">{taskStats.closed}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-sm font-medium text-muted-foreground\">High Priority</div>\n            <div className=\"text-2xl font-bold mt-1\">{taskStats.highPriority}</div>\n          </CardContent>\n        </Card>\n      </div>\n      \n      <Tabs \n        value={activeTab} \n        onValueChange={setActiveTab}\n        className=\"mt-6 space-y-6\"\n      >\n        <TabsList className=\"mb-4\">\n          <TabsTrigger value=\"tickets\">All Tickets</TabsTrigger>\n          <TabsTrigger value=\"project-tasks\">Project Tasks</TabsTrigger>\n          <TabsTrigger value=\"project-tickets\">Project Tickets</TabsTrigger>\n          <TabsTrigger value=\"beta-tickets\">Beta Testing Tickets</TabsTrigger>\n          <TabsTrigger value=\"task-review\">Task Completion Review</TabsTrigger>\n          <TabsTrigger value=\"kanban\">Kanban Board</TabsTrigger>\n          <TabsTrigger value=\"gantt\">Gantt Chart</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"tickets\">\n        <TicketDashboard \n          initialTickets={tickets}\n          onRefresh={handleRefresh}\n          onTicketAction={handleTicketAction}\n          showTimeTracking={false}\n          userId={userId}\n          expandedTickets={expandedTickets}\n          toggleTicketExpansion={toggleTicketExpansion}\n        />\n        </TabsContent>\n        \n        <TabsContent value=\"project-tasks\">\n          <TicketDashboard \n            initialTickets={tickets.filter(t => t.task_id)}\n            onRefresh={handleRefresh}\n            onTicketAction={handleTicketAction}\n            showTimeTracking={false}\n            userId={userId}\n            expandedTickets={expandedTickets}\n            toggleTicketExpansion={toggleTicketExpansion}\n          />\n        </TabsContent>\n        \n        <TabsContent value=\"project-tickets\">\n          <TicketDashboard \n            initialTickets={tickets.filter(t => t.project_id && !t.task_id)}\n            onRefresh={handleRefresh}\n            onTicketAction={handleTicketAction}\n            showTimeTracking={false}\n            userId={userId}\n            expandedTickets={expandedTickets}\n            toggleTicketExpansion={toggleTicketExpansion}\n          />\n        </TabsContent>\n        \n        <TabsContent value=\"beta-tickets\">\n          <SharedBetaTestingTab \n            userType=\"business\" \n            userId={userId} \n            includeProjectTickets={true} \n          />\n        </TabsContent>\n        \n        <TabsContent value=\"task-review\">\n          <TaskCompletionReview \n            businessId={userId} \n            task={reviewTask}\n            open={isCompletionReviewOpen}\n            setOpen={setIsCompletionReviewOpen}\n            onClose={() => setIsCompletionReviewOpen(false)}\n            onReviewComplete={() => {\n              if (userId) {\n                loadTickets(userId);\n              }\n            }}\n          />\n        </TabsContent>\n        \n        <TabsContent value=\"kanban\">\n          {selectedProject ? (\n            <KanbanBoard \n              tickets={tickets}\n              onStatusChange={(ticketId, newStatus) => \n                handleTicketAction(ticketId, 'updateStatus', newStatus)\n              }\n              onTicketClick={(ticket) => \n                console.log(\"Ticket clicked:\", ticket.id)\n              }\n            />\n          ) : (\n            <div className=\"text-center py-8\">Please select a project to view the Kanban board</div>\n          )}\n        </TabsContent>\n        \n        <TabsContent value=\"gantt\">\n          {selectedProject ? (\n            <GanttChartView projectId={selectedProject} />\n          ) : (\n            <div className=\"text-center py-8\">Please select a project to view the Gantt chart</div>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport { BetaTestingTab as LiveProjectsTab };\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/profile/BusinessProfileEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/BetaTestingTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1239,1242],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1239,1242],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1371,1374],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1371,1374],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1420,1423],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1420,1423],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1620,1623],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1620,1623],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2323,2326],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2323,2326],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadProjects'. Either include it or remove the dependency array.","line":62,"column":6,"nodeType":"ArrayExpression","endLine":62,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [businessId, loadProjects]","fix":{"range":[2590,2602],"text":"[businessId, loadProjects]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTickets'. Either include it or remove the dependency array.","line":68,"column":6,"nodeType":"ArrayExpression","endLine":68,"endColumn":64,"suggestions":[{"desc":"Update the dependencies array to be: [selectedProject, statusFilter, priorityFilter, activeTab, loadTickets]","fix":{"range":[2685,2743],"text":"[selectedProject, statusFilter, priorityFilter, activeTab, loadTickets]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'calculateMetrics' and 'organizeTicketsByStatus'. Either include them or remove the dependency array.","line":75,"column":6,"nodeType":"ArrayExpression","endLine":75,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [calculateMetrics, organizeTicketsByStatus, tickets]","fix":{"range":[2867,2876],"text":"[calculateMetrics, organizeTicketsByStatus, tickets]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":157,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5046,5049],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5046,5049],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":192,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":192,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6030,6033],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6030,6033],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":419,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":419,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12530,12533],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12530,12533],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { supabase } from \"@/lib/supabase\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardHeader, CardContent, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Clock, CheckCircle2, AlertTriangle, FileText, RefreshCw, Plus, KanbanSquare, BarChart2 } from \"lucide-react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { toast } from \"sonner\";\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from \"@/components/ui/tabs\";\nimport { TaskCompletionReview } from \"./TaskCompletionReview\";\nimport { ProgressCircle } from \"@/components/ui/progress-circle\";\nimport { ExpandedTicketDetails } from \"@/components/ticket/ExpandedTicketDetails\";\n\ninterface BetaTestingTabProps {\n  businessId: string;\n}\n\nexport const BetaTestingTab = ({ businessId }: BetaTestingTabProps) => {\n  const [projects, setProjects] = useState<any[]>([]);\n  const [selectedProject, setSelectedProject] = useState<string | null>(null);\n  const [tickets, setTickets] = useState<any[]>([]);\n  const [users, setUsers] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [expandedTicket, setExpandedTicket] = useState<string | null>(null);\n  const [ticketsMap, setTicketsMap] = useState<{[key: string]: any[]}>({\n    'new': [],\n    'in-progress': [],\n    'review': [],\n    'done': [],\n    'blocked': []\n  });\n  const [ticketMetrics, setTicketMetrics] = useState({\n    total: 0,\n    open: 0,\n    closed: 0,\n    highPriority: 0\n  });\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [priorityFilter, setPriorityFilter] = useState<string>(\"all\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [newTicket, setNewTicket] = useState({\n    title: '',\n    description: '',\n    priority: 'medium',\n    type: 'beta-test'\n  });\n  const [isCompletionReviewOpen, setIsCompletionReviewOpen] = useState(false);\n  const [selectedTask, setSelectedTask] = useState<any>(null);\n  const [showKanban, setShowKanban] = useState(true);\n  const [showGantt, setShowGantt] = useState(false);\n  const [activeTab, setActiveTab] = useState('all');\n\n  useEffect(() => {\n    if (businessId) {\n      loadProjects();\n      loadUsers();\n    }\n  }, [businessId]);\n\n  useEffect(() => {\n    if (selectedProject) {\n      loadTickets();\n    }\n  }, [selectedProject, statusFilter, priorityFilter, activeTab]);\n\n  useEffect(() => {\n    if (tickets.length > 0) {\n      organizeTicketsByStatus();\n      calculateMetrics();\n    }\n  }, [tickets]);\n\n  const loadProjects = async () => {\n    try {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from('business_projects')\n        .select('*')\n        .eq('business_id', businessId);\n        \n      if (error) throw error;\n      \n      if (data && data.length > 0) {\n        setProjects(data);\n        setSelectedProject(data[0].project_id);\n      }\n    } catch (error) {\n      console.error(\"Error loading projects:\", error);\n      toast.error(\"Failed to load projects\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const loadUsers = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('id, first_name, last_name, email');\n      \n      if (error) throw error;\n      \n      if (data) {\n        setUsers(data);\n      }\n    } catch (error) {\n      console.error(\"Error loading users:\", error);\n    }\n  };\n\n  const loadTickets = async () => {\n    if (!selectedProject) return;\n    \n    try {\n      setLoading(true);\n      \n      let query = supabase\n        .from('tickets')\n        .select(`\n          *,\n          job_applications(user_id, status),\n          time_entries(\n            id,\n            description,\n            start_time, \n            end_time,\n            hours_logged\n          )\n        `)\n        .eq('project_id', selectedProject);\n      \n      if (statusFilter && statusFilter !== 'all') {\n        query = query.eq('status', statusFilter);\n      }\n      \n      if (priorityFilter && priorityFilter !== 'all') {\n        query = query.eq('priority', priorityFilter);\n      }\n      \n      if (activeTab === 'project-tasks') {\n        query = query.eq('ticket_type', 'task');\n      } else if (activeTab === 'project-tickets') {\n        query = query.eq('ticket_type', 'ticket');\n      } else if (activeTab === 'beta-testing') {\n        query = query.eq('ticket_type', 'beta-test');\n      }\n      \n      const { data, error } = await query;\n      \n      if (error) throw error;\n      \n      const processedTickets = await Promise.all((data || []).map(async (ticket) => {\n        const hoursLogged = ticket.time_entries?.reduce((total: number, entry: any) => {\n          return total + (entry.hours_logged || 0);\n        }, 0) || 0;\n        \n        const equityEarned = ticket.equity_points * (ticket.completion_percentage / 100);\n        \n        let assigneeDetails = null;\n        if (ticket.assigned_to) {\n          const { data: userData } = await supabase\n            .from('profiles')\n            .select('first_name, last_name, email')\n            .eq('id', ticket.assigned_to)\n            .single();\n            \n          assigneeDetails = userData;\n        }\n        \n        return {\n          ...ticket,\n          hours_logged: hoursLogged,\n          equity_earned: equityEarned,\n          assigneeDetails\n        };\n      }));\n      \n      setTickets(processedTickets);\n    } catch (error) {\n      console.error(\"Error loading tickets:\", error);\n      toast.error(\"Failed to load tickets\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const organizeTicketsByStatus = () => {\n    const newMap: {[key: string]: any[]} = {\n      'new': [],\n      'in-progress': [],\n      'review': [],\n      'done': [],\n      'blocked': []\n    };\n    \n    tickets.forEach(ticket => {\n      if (newMap[ticket.status]) {\n        newMap[ticket.status].push(ticket);\n      } else {\n        newMap['new'].push(ticket);\n      }\n    });\n    \n    setTicketsMap(newMap);\n  };\n\n  const calculateMetrics = () => {\n    const open = tickets.filter(t => ['new', 'in-progress', 'review'].includes(t.status)).length;\n    const closed = tickets.filter(t => ['done', 'closed'].includes(t.status)).length;\n    const highPriority = tickets.filter(t => t.priority === 'high').length;\n    \n    setTicketMetrics({\n      total: tickets.length,\n      open,\n      closed,\n      highPriority\n    });\n  };\n\n  const handleCreateTicket = async () => {\n    if (!selectedProject || !newTicket.title) return;\n    \n    try {\n      const { data, error } = await supabase\n        .from('tickets')\n        .insert({\n          title: newTicket.title,\n          description: newTicket.description,\n          priority: newTicket.priority,\n          status: 'new',\n          health: 'green',\n          reporter: businessId,\n          project_id: selectedProject,\n          ticket_type: newTicket.type\n        })\n        .select()\n        .single();\n      \n      if (error) throw error;\n      \n      toast.success(\"Beta testing ticket created successfully\");\n      setIsCreateDialogOpen(false);\n      setNewTicket({\n        title: '',\n        description: '',\n        priority: 'medium',\n        type: 'beta-test'\n      });\n      \n      loadTickets();\n    } catch (error) {\n      console.error(\"Error creating ticket:\", error);\n      toast.error(\"Failed to create ticket\");\n    }\n  };\n\n  const handleStatusChange = async (ticketId: string, newStatus: string) => {\n    try {\n      if (newStatus === 'review') {\n        const ticketToReview = tickets.find(t => t.id === ticketId);\n        if (ticketToReview) {\n          setSelectedTask(ticketToReview);\n          setIsCompletionReviewOpen(true);\n          return;\n        }\n      }\n      \n      const { error } = await supabase\n        .from('tickets')\n        .update({ status: newStatus })\n        .eq('id', ticketId);\n      \n      if (error) throw error;\n      \n      setTickets(prev => prev.map(ticket => \n        ticket.id === ticketId ? { ...ticket, status: newStatus } : ticket\n      ));\n      \n      toast.success(`Ticket status updated to ${newStatus}`);\n      \n      loadTickets();\n    } catch (error) {\n      console.error(\"Error updating ticket status:\", error);\n      toast.error(\"Failed to update ticket status\");\n    }\n  };\n\n  const handlePriorityChange = async (ticketId: string, newPriority: string) => {\n    try {\n      const { error } = await supabase\n        .from('tickets')\n        .update({ priority: newPriority })\n        .eq('id', ticketId);\n      \n      if (error) throw error;\n      \n      setTickets(prev => prev.map(ticket => \n        ticket.id === ticketId ? { ...ticket, priority: newPriority } : ticket\n      ));\n      \n      toast.success(`Ticket priority updated to ${newPriority}`);\n    } catch (error) {\n      console.error(\"Error updating ticket priority:\", error);\n      toast.error(\"Failed to update ticket priority\");\n    }\n  };\n\n  const handleAssigneeChange = async (ticketId: string, userId: string) => {\n    try {\n      const { error } = await supabase\n        .from('tickets')\n        .update({ assigned_to: userId || null })\n        .eq('id', ticketId);\n      \n      if (error) throw error;\n      \n      setTickets(prev => prev.map(ticket => \n        ticket.id === ticketId ? { ...ticket, assigned_to: userId || null } : ticket\n      ));\n      \n      toast.success(userId ? \"Ticket assigned successfully\" : \"Ticket unassigned\");\n    } catch (error) {\n      console.error(\"Error updating ticket assignee:\", error);\n      toast.error(\"Failed to update ticket assignee\");\n    }\n  };\n\n  const handleTicketReply = async (ticketId: string, message: string) => {\n    try {\n      const ticket = tickets.find(t => t.id === ticketId);\n      if (!ticket) return;\n      \n      const replies = ticket.replies || [];\n      const newReply = {\n        id: Math.random().toString(36).substring(2, 9),\n        content: message,\n        createdAt: new Date().toISOString(),\n        sender: {\n          id: businessId,\n          name: \"You\"\n        }\n      };\n      \n      const { error } = await supabase\n        .from('tickets')\n        .update({ \n          replies: [...replies, newReply],\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', ticketId);\n      \n      if (error) throw error;\n      \n      setTickets(prev => prev.map(ticket => \n        ticket.id === ticketId \n          ? { ...ticket, replies: [...(ticket.replies || []), newReply] } \n          : ticket\n      ));\n      \n      toast.success(\"Reply sent successfully\");\n    } catch (error) {\n      console.error(\"Error sending reply:\", error);\n      toast.error(\"Failed to send reply\");\n    }\n  };\n\n  const toggleTicketExpansion = (ticketId: string) => {\n    console.info(\"Toggle ticket:\", ticketId, \"expanded:\", expandedTicket === ticketId ? \"false\" : \"true\");\n    setExpandedTicket(prev => prev === ticketId ? null : ticketId);\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'new':\n        return <Clock className=\"h-4 w-4 text-blue-500\" />;\n      case 'in-progress':\n        return <Clock className=\"h-4 w-4 text-yellow-500\" />;\n      case 'blocked':\n        return <AlertTriangle className=\"h-4 w-4 text-red-500\" />;\n      case 'done':\n      case 'closed':\n        return <CheckCircle2 className=\"h-4 w-4 text-green-500\" />;\n      default:\n        return <Clock className=\"h-4 w-4 text-blue-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'new':\n        return 'bg-blue-100 text-blue-800';\n      case 'in-progress':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'blocked':\n        return 'bg-red-100 text-red-800';\n      case 'review':\n        return 'bg-purple-100 text-purple-800';\n      case 'done':\n        return 'bg-green-100 text-green-800';\n      case 'closed':\n        return 'bg-gray-100 text-gray-800';\n      default:\n        return 'bg-blue-100 text-blue-800';\n    }\n  };\n\n  const handleRefresh = () => {\n    loadTickets();\n  };\n\n  const handleCloseTicketDetails = () => {\n    setExpandedTicket(null);\n  };\n  \n  const handleTicketAction = async (ticketId: string, action: string, data: any) => {\n    try {\n      switch (action) {\n        case 'updateStatus':\n          await handleStatusChange(ticketId, data);\n          break;\n        case 'updatePriority':\n          await handlePriorityChange(ticketId, data);\n          break;\n        case 'updateAssignee':\n          await handleAssigneeChange(ticketId, data);\n          break;\n        case 'addNote':\n          toast.success(\"Note added\");\n          break;\n        default:\n          console.warn(\"Unknown action:\", action);\n      }\n      \n      if (selectedProject) {\n        loadTickets();\n      }\n    } catch (error) {\n      console.error(`Error handling ticket action (${action}):`, error);\n      toast.error(\"Failed to update ticket\");\n    }\n  };\n  \n  const handleLogTime = (ticketId: string) => {\n    toast.info(\"Time logging feature will be implemented soon\");\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <CardTitle>Beta Testing</CardTitle>\n              <p className=\"text-sm text-muted-foreground\">Manage beta testing tickets for your projects</p>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" size=\"sm\" onClick={() => setShowKanban(!showKanban)}>\n                {showKanban ? 'Hide Kanban' : 'Show Kanban'}\n                <KanbanSquare className=\"h-4 w-4 ml-1\" />\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={() => setShowGantt(!showGantt)}>\n                {showGantt ? 'Hide Gantt' : 'Show Gantt'}\n                <BarChart2 className=\"h-4 w-4 ml-1\" />\n              </Button>\n              <Button size=\"sm\" onClick={() => setIsCreateDialogOpen(true)}>\n                <Plus className=\"h-4 w-4 mr-1\" />\n                Create Ticket\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div className=\"text-center py-8\">Loading beta testing tickets...</div>\n          ) : projects.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              You don't have any projects yet. Create a project first.\n            </div>\n          ) : (\n            <div>\n              <div className=\"mb-4\">\n                <Select\n                  value={selectedProject || ''}\n                  onValueChange={setSelectedProject}\n                >\n                  <SelectTrigger className=\"w-[200px]\">\n                    <SelectValue placeholder=\"Select a project\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {projects.map(project => (\n                      <SelectItem key={project.project_id} value={project.project_id}>\n                        {project.title || 'Untitled Project'}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              {selectedProject && (\n                <div>\n                  <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n                    <TabsList className=\"grid grid-cols-4 mb-4\">\n                      <TabsTrigger value=\"all\">All Tickets</TabsTrigger>\n                      <TabsTrigger value=\"project-tasks\">Project Tasks</TabsTrigger>\n                      <TabsTrigger value=\"project-tickets\">Project Tickets</TabsTrigger>\n                      <TabsTrigger value=\"beta-testing\">Beta Testing Tickets</TabsTrigger>\n                    </TabsList>\n                  </Tabs>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n                    <Card className=\"bg-slate-50\">\n                      <CardContent className=\"p-4 flex justify-between items-center\">\n                        <div>\n                          <p className=\"text-sm font-medium text-muted-foreground\">Total Tickets</p>\n                          <p className=\"text-2xl font-bold\">{ticketMetrics.total}</p>\n                        </div>\n                        <FileText className=\"h-8 w-8 text-blue-500\" />\n                      </CardContent>\n                    </Card>\n                    \n                    <Card className=\"bg-amber-50\">\n                      <CardContent className=\"p-4 flex justify-between items-center\">\n                        <div>\n                          <p className=\"text-sm font-medium text-muted-foreground\">Open Tickets</p>\n                          <p className=\"text-2xl font-bold\">{ticketMetrics.open}</p>\n                        </div>\n                        <Clock className=\"h-8 w-8 text-yellow-500\" />\n                      </CardContent>\n                    </Card>\n                    \n                    <Card className=\"bg-green-50\">\n                      <CardContent className=\"p-4 flex justify-between items-center\">\n                        <div>\n                          <p className=\"text-sm font-medium text-muted-foreground\">Closed Tickets</p>\n                          <p className=\"text-2xl font-bold\">{ticketMetrics.closed}</p>\n                        </div>\n                        <CheckCircle2 className=\"h-8 w-8 text-green-500\" />\n                      </CardContent>\n                    </Card>\n                    \n                    <Card className=\"bg-red-50\">\n                      <CardContent className=\"p-4 flex justify-between items-center\">\n                        <div>\n                          <p className=\"text-sm font-medium text-muted-foreground\">High Priority</p>\n                          <p className=\"text-2xl font-bold\">{ticketMetrics.highPriority}</p>\n                        </div>\n                        <AlertTriangle className=\"h-8 w-8 text-red-500\" />\n                      </CardContent>\n                    </Card>\n                  </div>\n                  \n                  <div className=\"bg-slate-100 p-4 rounded-lg mb-4 flex items-center justify-between\">\n                    <div className=\"flex gap-2 items-center\">\n                      <div className=\"flex gap-2 items-center\">\n                        <Label htmlFor=\"status-filter\">Status:</Label>\n                        <Select value={statusFilter} onValueChange={setStatusFilter}>\n                          <SelectTrigger id=\"status-filter\" className=\"w-[150px]\">\n                            <SelectValue placeholder=\"All\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"all\">All</SelectItem>\n                            <SelectItem value=\"new\">New</SelectItem>\n                            <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                            <SelectItem value=\"review\">Review</SelectItem>\n                            <SelectItem value=\"done\">Done</SelectItem>\n                            <SelectItem value=\"blocked\">Blocked</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      \n                      <div className=\"flex gap-2 items-center\">\n                        <Label htmlFor=\"priority-filter\">Priority:</Label>\n                        <Select value={priorityFilter} onValueChange={setPriorityFilter}>\n                          <SelectTrigger id=\"priority-filter\" className=\"w-[150px]\">\n                            <SelectValue placeholder=\"All\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"all\">All</SelectItem>\n                            <SelectItem value=\"low\">Low</SelectItem>\n                            <SelectItem value=\"medium\">Medium</SelectItem>\n                            <SelectItem value=\"high\">High</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\" onClick={handleRefresh}>\n                      <RefreshCw className=\"h-4 w-4 mr-1\" />\n                      Refresh\n                    </Button>\n                  </div>\n                  \n                  {showKanban && (\n                    <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 overflow-x-auto pb-6\">\n                      {['new', 'in-progress', 'review', 'done', 'blocked'].map(status => (\n                        <div key={status} className=\"min-w-[250px]\">\n                          <h3 className=\"font-medium mb-2 capitalize\">{status.replace('-', ' ')} ({ticketsMap[status]?.length || 0})</h3>\n                          <div className=\"space-y-3 min-h-[200px]\">\n                            {ticketsMap[status]?.map(ticket => (\n                              <Card key={ticket.id} className=\"p-3 border-l-4\" \n                                style={{ borderLeftColor: ticket.priority === 'high' ? '#ef4444' : ticket.priority === 'medium' ? '#f59e0b' : '#22c55e' }}>\n                                <div className=\"text-sm font-medium\">{ticket.title}</div>\n                                <div className=\"text-xs text-muted-foreground truncate\">{ticket.description}</div>\n                                <div className=\"flex justify-between items-center mt-2\">\n                                  <Badge variant=\"outline\" className=\"text-xs\">\n                                    {ticket.ticket_type || 'task'}\n                                  </Badge>\n                                  <Button variant=\"ghost\" size=\"sm\" className=\"h-6 px-2\" onClick={() => toggleTicketExpansion(ticket.id)}>\n                                    View\n                                  </Button>\n                                </div>\n                              </Card>\n                            ))}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                  \n                  {showGantt && (\n                    <div className=\"p-4 text-center border rounded-lg mt-4\">\n                      <p className=\"text-muted-foreground\">Gantt chart view will be implemented soon.</p>\n                    </div>\n                  )}\n                  \n                  <div className=\"space-y-4\">\n                    {tickets.map(ticket => (\n                      <div key={ticket.id} className=\"border rounded-lg overflow-hidden\">\n                        <div \n                          className=\"p-4 cursor-pointer hover:bg-slate-50\"\n                          onClick={() => toggleTicketExpansion(ticket.id)}\n                        >\n                          <div className=\"flex justify-between items-start\">\n                            <div>\n                              <h3 className=\"font-medium\">{ticket.title}</h3>\n                              <p className=\"text-sm text-muted-foreground truncate max-w-md\">\n                                {ticket.description}\n                              </p>\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <div className=\"text-sm flex items-center space-x-1 text-muted-foreground\">\n                                <Clock className=\"h-3 w-3\" />\n                                <span>{ticket.hours_logged || 0}h logged</span>\n                              </div>\n                              <div className=\"text-sm flex items-center space-x-1 text-muted-foreground\">\n                                <ProgressCircle value={ticket.completion_percentage || 0} size=\"xs\" strokeWidth={3} />\n                                <span>{ticket.completion_percentage || 0}%</span>\n                              </div>\n                              <div className=\"text-sm flex items-center space-x-1 text-muted-foreground\">\n                                <span>{((ticket.equity_points || 0) * (ticket.completion_percentage || 0) / 100).toFixed(2)}% earned</span>\n                              </div>\n                              <div className=\"flex gap-1\">\n                                <Badge className={getStatusColor(ticket.status)}>\n                                  {getStatusIcon(ticket.status)}\n                                  <span className=\"ml-1 capitalize\">{ticket.status.replace('-', ' ')}</span>\n                                </Badge>\n                                <Badge variant={ticket.priority === 'high' ? 'destructive' : 'outline'}>\n                                  {ticket.priority}\n                                </Badge>\n                              </div>\n                              <Button variant=\"outline\" size=\"sm\">\n                                {expandedTicket === ticket.id ? 'Collapse' : 'Expand'}\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        {expandedTicket === ticket.id && (\n                          <div className=\"p-4 border-t bg-slate-50\">\n                            <ExpandedTicketDetails \n                              ticket={ticket}\n                              onClose={() => handleCloseTicketDetails()}\n                              onTicketAction={(ticketId, action, data) => handleTicketAction(ticketId, action, data)}\n                              onLogTime={(ticketId) => handleLogTime(ticketId)}\n                              userCanEditStatus={true}\n                              userCanEditDates={true}\n                            />\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n      \n      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Create Beta Testing Ticket</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"title\">Title</Label>\n              <Input\n                id=\"title\"\n                value={newTicket.title}\n                onChange={(e) => setNewTicket({...newTicket, title: e.target.value})}\n                placeholder=\"Enter ticket title\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={newTicket.description}\n                onChange={(e) => setNewTicket({...newTicket, description: e.target.value})}\n                placeholder=\"Describe the issue or feature to test\"\n                rows={4}\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"priority\">Priority</Label>\n              <Select\n                value={newTicket.priority}\n                onValueChange={(value) => setNewTicket({...newTicket, priority: value})}\n              >\n                <SelectTrigger id=\"priority\">\n                  <SelectValue placeholder=\"Select priority\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"low\">Low</SelectItem>\n                  <SelectItem value=\"medium\">Medium</SelectItem>\n                  <SelectItem value=\"high\">High</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"type\">Ticket Type</Label>\n              <Select\n                value={newTicket.type}\n                onValueChange={(value) => setNewTicket({...newTicket, type: value})}\n              >\n                <SelectTrigger id=\"type\">\n                  <SelectValue placeholder=\"Select ticket type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"beta-test\">Beta Test</SelectItem>\n                  <SelectItem value=\"task\">Task</SelectItem>\n                  <SelectItem value=\"ticket\">Ticket</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>Cancel</Button>\n            <Button onClick={handleCreateTicket} disabled={!newTicket.title}>Create</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n      \n      {selectedTask && (\n        <TaskCompletionReview \n          task={selectedTask}\n          open={isCompletionReviewOpen}\n          setOpen={setIsCompletionReviewOpen}\n          onClose={() => {\n            setSelectedTask(null);\n            loadTickets();\n          }}\n          onReviewComplete={() => loadTickets()}\n          businessId={businessId}\n        />\n      )}\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/LiveProjectsTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1180,1183],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1180,1183],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1618,1621],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1618,1621],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadProjectsData' and 'loadTicketsData'. Either include them or remove the dependency array.","line":49,"column":6,"nodeType":"ArrayExpression","endLine":49,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [businessId, loadProjectsData, loadTicketsData]","fix":{"range":[1876,1888],"text":"[businessId, loadProjectsData, loadTicketsData]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTicketsData'. Either include it or remove the dependency array.","line":55,"column":6,"nodeType":"ArrayExpression","endLine":55,"endColumn":35,"suggestions":[{"desc":"Update the dependencies array to be: [businessId, loadTicketsData, selectedProject]","fix":{"range":[1972,2001],"text":"[businessId, loadTicketsData, selectedProject]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2941,2944],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2941,2944],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":170,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5533,5536],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5533,5536],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from \"react\";\nimport { Card, CardHeader, CardContent, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ProjectTicketFilters } from \"./components/ProjectTicketFilters\";\nimport { ProjectStatsSummary } from \"./components/ProjectStatsSummary\";\nimport { ProjectTicketTabs } from \"./components/ProjectTicketTabs\";\nimport { CreateTicketDialog } from \"@/components/ticket/CreateTicketDialog\";\nimport { TaskCompletionReview } from \"./TaskCompletionReview\";\nimport { Ticket } from \"@/types/types\";\nimport { supabase } from \"@/lib/supabase\";\nimport { toast } from \"sonner\";\nimport { \n  loadTickets, \n  fetchProjects, \n  handleTicketAction as handleTicketActionService,\n  handleLogTime as handleLogTimeService,\n  createTicket\n} from \"./services/ticketService\";\n\ninterface LiveProjectsTabProps {\n  businessId: string;\n}\n\nexport const LiveProjectsTab = ({ businessId }: LiveProjectsTabProps) => {\n  const [activeTab, setActiveTab] = useState(\"all-tickets\");\n  const [tickets, setTickets] = useState<Ticket[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [projects, setProjects] = useState<any[]>([]);\n  const [selectedProject, setSelectedProject] = useState<string>(\"all\");\n  const [taskStats, setTaskStats] = useState({\n    total: 0,\n    open: 0,\n    closed: 0,\n    highPriority: 0\n  });\n  const [isCreateTicketDialogOpen, setIsCreateTicketDialogOpen] = useState(false);\n  const [showKanban, setShowKanban] = useState(false);\n  const [showGantt, setShowGantt] = useState(false);\n  const [reviewTask, setReviewTask] = useState<any>(null);\n  const [isReviewOpen, setIsReviewOpen] = useState(false);\n  const [expandedTickets, setExpandedTickets] = useState<Set<string>>(new Set());\n\n  useEffect(() => {\n    if (businessId) {\n      loadProjectsData();\n      loadTicketsData();\n    }\n  }, [businessId]);\n  \n  useEffect(() => {\n    if (businessId) {\n      loadTicketsData();\n    }\n  }, [businessId, selectedProject]);\n\n  const loadProjectsData = async () => {\n    const projectsData = await fetchProjects(businessId);\n    setProjects(projectsData);\n  };\n\n  const loadTicketsData = async () => {\n    setLoading(true);\n    const ticketsData = await loadTickets(businessId, selectedProject);\n    // Filter out tickets with status 'deleted' to respect our soft-deletion approach\n    const activeTickets = ticketsData.filter(ticket => ticket.status !== 'deleted');\n    setTickets(activeTickets);\n    \n    const stats = {\n      total: activeTickets.length,\n      open: activeTickets.filter(t => t.status !== 'done' && t.status !== 'closed').length,\n      closed: activeTickets.filter(t => t.status === 'done' || t.status === 'closed').length,\n      highPriority: activeTickets.filter(t => t.priority === 'high').length\n    };\n    \n    setTaskStats(stats);\n    setLoading(false);\n  };\n\n  const handleTicketAction = async (ticketId: string, action: string, data: any) => {\n    if (action === 'reviewCompletion') {\n      const ticket = tickets.find(t => t.id === ticketId);\n      if (ticket) {\n        console.log(\"Reviewing completion for ticket:\", ticket);\n        setReviewTask(ticket);\n        setIsReviewOpen(true);\n      }\n      return;\n    }\n    \n    if (action === 'delete') {\n      try {\n        const { data: { session } } = await supabase.auth.getSession();\n        if (!session) {\n          toast.error(\"Authentication required\");\n          return;\n        }\n\n        // Use the RPC function for soft deletion\n        const { error } = await supabase.rpc('soft_delete_ticket', {\n          ticket_id: ticketId,\n          user_id: session.user.id\n        });\n\n        if (error) {\n          console.error(\"Error deleting ticket:\", error);\n          if (error.message.includes('time entries')) {\n            toast.error('Cannot delete ticket with logged time entries');\n          } else if (error.message.includes('completion progress')) {\n            toast.error('Cannot delete ticket with completion progress');\n          } else {\n            toast.error('Failed to delete ticket');\n          }\n          return;\n        }\n\n        toast.success('Ticket deleted successfully');\n        loadTicketsData(); // Refresh the tickets list\n      } catch (error) {\n        console.error('Error deleting ticket:', error);\n        toast.error('Failed to delete ticket');\n      }\n      return;\n    }\n    \n    if (action === 'refreshTicket') {\n      // Refresh the specific ticket data\n      const { data: refreshedTicket, error } = await supabase\n        .from('tickets')\n        .select('*')\n        .eq('id', ticketId)\n        .single();\n        \n      if (error) {\n        console.error(\"Error refreshing ticket:\", error);\n        return;\n      }\n      \n      if (refreshedTicket) {\n        setTickets(prevTickets => \n          prevTickets.map(t => t.id === ticketId ? refreshedTicket : t)\n        );\n      }\n      \n      return;\n    }\n    \n    await handleTicketActionService(ticketId, action, data, businessId, tickets, setTickets);\n  };\n\n  const handleLogTime = async (ticketId: string, hours: number, description: string) => {\n    const success = await handleLogTimeService(ticketId, hours, description);\n    if (success) {\n      loadTicketsData();\n    }\n  };\n\n  const handleRefresh = () => {\n    loadTicketsData();\n  };\n\n  const handleProjectChange = (projectId: string) => {\n    setSelectedProject(projectId);\n  };\n\n  const handleCreateTicket = () => {\n    setIsCreateTicketDialogOpen(true);\n  };\n\n  const handleTicketCreated = async (ticketData: any): Promise<void> => {\n    const newTicket = await createTicket(ticketData, businessId);\n    if (newTicket) {\n      setTickets([newTicket, ...tickets]);\n      setIsCreateTicketDialogOpen(false);\n    }\n  };\n\n  const toggleKanbanView = () => {\n    setShowKanban(!showKanban);\n    if (showKanban) {\n      setShowGantt(false);\n    }\n  };\n\n  const toggleGanttView = () => {\n    setShowGantt(!showGantt);\n    if (showGantt) {\n      setShowKanban(false);\n    }\n  };\n\n  const handleReviewClose = () => {\n    setIsReviewOpen(false);\n    setReviewTask(null);\n    loadTicketsData();\n  };\n  \n  const toggleTicketExpansion = (ticketId: string) => {\n    setExpandedTickets(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(ticketId)) {\n        newSet.delete(ticketId);\n      } else {\n        newSet.add(ticketId);\n      }\n      return newSet;\n    });\n  };\n\n  const renderTicketActions = (ticket: Ticket) => {\n    // Improved condition to check for tickets in review status\n    // This will also log tickets that should be in review to help with debugging\n    if ((ticket.status === 'review' || ticket.status === 'in review')) {\n      console.log(\"Found ticket in review status:\", ticket);\n      return (\n        <Button\n          variant=\"default\"\n          size=\"sm\"\n          onClick={() => handleTicketAction(ticket.id, 'reviewCompletion', null)}\n        >\n          Review\n        </Button>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col space-y-2\">\n        <h2 className=\"text-2xl font-bold\">Project Management</h2>\n        <p className=\"text-muted-foreground\">View and manage all your active projects</p>\n      </div>\n\n      <ProjectTicketFilters \n        projects={projects}\n        selectedProject={selectedProject}\n        showKanban={showKanban}\n        showGantt={showGantt}\n        onProjectChange={handleProjectChange}\n        onToggleKanban={toggleKanbanView}\n        onToggleGantt={toggleGanttView}\n        onRefresh={handleRefresh}\n        onCreateTicket={handleCreateTicket}\n      />\n\n      <ProjectStatsSummary \n        total={taskStats.total}\n        open={taskStats.open}\n        closed={taskStats.closed}\n        highPriority={taskStats.highPriority}\n      />\n      \n      <ProjectTicketTabs \n        activeTab={activeTab}\n        setActiveTab={setActiveTab}\n        tickets={tickets}\n        showKanban={showKanban}\n        showGantt={showGantt}\n        onRefresh={handleRefresh}\n        onTicketAction={handleTicketAction}\n        onLogTime={handleLogTime}\n        renderTicketActions={renderTicketActions}\n        businessId={businessId}\n        showTimeTracking={false}\n        expandedTickets={expandedTickets}\n        toggleTicketExpansion={toggleTicketExpansion}\n      />\n\n      <CreateTicketDialog\n        open={isCreateTicketDialogOpen}\n        onClose={() => setIsCreateTicketDialogOpen(false)}\n        onCreateTicket={handleTicketCreated}\n        projects={projects}\n      />\n\n      {reviewTask && (\n        <TaskCompletionReview\n          ticketId={reviewTask.id}\n          open={isReviewOpen}\n          onOpenChange={setIsReviewOpen}\n          onReviewComplete={async (approved: boolean, notes: string) => {\n            // Handle review completion\n            try {\n              // Update tickets table\n              const { error: ticketError } = await supabase\n                .from('tickets')\n                .update({ \n                  status: approved ? 'done' : 'in_progress',\n                  notes: reviewTask.notes ? [...reviewTask.notes, {\n                    id: Date.now().toString(),\n                    user: 'Business Review',\n                    comment: notes,\n                    timestamp: new Date().toISOString()\n                  }] : [{\n                    id: Date.now().toString(),\n                    user: 'Business Review',\n                    comment: notes,\n                    timestamp: new Date().toISOString()\n                  }]\n                })\n                .eq('id', reviewTask.id);\n                \n              if (ticketError) throw ticketError;\n\n              // Update project_sub_tasks table if task_id exists\n              if (reviewTask.task_id) {\n                const { error: taskError } = await supabase\n                  .from('project_sub_tasks')\n                  .update({\n                    task_status: approved ? 'closed' : 'in_progress',\n                    last_activity_at: new Date().toISOString()\n                  })\n                  .eq('task_id', reviewTask.task_id);\n                  \n                if (taskError) {\n                  console.error('Error updating project sub-task:', taskError);\n                  // Don't throw here - ticket was updated successfully\n                }\n              }\n              \n              loadTicketsData();\n              toast.success(approved ? 'Task approved successfully' : 'Task sent back for changes');\n            } catch (error) {\n              console.error('Error updating task:', error);\n              toast.error('Failed to update task');\n            }\n          }}\n          ticketData={{\n            title: reviewTask.title,\n            description: reviewTask.description,\n            completion_percentage: reviewTask.completion_percentage,\n            project_id: reviewTask.project_id,\n            assigned_to: reviewTask.assigned_to,\n            job_app_id: reviewTask.job_app_id,\n            task_id: reviewTask.task_id\n          }}\n        />\n      )}\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/ProjectCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[591,594],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[591,594],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { Card, CardHeader, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Edit, Trash } from \"lucide-react\";\nimport { TaskList } from \"./TaskList\";\nimport { Link } from \"react-router-dom\";\n\ninterface Task {\n  task_id: string; // Changed to task_id for consistency\n  id?: string; // Add id as optional for backward compatibility\n  title: string;\n  description: string;\n  status: string;\n  hours_logged: number;\n  equity_earned: number;\n  equity_allocation: number;\n  timeframe: string;\n  skills_required: string[];\n  skill_requirements: any[];\n  dependencies: string[];\n}\n\ninterface Project {\n  project_id: string;\n  title: string;\n  description: string;\n  status: string;\n  equity_allocation: number;\n  skills_required: string[];\n  project_timeframe: string;\n  tasks: Task[];\n}\n\ninterface ProjectCardProps {\n  project: Project;\n  onEdit: (project: Project) => void;\n  onDelete: (projectId: string) => void;\n}\n\nexport const ProjectCard = ({ project, onEdit, onDelete }: ProjectCardProps) => {\n  const handleTaskDeleted = (taskId: string) => {\n    // This will be handled by the parent's onProjectUpdated\n    const updatedTasks = project.tasks.filter(task => task.task_id !== taskId);\n    onEdit({ ...project, tasks: updatedTasks });\n  };\n\n  const handleTaskUpdated = (updatedTask: Task) => {\n    const updatedTasks = project.tasks.map(task => \n      task.task_id === updatedTask.task_id ? updatedTask : task\n    );\n    onEdit({ ...project, tasks: updatedTasks });\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex justify-between items-start\">\n          <div>\n            <h3 className=\"text-lg font-medium\">\n              <Link \n                to={`/projects/${project.project_id}`}\n                className=\"text-blue-600 hover:underline hover:text-blue-800\"\n              >\n                {project.title}\n              </Link>\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">{project.description}</p>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={() => onEdit(project)}>\n              <Edit className=\"h-4 w-4\" />\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={() => onDelete(project.project_id)}\n              className=\"text-destructive hover:text-destructive\"\n            >\n              <Trash className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n        <div className=\"mt-2\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm font-medium\">Total Equity: {project.equity_allocation}%</span>\n            <span className=\"text-sm text-muted-foreground\">Timeframe: {project.project_timeframe}</span>\n          </div>\n          <div className=\"mt-2\">\n            <p className=\"text-sm font-medium\">Required Skills:</p>\n            <div className=\"flex flex-wrap gap-2 mt-1\">\n              {project.skills_required.map(skill => (\n                <span key={skill} className=\"px-2 py-1 bg-secondary rounded-full text-xs\">\n                  {skill}\n                </span>\n              ))}\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <TaskList \n          projectId={project.project_id}\n          tasks={project.tasks}\n          onTaskDeleted={handleTaskDeleted}\n          onTaskUpdated={handleTaskUpdated}\n          availableSkills={project.skills_required}\n          totalEquity={project.equity_allocation}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/ProjectEditDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/ProjectForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[635,638],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[635,638],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { supabase } from \"@/lib/supabase\";\nimport { toast } from \"sonner\";\nimport { SkillsInput } from \"./SkillsInput\";\n\ninterface Project {\n  title: string;\n  description: string;\n  equity_allocation: number;\n  skills_required: string[];\n  project_timeframe: string;\n}\n\ninterface ProjectFormProps {\n  initialData?: Project;\n  onSubmit?: (data: Project) => void;\n  onProjectCreated?: (project: any) => void;\n  submitLabel?: string;\n}\n\nexport const ProjectForm = ({ \n  initialData,\n  onSubmit,\n  onProjectCreated,\n  submitLabel = \"Create Project\"\n}: ProjectFormProps) => {\n  const [project, setProject] = useState<Project>({\n    title: \"\",\n    description: \"\",\n    equity_allocation: 0,\n    skills_required: [],\n    project_timeframe: \"\"\n  });\n\n  useEffect(() => {\n    if (initialData) {\n      setProject(initialData);\n    }\n  }, [initialData]);\n\n  const handleSubmit = async () => {\n    try {\n      if (!project.title || !project.description || !project.project_timeframe) {\n        toast.error(\"Please fill in all required fields\");\n        return;\n      }\n\n      if (project.skills_required.length === 0) {\n        toast.error(\"At least one required skill must be specified\");\n        return;\n      }\n\n      if (onSubmit) {\n        onSubmit(project);\n        return;\n      }\n\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) {\n        toast.error(\"No active session found\");\n        return;\n      }\n\n      const { data, error } = await supabase\n        .from('business_projects')\n        .insert({\n          ...project,\n          created_by: session.user.id,\n          business_id: session.user.id\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      if (onProjectCreated) {\n        onProjectCreated(data);\n      }\n      \n      setProject({\n        title: \"\",\n        description: \"\",\n        equity_allocation: 0,\n        skills_required: [],\n        project_timeframe: \"\"\n      });\n      \n      toast.success(\"Project created successfully\");\n    } catch (error) {\n      console.error('Error with project:', error);\n      toast.error(\"Failed to handle project\");\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div>\n        <Label htmlFor=\"project-title\">Project Title *</Label>\n        <Input\n          id=\"project-title\"\n          required\n          value={project.title}\n          onChange={e => setProject(prev => ({ ...prev, title: e.target.value }))}\n        />\n      </div>\n      <div>\n        <Label htmlFor=\"project-description\">Description *</Label>\n        <Textarea\n          id=\"project-description\"\n          required\n          value={project.description}\n          onChange={e => setProject(prev => ({ ...prev, description: e.target.value }))}\n        />\n      </div>\n      <div>\n        <Label htmlFor=\"project-timeframe\">Project Timeframe *</Label>\n        <Input\n          id=\"project-timeframe\"\n          required\n          value={project.project_timeframe}\n          onChange={e => setProject(prev => ({ ...prev, project_timeframe: e.target.value }))}\n          placeholder=\"e.g., 3 months, Q4 2024\"\n        />\n      </div>\n      <div>\n        <Label htmlFor=\"equity-allocation\">Total Equity Allocation (%) *</Label>\n        <Input\n          id=\"equity-allocation\"\n          type=\"number\"\n          min=\"0\"\n          max=\"100\"\n          required\n          value={project.equity_allocation}\n          onChange={e => setProject(prev => ({ ...prev, equity_allocation: parseFloat(e.target.value) }))}\n        />\n      </div>\n      <SkillsInput\n        skills={project.skills_required}\n        onChange={skills => setProject(prev => ({ ...prev, skills_required: skills }))}\n        helperText=\"These skills will be broken down into specific requirements in sub-tasks after project creation.\"\n      />\n      <Button onClick={handleSubmit} className=\"w-full\">{submitLabel}</Button>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/ProjectList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/SkillsInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/SubTaskForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[961,964],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[961,964],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { toast } from \"sonner\";\nimport { supabase } from \"@/lib/supabase\";\n\ninterface SkillRequirement {\n  skill: string;\n  level: string;\n}\n\ninterface Task {\n  task_id: string;  // Changed from id to task_id to match the database schema\n  title: string;\n  description: string;\n  status: string;\n  hours_logged: number;\n  equity_earned: number;\n  equity_allocation: number;\n  timeframe: string;\n  skill_requirements: SkillRequirement[];\n  dependencies: string[];\n}\n\ninterface SubTaskFormProps {\n  projectId: string;\n  availableSkills: string[];\n  totalEquity: number;\n  currentTotalTaskEquity: number;\n  onTaskCreated: (task: any) => void;\n  onCancel: () => void;\n  initialData?: Task;\n}\n\nexport const SubTaskForm = ({ \n  projectId, \n  availableSkills, \n  totalEquity,\n  currentTotalTaskEquity,\n  onTaskCreated, \n  onCancel,\n  initialData \n}: SubTaskFormProps) => {\n  const [task, setTask] = useState({\n    title: initialData?.title || \"\",\n    description: initialData?.description || \"\",\n    timeframe: initialData?.timeframe || \"\",\n    equity_allocation: initialData?.equity_allocation || 0,\n    skill_requirements: initialData?.skill_requirements || [],\n    dependencies: initialData?.dependencies || []\n  });\n\n  const [selectedSkill, setSelectedSkill] = useState(\"\");\n  const [skillLevel, setSkillLevel] = useState(\"beginner\");\n\n  const handleAddSkill = () => {\n    if (!selectedSkill) return;\n    \n    setTask(prev => ({\n      ...prev,\n      skill_requirements: [\n        ...prev.skill_requirements,\n        { skill: selectedSkill, level: skillLevel }\n      ]\n    }));\n    \n    setSelectedSkill(\"\");\n    setSkillLevel(\"beginner\");\n  };\n\n  const handleSubmit = async () => {\n    try {\n      if (!task.title || !task.timeframe || task.equity_allocation <= 0) {\n        toast.error(\"Please fill in all required fields\");\n        return;\n      }\n\n      if (task.skill_requirements.length === 0) {\n        toast.error(\"At least one required skill must be specified\");\n        return;\n      }\n\n      const availableEquity = initialData \n        ? totalEquity - currentTotalTaskEquity + initialData.equity_allocation\n        : totalEquity - currentTotalTaskEquity;\n\n      if (task.equity_allocation > availableEquity) {\n        toast.error(`Equity allocation cannot exceed remaining equity (${availableEquity}%)`);\n        return;\n      }\n\n      if (initialData) {\n        // For updating, use task_id instead of id\n        console.log(\"Updating task with task_id:\", initialData.task_id);\n        \n        const { data, error } = await supabase\n          .from('project_sub_tasks')\n          .update({\n            ...task,\n            project_id: projectId\n          })\n          .eq('task_id', initialData.task_id)  // Changed from id to task_id          .select()\n          .select()\n          .single();\n\n        if (error) {\n          console.error('Error updating task:', error);\n          throw error;\n        }\n        onTaskCreated(data);\n      } else {\n        const { data, error } = await supabase\n          .from('project_sub_tasks')\n          .insert({\n            ...task,\n            project_id: projectId\n          })\n          .select()\n          .single();\n\n        if (error) {\n          console.error('Error creating task:', error);\n          throw error;\n        }\n        onTaskCreated(data);\n      }\n\n      toast.success(`Task ${initialData ? 'updated' : 'created'} successfully`);\n    } catch (error) {\n      console.error('Error with task:', error);\n      toast.error(`Failed to ${initialData ? 'update' : 'create'} task`);\n    }\n  };\n\n  const handleRemoveSkill = (index: number) => {\n    setTask(prev => ({\n      ...prev,\n      skill_requirements: prev.skill_requirements.filter((_, i) => i !== index)\n    }));\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div>\n        <Label htmlFor=\"task-title\">Task Title *</Label>\n        <Input\n          id=\"task-title\"\n          required\n          value={task.title}\n          onChange={e => setTask(prev => ({ ...prev, title: e.target.value }))}\n        />\n      </div>\n      \n      <div>\n        <Label htmlFor=\"task-description\">Description</Label>\n        <Textarea\n          id=\"task-description\"\n          value={task.description}\n          onChange={e => setTask(prev => ({ ...prev, description: e.target.value }))}\n        />\n      </div>\n\n      <div>\n        <Label htmlFor=\"task-timeframe\">Timeframe *</Label>\n        <Input\n          id=\"task-timeframe\"\n          required\n          value={task.timeframe}\n          onChange={e => setTask(prev => ({ ...prev, timeframe: e.target.value }))}\n          placeholder=\"e.g., 2 weeks, 1 month\"\n        />\n      </div>\n\n      <div>\n        <Label htmlFor=\"equity-allocation\">Equity Allocation (%) *</Label>\n        <div className=\"space-y-1\">\n          <Input\n            id=\"equity-allocation\"\n            type=\"number\"\n            min=\"0\"\n            max={totalEquity - currentTotalTaskEquity}\n            required\n            value={task.equity_allocation}\n            onChange={e => setTask(prev => ({ ...prev, equity_allocation: parseFloat(e.target.value) }))}\n          />\n          <p className=\"text-xs text-muted-foreground\">\n            Remaining available equity: {totalEquity - currentTotalTaskEquity}%\n          </p>\n        </div>\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label>Required Skills *</Label>\n        <div className=\"flex gap-2\">\n          <Select value={selectedSkill} onValueChange={setSelectedSkill}>\n            <SelectTrigger className=\"w-[200px]\">\n              <SelectValue placeholder=\"Select skill\" />\n            </SelectTrigger>\n            <SelectContent>\n              {availableSkills.map(skill => (\n                <SelectItem key={skill} value={skill}>\n                  {skill}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          \n          <Select value={skillLevel} onValueChange={setSkillLevel}>\n            <SelectTrigger className=\"w-[140px]\">\n              <SelectValue placeholder=\"Select level\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"beginner\">Beginner</SelectItem>\n              <SelectItem value=\"intermediate\">Intermediate</SelectItem>\n              <SelectItem value=\"expert\">Expert</SelectItem>\n            </SelectContent>\n          </Select>\n          \n          <Button type=\"button\" onClick={handleAddSkill}>Add Skill</Button>\n        </div>\n\n        <div className=\"flex flex-wrap gap-2 mt-2\">\n          {task.skill_requirements.map((skill, index) => (\n            <span\n              key={index}\n              className=\"px-2 py-1 bg-secondary rounded-full text-xs flex items-center gap-1\"\n            >\n              {skill.skill} - {skill.level}\n              <button\n                onClick={() => handleRemoveSkill(index)}\n                className=\"hover:text-destructive\"\n              >\n                ×\n              </button>\n            </span>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"flex justify-end gap-2 mt-6\">\n        <Button variant=\"outline\" onClick={onCancel}>\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit}>\n          {initialData ? 'Update Task' : 'Create Task'}\n        </Button>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/TaskCompletionReview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/TaskList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[679,682],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[679,682],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2286,2289],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2286,2289],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState } from \"react\";\nimport { Clock, Edit, Trash } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { SubTaskForm } from \"./SubTaskForm\";\nimport { supabase } from \"@/lib/supabase\";\nimport { toast } from \"sonner\";\n\ninterface Task {\n  task_id: string;\n  id?: string; // For backward compatibility\n  title: string;\n  description: string;\n  status: string;\n  hours_logged: number;\n  equity_earned: number;\n  equity_allocation: number;\n  timeframe: string;\n  skills_required: string[]; // Made required to match other interfaces\n  skill_requirements: any[];\n  dependencies: string[];\n}\n\ninterface TaskListProps {\n  projectId: string;\n  tasks: Task[];\n  onTaskDeleted: (taskId: string) => void;\n  onTaskUpdated: (task: Task) => void;\n  availableSkills: string[];\n  totalEquity: number;\n}\n\nexport const TaskList = ({ \n  projectId,\n  tasks,\n  onTaskDeleted,\n  onTaskUpdated,\n  availableSkills,\n  totalEquity\n}: TaskListProps) => {\n  const [editingTask, setEditingTask] = useState<Task | null>(null);\n\n  const handleDeleteTask = async (taskId: string) => {\n    try {\n      const { error } = await supabase\n        .from('project_sub_tasks')\n        .delete()\n        .eq('task_id', taskId);\n\n      if (error) throw error;\n\n      onTaskDeleted(taskId);\n      toast.success(\"Task deleted successfully\");\n    } catch (error) {\n      console.error('Error deleting task:', error);\n      toast.error(\"Failed to delete task\");\n    }\n  };\n\n  const currentTotalTaskEquity = tasks.reduce(\n    (sum, task) => sum + (task.equity_allocation || 0), \n    0\n  );\n\n  return (\n    <>\n      <div className=\"space-y-4\">\n        {tasks.map(task => (\n          <div key={task.task_id} className=\"border p-4 rounded-lg\">\n            <div className=\"flex justify-between items-start\">\n              <div>\n                <h4 className=\"font-medium\">{task.title}</h4>\n                <p className=\"text-sm text-muted-foreground\">{task.description}</p>\n                <div className=\"mt-2\">\n                  <p className=\"text-sm font-medium\">Required Skills:</p>\n                  <div className=\"flex flex-wrap gap-2 mt-1\">\n                    {task.skill_requirements.map((skillReq: any, index: number) => (\n                      <span key={index} className=\"px-2 py-1 bg-secondary rounded-full text-xs\">\n                        {skillReq.skill} - {skillReq.level}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n                {task.dependencies.length > 0 && (\n                  <div className=\"mt-2\">\n                    <p className=\"text-sm font-medium\">Dependencies:</p>\n                    <div className=\"flex flex-wrap gap-2 mt-1\">\n                      {task.dependencies.map(dep => (\n                        <span key={dep} className=\"px-2 py-1 bg-secondary rounded-full text-xs\">\n                          {dep}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n              <div>\n                <div className=\"flex gap-2\">\n                  <Button variant=\"outline\" size=\"sm\" onClick={() => setEditingTask(task)}>\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={() => handleDeleteTask(task.task_id)}\n                    className=\"text-destructive hover:text-destructive\"\n                  >\n                    <Trash className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                <div className=\"text-right mt-2\">\n                  <div className=\"flex items-center space-x-2 justify-end\">\n                    <Clock className=\"h-4 w-4\" />\n                    <span>Due: {task.timeframe}</span>\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    Equity allocated: {task.equity_allocation}%\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <Dialog open={!!editingTask} onOpenChange={() => setEditingTask(null)}>\n        <DialogContent className=\"max-w-3xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Task</DialogTitle>\n          </DialogHeader>\n          {editingTask && (\n            <SubTaskForm\n              projectId={projectId}\n              availableSkills={availableSkills}\n              totalEquity={totalEquity}\n              currentTotalTaskEquity={currentTotalTaskEquity - editingTask.equity_allocation}\n              onTaskCreated={onTaskUpdated}\n              onCancel={() => setEditingTask(null)}\n              initialData={editingTask}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/components/ProjectStatsSummary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/components/ProjectTicketFilters.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[310,313],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[310,313],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue\n} from \"@/components/ui/select\";\nimport { RefreshCw, KanbanSquare, BarChart2 } from \"lucide-react\";\n\ninterface ProjectTicketFiltersProps {\n  projects: any[];\n  selectedProject: string;\n  showKanban: boolean;\n  showGantt: boolean;\n  onProjectChange: (projectId: string) => void;\n  onToggleKanban: () => void;\n  onToggleGantt: () => void;\n  onRefresh: () => void;\n  onCreateTicket: () => void;\n}\n\nexport const ProjectTicketFilters: React.FC<ProjectTicketFiltersProps> = ({\n  projects,\n  selectedProject,\n  showKanban,\n  showGantt,\n  onProjectChange,\n  onToggleKanban,\n  onToggleGantt,\n  onRefresh,\n  onCreateTicket\n}) => {\n  return (\n    <div className=\"flex items-center justify-between mb-4\">\n      <Select value={selectedProject} onValueChange={onProjectChange}>\n        <SelectTrigger className=\"w-[180px]\">\n          <SelectValue placeholder=\"Select project\" />\n        </SelectTrigger>\n        <SelectContent>\n          <SelectItem value=\"all\">All Projects</SelectItem>\n          {projects.length === 0 ? (\n            <SelectItem value=\"none\" disabled>No projects available</SelectItem>\n          ) : (\n            projects.map(project => (\n              <SelectItem key={project.project_id} value={project.project_id}>\n                {project.title}\n              </SelectItem>\n            ))\n          )}\n        </SelectContent>\n      </Select>\n      \n      <div className=\"flex gap-2\">\n        <Button \n          size=\"sm\" \n          variant={showKanban ? \"default\" : \"outline\"} \n          onClick={onToggleKanban}\n        >\n          <KanbanSquare className=\"h-4 w-4 mr-1\" /> \n          {showKanban ? \"Hide Kanban\" : \"Show Kanban\"}\n        </Button>\n        \n        <Button \n          size=\"sm\" \n          variant={showGantt ? \"default\" : \"outline\"} \n          onClick={onToggleGantt}\n        >\n          <BarChart2 className=\"h-4 w-4 mr-1\" /> \n          {showGantt ? \"Hide Gantt\" : \"Show Gantt\"}\n        </Button>\n        \n        <Button size=\"sm\" variant=\"outline\" onClick={onRefresh}>\n          <RefreshCw className=\"h-4 w-4 mr-1\" /> Refresh\n        </Button>\n        \n        <Button size=\"sm\" onClick={onCreateTicket}>\n          Create Ticket\n        </Button>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/components/ProjectTicketTabs.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[648,651],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[648,651],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2009,2012],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2009,2012],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { KanbanBoard } from \"@/components/ticket/KanbanBoard\";\nimport { TicketDashboard } from \"@/components/ticket/TicketDashboard\";\nimport { GanttChartView } from \"@/components/business/testing/GanttChartView\";\nimport { Ticket } from \"@/types/types\";\nimport { Task } from \"gantt-task-react\";\n\ninterface ProjectTicketTabsProps {\n  activeTab: string;\n  setActiveTab: (tab: string) => void;\n  tickets: Ticket[];\n  showKanban: boolean;\n  showGantt: boolean;\n  onRefresh: () => void;\n  onTicketAction: (ticketId: string, action: string, data: any) => Promise<void>;\n  onLogTime: (ticketId: string, hours: number, description: string) => Promise<void>;\n  renderTicketActions: (ticket: Ticket) => React.ReactNode;\n  businessId: string;\n  showTimeTracking?: boolean;\n  expandedTickets?: Set<string>;\n  toggleTicketExpansion?: (ticketId: string) => void;\n}\n\nexport const ProjectTicketTabs: React.FC<ProjectTicketTabsProps> = ({\n  activeTab,\n  setActiveTab,\n  tickets,\n  showKanban,\n  showGantt,\n  onRefresh,\n  onTicketAction,\n  onLogTime,\n  renderTicketActions,\n  businessId,\n  showTimeTracking = true, // Default to true for backward compatibility\n  expandedTickets = new Set<string>(),\n  toggleTicketExpansion = () => {}\n}) => {\n  const getActiveTickets = () => {\n    if (!tickets) return [];\n    \n    switch (activeTab) {\n      case \"project-tasks\":\n        return tickets.filter(t => t.ticket_type === \"task\");\n      case \"project-tickets\":\n        return tickets.filter(t => t.ticket_type === \"ticket\");\n      case \"beta-testing\":\n        return tickets.filter(t => \n          t.ticket_type === \"beta_testing\" || \n          t.ticket_type === \"beta-test\" || \n          t.ticket_type === \"beta-testing\"\n        );\n      default:\n        return tickets;\n    }\n  };\n\n  // Enhanced ticket action handler to properly handle deletion\n  const handleTicketAction = async (ticketId: string, action: string, data: any) => {\n    try {\n      // For delete actions, pass the businessId as data\n      if (action === \"deleteTicket\") {\n        return await onTicketAction(ticketId, action, businessId);\n      }\n      // For all other actions, pass the data as is\n      return await onTicketAction(ticketId, action, data);\n    } catch (error) {\n      console.error(`Error in handleTicketAction (${action}):`, error);\n      throw error; // Re-throw to allow proper error handling in components\n    }\n  };\n  \n  // Adapt the handler to match the expected interface\n  const handleLogTime = (ticketId: string) => {\n    // Show a dialog/modal to collect hours and description\n    // This is just a stub that will call the actual onLogTime\n    const hours = 0; // This would be collected from user input\n    const description = \"\"; // This would be collected from user input\n    onLogTime(ticketId, hours, description);\n  };\n\n  // Convert tickets to Gantt-compatible Task[] format\n  const getGanttTasks = (): Task[] => {\n    const activeTickets = getActiveTickets();\n    return activeTickets.map((ticket) => {\n      const startDate = new Date(ticket.created_at);\n      let endDate = ticket.due_date ? new Date(ticket.due_date) : new Date();\n      \n      if (!ticket.due_date || endDate < startDate) {\n        endDate = new Date(startDate);\n        endDate.setDate(endDate.getDate() + 7); // Default to one week duration\n      }\n      \n      return {\n        id: ticket.id,\n        name: ticket.title,\n        start: startDate,\n        end: endDate,\n        progress: ticket.completion_percentage ? ticket.completion_percentage / 100 : 0,\n        type: 'task',\n        isDisabled: false,\n        styles: { \n          progressColor: \n            ticket.priority === 'high' ? '#ef4444' : \n            ticket.priority === 'medium' ? '#f59e0b' : '#3b82f6',\n          progressSelectedColor: \n            ticket.priority === 'high' ? '#dc2626' : \n            ticket.priority === 'medium' ? '#d97706' : '#2563eb'\n        }\n      };\n    });\n  };\n\n  return (\n    <Tabs value={activeTab} onValueChange={setActiveTab}>\n      <TabsList className=\"mb-4\">\n        <TabsTrigger value=\"all-tickets\">All Tickets</TabsTrigger>\n        <TabsTrigger value=\"project-tasks\">Project Tasks</TabsTrigger>\n        <TabsTrigger value=\"project-tickets\">Project Tickets</TabsTrigger>\n        <TabsTrigger value=\"beta-testing\">Beta Testing Tickets</TabsTrigger>\n      </TabsList>\n      \n      <TabsContent value={activeTab}>\n        {showKanban ? (\n          <div className=\"mb-6\">\n            <KanbanBoard \n              tickets={getActiveTickets()}\n              onStatusChange={(ticketId, newStatus) => \n                handleTicketAction(ticketId, 'updateStatus', newStatus)\n              }\n              onTicketClick={(ticket) => {\n                console.log(\"Ticket clicked:\", ticket.id);\n              }}\n            />\n          </div>\n        ) : showGantt ? (\n          <div className=\"mb-6\">\n            <GanttChartView tasks={getGanttTasks()} />\n          </div>\n        ) : (\n          <TicketDashboard \n            initialTickets={getActiveTickets()}\n            onRefresh={onRefresh}\n            onTicketAction={handleTicketAction}\n            showTimeTracking={showTimeTracking}\n            userId={businessId}\n            onLogTime={handleLogTime}\n            renderTicketActions={renderTicketActions}\n            expandedTickets={expandedTickets}\n            toggleTicketExpansion={toggleTicketExpansion}\n          />\n        )}\n      </TabsContent>\n    </Tabs>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/dialog/ProjectDialogHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/dialog/ProjectFormWrapper.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[244,247],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[244,247],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { ProjectForm } from \"../ProjectForm\";\n\ninterface Project {\n  project_id: string;\n  title: string;\n  description: string;\n  status: string;\n  equity_allocation: number;\n  skills_required: string[];\n  project_timeframe: string;\n  tasks: any[];\n}\n\ninterface ProjectFormWrapperProps {\n  project: Project;\n  onProjectUpdate: (updatedData: Partial<Project>) => void;\n}\n\nexport const ProjectFormWrapper = ({ \n  project, \n  onProjectUpdate \n}: ProjectFormWrapperProps) => {\n  return (\n    <ProjectForm\n      initialData={project}\n      onSubmit={onProjectUpdate}\n      submitLabel=\"Update Project\"\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/dialog/ProjectTasksSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/dialogs/DeleteProjectDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/services/ProjectSectionService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[316,319],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[316,319],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1388,1391],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1388,1391],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1454,1457],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1454,1457],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { supabase } from \"@/lib/supabase\";\nimport { toast } from \"sonner\";\n\ninterface Task {\n  id: string;\n  title: string;\n  description: string;\n  status: string;\n  hours_logged: number;\n  equity_earned: number;\n  equity_allocation: number;\n  timeframe: string;\n  skills_required: string[];\n  skill_requirements: any[];\n  dependencies: string[];\n}\n\ninterface Project {\n  project_id: string;\n  title: string;\n  description: string;\n  status: string;\n  equity_allocation: number;\n  equity_allocated: number;\n  skills_required: string[];\n  project_timeframe: string;\n  tasks: Task[];\n  business?: {\n    company_name: string;\n  };\n}\n\nexport const loadProjects = async (): Promise<Project[]> => {\n  try {\n    const { data: { session } } = await supabase.auth.getSession();\n    if (!session) return [];\n    \n    // Query explicitly joins with the businesses table to get company names\n    const { data: projectsData, error: projectsError } = await supabase\n      .from('business_projects')\n      .select(`\n        *,\n        businesses!inner (\n          company_name\n        )\n      `)\n      .eq('business_id', session.user.id);\n\n    if (projectsError) throw projectsError;\n\n    const { data: tasksData, error: tasksError } = await supabase\n      .from('project_sub_tasks')\n      .select('*');\n\n    if (tasksError) throw tasksError;\n\n    const projectsWithTasks = projectsData.map((project: any) => ({\n      ...project,\n      tasks: tasksData.filter((task: any) => task.project_id === project.project_id) || []\n    }));\n\n    return projectsWithTasks;\n  } catch (error) {\n    console.error('Error loading projects:', error);\n    toast.error(\"Failed to load projects\");\n    return [];\n  }\n};\n\nexport const deleteProject = async (projectId: string, projects: Project[]): Promise<boolean> => {\n  try {\n    // Check if project has allocated equity\n    const project = projects.find(p => p.project_id === projectId);\n    if (project && project.equity_allocated > 0) {\n      toast.error(\"Cannot delete a project with allocated equity\");\n      return false;\n    }\n    \n    const { error } = await supabase\n      .from('business_projects')\n      .delete()\n      .eq('project_id', projectId);\n\n    if (error) throw error;\n\n    toast.success(\"Project deleted successfully\");\n    return true;\n  } catch (error) {\n    console.error('Error deleting project:', error);\n    toast.error(\"Failed to delete project\");\n    return false;\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/services/ProjectService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[241,244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[241,244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { supabase } from \"@/lib/supabase\";\n\ninterface Project {\n  project_id: string;\n  title: string;\n  description: string;\n  status: string;\n  equity_allocation: number;\n  skills_required: string[];\n  project_timeframe: string;\n  tasks: any[];\n}\n\nexport const ProjectService = {\n  updateProject: async (project: Project, updatedData: Partial<Project>) => {\n    try {\n      const { data, error } = await supabase\n        .from('business_projects')\n        .update({\n          title: updatedData.title,\n          description: updatedData.description,\n          status: updatedData.status,\n          equity_allocation: updatedData.equity_allocation,\n          skills_required: updatedData.skills_required,\n          project_timeframe: updatedData.project_timeframe\n        })\n        .eq('project_id', project.project_id)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return { ...project, ...data };\n    } catch (error) {\n      console.error('Error updating project:', error);\n      throw error;\n    }\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/services/ProjectTaskService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[323,326],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[323,326],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { supabase } from \"@/lib/supabase\";\nimport { toast } from \"sonner\";\n\ninterface Task {\n  task_id: string;  // Using task_id consistently\n  title: string;\n  description: string;\n  status: string;\n  hours_logged: number;\n  equity_earned: number;\n  equity_allocation: number;\n  timeframe: string;\n  skill_requirements: any[];\n  dependencies: string[];\n  id?: string; // Optional for backward compatibility\n}\n\nexport const ProjectTaskService = {\n  createTask: async (newTask: Task, projectId: string) => {\n    try {\n      const { data, error } = await supabase\n        .from('project_sub_tasks')\n        .insert({\n          ...newTask,\n          project_id: projectId\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      // Also create a corresponding business role\n      await supabase\n        .from('business_roles')\n        .insert({\n          title: newTask.title,\n          description: newTask.description,\n          business_id: projectId,\n          open_to_recruiters: true,\n        });\n\n      return data;\n    } catch (error) {\n      console.error('Error creating task:', error);\n      throw error;\n    }\n  },\n  \n  updateTask: async (updatedTask: Task, projectId: string, currentProjectTasks: Task[]) => {\n    try {\n      const { error } = await supabase\n        .from('project_sub_tasks')\n        .update(updatedTask)\n        .eq('task_id', updatedTask.task_id);\n\n      if (error) throw error;\n\n      // Update corresponding business role\n      await supabase\n        .from('business_roles')\n        .update({\n          title: updatedTask.title,\n          description: updatedTask.description\n        })\n        .eq('business_id', projectId)\n        .eq('title', currentProjectTasks.find(t => t.task_id === updatedTask.task_id)?.title);\n\n      return updatedTask;\n    } catch (error) {\n      console.error('Error updating task:', error);\n      throw error;\n    }\n  },\n  \n  deleteTask: async (taskId: string, projectId: string, currentProjectTasks: Task[]) => {\n    try {\n      const { error } = await supabase\n        .from('project_sub_tasks')\n        .delete()\n        .eq('task_id', taskId);\n\n      if (error) throw error;\n\n      // Also delete corresponding business role\n      await supabase\n        .from('business_roles')\n        .delete()\n        .eq('business_id', projectId)\n        .eq('title', currentProjectTasks.find(t => t.task_id === taskId)?.title);\n\n      return taskId;\n    } catch (error) {\n      console.error('Error deleting task:', error);\n      throw error;\n    }\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/services/ticketActionService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[286,289],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[286,289],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { supabase } from \"@/lib/supabase\";\nimport { toast } from \"sonner\";\nimport { Ticket } from \"@/types/types\";\n\n/**\n * Handles various ticket actions like updating status, priority, etc.\n */\nexport const handleTicketAction = async (\n  ticketId: string, \n  action: string, \n  data: any, \n  businessId: string,\n  tickets: Ticket[], \n  setTickets: React.Dispatch<React.SetStateAction<Ticket[]>>\n) => {\n  try {\n    switch (action) {\n      case 'updateStatus': {\n        const { error } = await supabase\n          .from('tickets')\n          .update({ status: data })\n          .eq('id', ticketId);\n        \n        if (error) throw error;\n        \n        setTickets(prevTickets => \n          prevTickets.map(t => t.id === ticketId ? { ...t, status: data } : t)\n        );\n        \n        toast.success(\"Status updated\");\n        break;\n      }\n      \n      case 'updatePriority': {\n        const { error } = await supabase\n          .from('tickets')\n          .update({ priority: data })\n          .eq('id', ticketId);\n        \n        if (error) throw error;\n        \n        setTickets(prevTickets => \n          prevTickets.map(t => t.id === ticketId ? { ...t, priority: data } : t)\n        );\n        \n        toast.success(\"Priority updated\");\n        break;\n      }\n      \n      case 'updateDueDate': {\n        const { error } = await supabase\n          .from('tickets')\n          .update({ due_date: data })\n          .eq('id', ticketId);\n        \n        if (error) throw error;\n        \n        setTickets(prevTickets => \n          prevTickets.map(t => t.id === ticketId ? { ...t, due_date: data } : t)\n        );\n        \n        toast.success(\"Due date updated\");\n        break;\n      }\n      \n      case 'updateCompletionPercentage': {\n        const { error } = await supabase\n          .from('tickets')\n          .update({ completion_percentage: data })\n          .eq('id', ticketId);\n        \n        if (error) throw error;\n        \n        setTickets(prevTickets => \n          prevTickets.map(t => t.id === ticketId ? { ...t, completion_percentage: data } : t)\n        );\n        \n        toast.success(\"Completion percentage updated\");\n        break;\n      }\n      \n      case 'updateEstimatedHours': {\n        const { error } = await supabase\n          .from('tickets')\n          .update({ estimated_hours: data })\n          .eq('id', ticketId);\n        \n        if (error) throw error;\n        \n        setTickets(prevTickets => \n          prevTickets.map(t => t.id === ticketId ? { ...t, estimated_hours: data } : t)\n        );\n        \n        toast.success(\"Estimated hours updated\");\n        break;\n      }\n      \n      case 'addNote': {\n        const { data: ticketData } = await supabase\n          .from('tickets')\n          .select('notes')\n          .eq('id', ticketId)\n          .single();\n        \n        const { data: profileData } = await supabase\n          .from('businesses')\n          .select('company_name')\n          .eq('businesses_id', businessId)\n          .single();\n        \n        const userName = profileData ? profileData.company_name : 'Business';\n        \n        const newNote = {\n          id: Date.now().toString(),\n          user: userName,\n          timestamp: new Date().toISOString(),\n          comment: data\n        };\n        \n        const currentNotes = ticketData?.notes || [];\n        const updatedNotes = [...currentNotes, newNote];\n        \n        await supabase\n          .from('tickets')\n          .update({ notes: updatedNotes })\n          .eq('id', ticketId);\n        \n        setTickets(prevTickets => \n          prevTickets.map(t => t.id === ticketId ? { ...t, notes: updatedNotes } : t)\n        );\n        \n        toast.success(\"Note added\");\n        break;\n      }\n      \n      default:\n        console.warn(\"Unknown action:\", action);\n    }\n  } catch (error) {\n    console.error(\"Error handling ticket action:\", error);\n    toast.error(\"Failed to update ticket\");\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/services/ticketCreationService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[156,159],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[156,159],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { supabase } from \"@/lib/supabase\";\nimport { toast } from \"sonner\";\n\n/**\n * Creates a new ticket\n */\nexport const createTicket = async (ticketData: any, businessId: string) => {\n  try {\n    const ticketToCreate = {\n      ...ticketData,\n      reporter: businessId,\n      created_at: new Date().toISOString(),\n      ticket_type: ticketData.ticket_type || \"task\",\n      status: \"todo\",\n      priority: ticketData.priority || \"medium\",\n      health: ticketData.health || \"good\"\n    };\n    \n    const { data, error } = await supabase\n      .from('tickets')\n      .insert(ticketToCreate)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    \n    toast.success(\"Ticket created successfully\");\n    return data;\n  } catch (error) {\n    console.error(\"Error creating ticket:\", error);\n    toast.error(\"Failed to create ticket\");\n    return null;\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/services/ticketDeletionService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/services/ticketLoaderService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/services/ticketService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/services/timeTrackingService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/projects/tabs/ProjectTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/roles/ActiveRolesTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":519,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":519,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21561,21564],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21561,21564],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChevronDown, ChevronUp, Users } from \"lucide-react\";\nimport { Card, CardHeader, CardContent } from \"@/components/ui/card\";\nimport { TooltipProvider, Tooltip, TooltipTrigger, TooltipContent } from \"@/components/ui/tooltip\";\nimport { Link } from \"react-router-dom\";\nimport { supabase } from \"@/lib/supabase\";\n\ninterface SkillRequirement {\n  skill: string;\n  level: string;\n}\n\ninterface Task {\n  id?: string;\n  task_id?: string;\n  title: string;\n  description?: string;\n  status: string;\n  equity_allocation: number;\n  equity_earned?: number;\n  equity_agreed?: number;\n  timeframe?: string;\n  skill_requirements: SkillRequirement[];\n}\n\ninterface Project {\n  id?: string;\n  project_id?: string;\n  title: string;\n  description?: string;\n  status?: string;\n  equity_allocation: number;\n  project_timeframe?: string;\n  timeframe?: string;\n  skills_required: string[];\n  tasks: Task[];\n}\n\ninterface ActiveRolesTableProps {\n  project: Project;\n}\n\nexport const ActiveRolesTable = ({ project }: ActiveRolesTableProps) => {\n  const [expandedProjects, setExpandedProjects] = useState<Set<string>>(new Set());\n  const [expandedTasks, setExpandedTasks] = useState<Set<string>>(new Set());\n  const [tasksWithEarnings, setTasksWithEarnings] = useState<Task[]>(project.tasks);\n  const [applicationCounts, setApplicationCounts] = useState<Record<string, number>>({});\n  const [totalAgreedEquity, setTotalAgreedEquity] = useState<number>(0);\n  const [totalEarnedEquity, setTotalEarnedEquity] = useState<number>(0);\n\n  const toggleProject = (projectId: string) => {\n    setExpandedProjects(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(projectId)) {\n        newSet.delete(projectId);\n      } else {\n        newSet.add(projectId);\n      }\n      return newSet;\n    });\n  };\n\n  const toggleTask = (taskId: string) => {\n    setExpandedTasks(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(taskId)) {\n        newSet.delete(taskId);\n      } else {\n        newSet.add(taskId);\n      }\n      return newSet;\n    });\n  };\n\n  // Fetch application counts from the database\n  useEffect(() => {\n    const fetchApplicationCounts = async () => {\n      const projectId = project.project_id || project.id;\n      if (!projectId) return;\n      \n      try {\n        // Fetch project application count\n        const { data: projectApps, error: projectError } = await supabase\n          .from('job_applications')\n          .select('job_app_id')\n          .eq('project_id', projectId);\n          \n        if (projectError) {\n          console.error('Error fetching project applications:', projectError);\n        } else {\n          setApplicationCounts(prev => ({ \n            ...prev, \n            [projectId]: projectApps?.length || 0 \n          }));\n        }\n        \n        // Fetch task application counts\n        for (const task of project.tasks) {\n          const taskId = task.id || task.task_id;\n          if (!taskId) continue;\n          \n          const { data: taskApps, error: taskError } = await supabase\n            .from('job_applications')\n            .select('job_app_id')\n            .eq('task_id', taskId);\n            \n          if (taskError) {\n            console.error(`Error fetching applications for task ${taskId}:`, taskError);\n          } else {\n            setApplicationCounts(prev => ({ \n              ...prev, \n              [taskId]: taskApps?.length || 0 \n            }));\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching application counts:', error);\n      }\n    };\n    \n    fetchApplicationCounts();\n  }, [project]);\n\n  // Fetch task earnings data from Supabase\n  useEffect(() => {\n    const fetchTaskEarnings = async () => {\n      const taskIds = project.tasks.map(task => task.id || task.task_id).filter(Boolean);\n      if (taskIds.length === 0) return;\n      \n      try {\n        // Get all applications for these tasks\n        const { data: applications, error: appError } = await supabase\n          .from('job_applications')\n          .select('task_id, job_app_id')\n          .in('task_id', taskIds);\n          \n        if (appError) {\n          console.error('Error fetching job applications:', appError);\n          return;\n        }\n        \n        if (!applications || applications.length === 0) return;\n        \n        // Get accepted jobs for these applications\n        const appIds = applications.map(app => app.job_app_id);\n        const { data: acceptedJobs, error: jobsError } = await supabase\n          .from('accepted_jobs')\n          .select('job_app_id, equity_agreed')\n          .in('job_app_id', appIds);\n          \n        if (jobsError) {\n          console.error('Error fetching accepted jobs:', jobsError);\n          return;\n        }\n        \n        // Get time entries to calculate earnings based on hours\n        const { data: timeEntries, error: timeError } = await supabase\n          .from('time_entries')\n          .select('ticket_id, job_app_id, hours_logged')\n          .in('job_app_id', appIds);\n          \n        if (timeError) {\n          console.error('Error fetching time entries:', timeError);\n        }\n        \n        // Get ticket information to link tasks and time entries\n        const { data: tickets, error: ticketsError } = await supabase\n          .from('tickets')\n          .select('id, task_id, estimated_hours')\n          .in('task_id', taskIds);\n          \n        if (ticketsError) {\n          console.error('Error fetching tickets:', ticketsError);\n        }\n        \n        // Join accepted jobs with applications to get task-to-equity mapping\n        const taskEquityMap = new Map<string, number>();\n        let totalAgreed = 0;\n        \n        applications.forEach(app => {\n          const acceptedJob = acceptedJobs?.find(job => job.job_app_id === app.job_app_id);\n          if (acceptedJob && app.task_id) {\n            // Get tasks with task completion from project_sub_tasks\n            const previousValue = taskEquityMap.get(app.task_id) || 0;\n            const newValue = previousValue + acceptedJob.equity_agreed;\n            taskEquityMap.set(app.task_id, newValue);\n            totalAgreed += acceptedJob.equity_agreed;\n          }\n        });\n        \n        setTotalAgreedEquity(totalAgreed);\n        \n        // Get completion percentage for each task\n        const { data: subTasks, error: tasksError } = await supabase\n          .from('project_sub_tasks')\n          .select('task_id, completion_percentage, task_status')\n          .in('task_id', taskIds);\n          \n        if (tasksError) {\n          console.error('Error fetching tasks completion:', tasksError);\n          return;\n        }\n        \n        // Calculate earned equity based on multiple methods\n        let totalEarned = 0;\n        const updatedTasks = project.tasks.map(task => {\n          const taskId = task.id || task.task_id;\n          if (!taskId) return task;\n          \n          const acceptedEquity = taskEquityMap.get(taskId) || 0;\n          const taskData = subTasks?.find(t => t.task_id === taskId);\n          const taskStatus = taskData?.task_status || '';\n          const completionPercentage = taskData?.completion_percentage || 0;\n          \n          // Get relevant ticket for this task\n          const taskTicket = tickets?.find(t => t.task_id === taskId);\n          const estimatedHours = taskTicket?.estimated_hours || 0;\n          \n          // Get time entries for this task's ticket\n          let hoursLogged = 0;\n          if (taskTicket) {\n            const relevantTimeEntries = timeEntries?.filter(te => te.ticket_id === taskTicket.id) || [];\n            hoursLogged = relevantTimeEntries.reduce((sum, entry) => sum + (entry.hours_logged || 0), 0);\n          }\n          \n          // Calculate earned equity based on different methods:\n          let earnedEquity = 0;\n          \n          if (taskStatus === 'completed' || taskStatus === 'closed') {\n            // Method C: If task is completed/closed, full equity is earned\n            earnedEquity = acceptedEquity;\n          } else if (estimatedHours > 0 && hoursLogged > 0) {\n            // Method A: Based on logged hours / estimated hours\n            const hoursRatio = Math.min(hoursLogged / estimatedHours, 1);\n            earnedEquity = acceptedEquity * hoursRatio;\n          } else if (completionPercentage > 0) {\n            // Method B: Based on completion percentage\n            earnedEquity = acceptedEquity * (completionPercentage / 100);\n          }\n          \n          totalEarned += earnedEquity;\n          \n          return {\n            ...task,\n            equity_earned: earnedEquity,\n            equity_agreed: acceptedEquity\n          };\n        });\n        \n        setTotalEarnedEquity(totalEarned);\n        setTasksWithEarnings(updatedTasks);\n      } catch (error) {\n        console.error('Error fetching task earnings data:', error);\n      }\n    };\n    \n    fetchTaskEarnings();\n  }, [project.tasks]);\n\n  const getApplicationCount = (id: string) => {\n    return applicationCounts[id] || 0;\n  };\n\n  // Calculate totals\n  const totalTaskEquity = project.tasks.reduce((sum, task) => \n    sum + (task.equity_allocation || 0), 0);\n\n  return (\n    <div className=\"space-y-4\">\n      <Card className=\"border rounded-lg overflow-hidden\">\n        <div className=\"border-b cursor-pointer\" onClick={() => toggleProject(project.project_id || project.id || '')}>\n          <div className=\"p-4 flex flex-col md:flex-row justify-between\">\n            <div className=\"flex-1\">\n              <div className=\"flex items-center\">\n                <Link \n                  to={`/projects/${project.project_id || project.id}`}\n                  className=\"text-blue-600 hover:underline text-lg font-medium\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  {project.title}\n                </Link>\n                \n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <Link \n                      to={`/business/applications?project=${project.project_id || project.id}`}\n                      className=\"ml-2 flex items-center text-sm text-blue-500 hover:text-blue-700\"\n                      onClick={(e) => e.stopPropagation()}\n                    >\n                      <Users className=\"h-4 w-4 mr-1\" />\n                      {getApplicationCount(project.project_id || project.id || '')}\n                    </Link>\n                  </TooltipTrigger>\n                  <TooltipContent>\n                    <p className=\"text-xs\">View applications for this project</p>\n                  </TooltipContent>\n                </Tooltip>\n              </div>\n              \n              <div className=\"flex items-center flex-wrap text-muted-foreground text-sm mt-1\">\n                <span className=\"mr-4\">Status: {project.status || \"Active\"}</span>\n                <span>Timeframe: {project.project_timeframe || project.timeframe || 'Not specified'}</span>\n              </div>\n              \n              <TooltipProvider>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-4\">\n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <div>\n                        <div className=\"text-xs font-medium\">Total Equity Offered</div>\n                        <div className=\"text-sm\">{project.equity_allocation}%</div>\n                      </div>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                      <p className=\"text-xs\">Total equity allocation for this project</p>\n                    </TooltipContent>\n                  </Tooltip>\n                  \n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <div>\n                        <div className=\"text-xs font-medium\">Task Equity</div>\n                        <div className=\"text-sm\">{totalTaskEquity.toFixed(2)}%</div>\n                      </div>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                      <p className=\"text-xs\">Sum of equity allocated to all tasks</p>\n                    </TooltipContent>\n                  </Tooltip>\n                  \n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <div>\n                        <div className=\"text-xs font-medium\">Agreed Equity</div>\n                        <div className=\"text-sm\">{totalAgreedEquity.toFixed(2)}%</div>\n                      </div>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                      <p className=\"text-xs\">Total equity agreed with job seekers</p>\n                    </TooltipContent>\n                  </Tooltip>\n                  \n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <div>\n                        <div className=\"text-xs font-medium\">Equity Earned</div>\n                        <div className=\"text-sm\">{totalEarnedEquity.toFixed(2)}%</div>\n                      </div>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                      <p className=\"text-xs\">Equity already earned by job seekers</p>\n                    </TooltipContent>\n                  </Tooltip>\n                </div>\n              </TooltipProvider>\n\n              <div className=\"mt-2\">\n                <div className=\"text-xs font-medium\">Required Skills</div>\n                <div className=\"flex flex-wrap gap-1 mt-1\">\n                  {Array.isArray(project.skills_required) && project.skills_required.map((skill: string, index: number) => (\n                    <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                      {skill}\n                    </Badge>\n                  ))}\n                  {(!Array.isArray(project.skills_required) || project.skills_required.length === 0) && (\n                    <span className=\"text-muted-foreground text-xs\">No skills specified</span>\n                  )}\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start space-x-2 mt-4 md:mt-0\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={(e) => {\n                  e.stopPropagation();\n                  toggleProject(project.project_id || project.id || '');\n                }}\n              >\n                {expandedProjects.has(project.project_id || project.id || '') ? (\n                  <ChevronUp className=\"h-4 w-4\" />\n                ) : (\n                  <ChevronDown className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </div>\n          </div>\n        </div>\n        \n        {expandedProjects.has(project.project_id || project.id || '') && (\n          <div className=\"p-4\">\n            <h3 className=\"text-sm font-medium mb-3\">Project Tasks</h3>\n            \n            {tasksWithEarnings.length === 0 ? (\n              <p className=\"text-sm text-muted-foreground\">No tasks available for this project.</p>\n            ) : (\n              <div className=\"space-y-4\">\n                {tasksWithEarnings.map((task: Task) => (\n                  <Card key={task.id || task.task_id} className=\"overflow-hidden\">\n                    <div className=\"border-b cursor-pointer\" onClick={() => toggleTask(task.id || task.task_id || '')}>\n                      <div className=\"p-3 flex justify-between items-start\">\n                        <div>\n                          <div className=\"flex items-center\">\n                            <div className=\"font-medium\">{task.title}</div>\n                            \n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Link \n                                  to={`/business/applications?task=${task.id || task.task_id}`}\n                                  className=\"ml-2 flex items-center text-sm text-blue-500 hover:text-blue-700\"\n                                  onClick={(e) => e.stopPropagation()}\n                                >\n                                  <Users className=\"h-4 w-4 mr-1\" />\n                                  {getApplicationCount(task.id || task.task_id || '')}\n                                </Link>\n                              </TooltipTrigger>\n                              <TooltipContent>\n                                <p className=\"text-xs\">View applications for this task</p>\n                              </TooltipContent>\n                            </Tooltip>\n                          </div>\n                          <div className=\"flex items-center text-xs text-muted-foreground mt-1\">\n                            <Badge \n                              variant=\"outline\" \n                              className={\n                                task.status === 'allocated'\n                                  ? 'bg-green-100 text-green-800 border-green-200 mr-2'\n                                  : 'bg-orange-100 text-orange-800 border-orange-200 mr-2'\n                              }\n                            >\n                              {task.status}\n                            </Badge>\n                            <span>Timeframe: {task.timeframe || 'Not specified'}</span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            onClick={(e) => {\n                              e.stopPropagation();\n                              toggleTask(task.id || task.task_id || '');\n                            }}\n                          >\n                            {expandedTasks.has(task.id || task.task_id || '') ? (\n                              <ChevronUp className=\"h-4 w-4\" />\n                            ) : (\n                              <ChevronDown className=\"h-4 w-4\" />\n                            )}\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {expandedTasks.has(task.id || task.task_id || '') && (\n                      <div className=\"p-3 bg-gray-50 border-t\">\n                        <div className=\"space-y-3\">\n                          <div>\n                            <div className=\"text-xs font-medium mb-1\">Description</div>\n                            <p className=\"text-sm\">{task.description || 'No description provided.'}</p>\n                          </div>\n                          \n                          <TooltipProvider>\n                            <div className=\"grid grid-cols-3 gap-4\">\n                              <Tooltip>\n                                <TooltipTrigger asChild>\n                                  <div>\n                                    <div className=\"text-xs font-medium\">Task Equity</div>\n                                    <div className=\"text-sm\">{task.equity_allocation || 0}%</div>\n                                  </div>\n                                </TooltipTrigger>\n                                <TooltipContent>\n                                  <p className=\"text-xs\">Equity allocated to this task</p>\n                                </TooltipContent>\n                              </Tooltip>\n                              \n                              <Tooltip>\n                                <TooltipTrigger asChild>\n                                  <div>\n                                    <div className=\"text-xs font-medium\">Agreed Equity</div>\n                                    <div className=\"text-sm\">{(task.equity_agreed || 0).toFixed(2)}%</div>\n                                  </div>\n                                </TooltipTrigger>\n                                <TooltipContent>\n                                  <p className=\"text-xs\">Equity agreed for this task</p>\n                                </TooltipContent>\n                              </Tooltip>\n                              \n                              <Tooltip>\n                                <TooltipTrigger asChild>\n                                  <div>\n                                    <div className=\"text-xs font-medium\">Equity Earned</div>\n                                    <div className=\"text-sm\">{(task.equity_earned || 0).toFixed(2)}%</div>\n                                  </div>\n                                </TooltipTrigger>\n                                <TooltipContent>\n                                  <p className=\"text-xs\">Equity earned for this task</p>\n                                </TooltipContent>\n                              </Tooltip>\n                            </div>\n                          </TooltipProvider>\n                          \n                          <div>\n                            <div className=\"text-xs font-medium mb-1\">Skills Required</div>\n                            <div className=\"flex flex-wrap gap-1\">\n                              {Array.isArray(task.skill_requirements) && task.skill_requirements.length > 0 ? \n                                task.skill_requirements.map((skill: any, index: number) => {\n                                  const skillName = typeof skill === 'string' ? skill : (skill.skill || '');\n                                  const level = typeof skill === 'string' ? 'Intermediate' : (skill.level || '');\n                                  \n                                  return (\n                                    <Badge \n                                      key={index} \n                                      variant=\"outline\" \n                                      className={\n                                        task.status === 'allocated' \n                                          ? 'bg-green-100 text-green-800 border-green-200 text-xs'\n                                          : 'bg-orange-100 text-orange-800 border-orange-200 text-xs'\n                                      }\n                                    >\n                                      {skillName} {level && <span className=\"ml-1 opacity-70\">({level})</span>}\n                                    </Badge>\n                                  );\n                                }) : \n                                <span className=\"text-sm text-muted-foreground\">No specific skills required</span>\n                              }\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n        )}\n      </Card>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/testing/GanttChartView.tsx","messages":[{"ruleId":"prefer-const","severity":2,"message":"'end' is never reassigned. Use 'const' instead.","line":41,"column":15,"nodeType":"Identifier","messageId":"useConst","endLine":41,"endColumn":18,"fix":{"range":[1338,1364],"text":"const end = new Date(start);"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from 'react';\nimport { Gantt, Task, ViewMode } from 'gantt-task-react';\nimport \"gantt-task-react/dist/index.css\";\nimport { Card, CardContent } from '@/components/ui/card';\nimport { supabase } from '@/lib/supabase';\nimport { TaskType } from '@/types/dashboard';\n\ninterface GanttChartViewProps {\n  projectId?: string;\n  tasks?: Task[];\n}\n\nexport const GanttChartView = ({ tasks: propTasks, projectId }: GanttChartViewProps) => {\n  const [view, setView] = useState<ViewMode>(ViewMode.Day);\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [loading, setLoading] = useState(false);\n  \n  useEffect(() => {\n    if (propTasks && propTasks.length > 0) {\n      setTasks(propTasks);\n    } \n    else if (projectId) {\n      fetchTasksFromProject(projectId);\n    }\n  }, [projectId, propTasks]);\n  \n  const fetchTasksFromProject = async (projectId: string) => {\n    setLoading(true);\n    try {\n      const { data: taskData, error: taskError } = await supabase\n        .from('project_sub_tasks')\n        .select('*')\n        .eq('project_id', projectId);\n        \n      if (taskError) throw taskError;\n      \n      if (taskData && taskData.length > 0) {\n        const ganttTasks: Task[] = taskData.map((task) => {\n          const start = task.created_at ? new Date(task.created_at) : new Date();\n          let end = new Date(start);\n          if (task.timeframe) {\n            const timeframe = task.timeframe.toLowerCase();\n            if (timeframe.includes('week')) {\n              const weeks = parseInt(timeframe) || 1;\n              end.setDate(end.getDate() + (weeks * 7));\n            } else if (timeframe.includes('month')) {\n              const months = parseInt(timeframe) || 1;\n              end.setMonth(end.getMonth() + months);\n            } else if (timeframe.includes('day')) {\n              const days = parseInt(timeframe) || 1;\n              end.setDate(end.getDate() + days);\n            } else {\n              end.setDate(end.getDate() + 7);\n            }\n          } else {\n            end.setDate(end.getDate() + 7);\n          }\n          \n          return {\n            id: task.task_id,\n            name: task.title,\n            start,\n            end,\n            progress: task.completion_percentage ? task.completion_percentage / 100 : 0,\n            type: 'task' as TaskType,\n            isDisabled: false,\n            styles: { progressColor: '#2196F3', progressSelectedColor: '#1976D2' }\n          };\n        });\n        \n        setTasks(ganttTasks);\n      }\n    } catch (error) {\n      console.error('Error fetching tasks for Gantt chart:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  if (loading) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center h-40\">\n          <p className=\"text-muted-foreground\">Loading Gantt chart data...</p>\n        </CardContent>\n      </Card>\n    );\n  }\n  \n  if (!tasks || tasks.length === 0) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center h-40\">\n          <p className=\"text-muted-foreground\">No tasks available for Gantt chart view.</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const handleTaskClick = (task: Task) => {\n    console.log('Task clicked:', task);\n  };\n\n  // Create a proper tooltip component with type checking\n  const CustomTooltipContent: React.FC<{ task: Task; fontSize: string; fontFamily: string }> = ({ task }) => {\n    if (!task || !task.start || !task.end) {\n      return <div>Invalid task data</div>;\n    }\n    \n    const startDate = task.start.toLocaleDateString();\n    const endDate = task.end.toLocaleDateString();\n    \n    return (\n      <div style={{ padding: '8px', background: 'white', borderRadius: '4px', boxShadow: '0 2px 8px rgba(0,0,0,0.15)' }}>\n        <div style={{ fontWeight: 'bold' }}>{task.name}</div>\n        <div style={{ marginTop: '4px' }}>Start: {startDate}</div>\n        <div>End: {endDate}</div>\n        <div>Progress: {Math.round(task.progress * 100)}%</div>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <div style={{ overflowX: 'auto', height: 'calc(100vh - 300px)' }}>\n        <Gantt\n          tasks={tasks}\n          viewMode={view}\n          onDateChange={() => {}}\n          onProgressChange={() => {}}\n          onClick={handleTaskClick}\n          columnWidth={40}\n          listCellWidth=\"100px\"\n          rowHeight={35}\n          headerHeight={40}\n          todayColor=\"#FF9800\"\n          barFill={75}\n          barCornerRadius={3}\n          barProgressColor=\"#4CAF50\"\n          projectProgressColor=\"#4CAF50\"\n          barProgressSelectedColor=\"#2196F3\"\n          arrowColor=\"#9E9E9E\"\n          fontFamily=\"inherit\"\n          TooltipContent={CustomTooltipContent}\n        />\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/testing/KanbanBoard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/testing/TestingTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1008,1011],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1008,1011],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1158,1161],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1158,1161],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1215,1218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1215,1218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1276,1279],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1276,1279],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchProjects'. Either include it or remove the dependency array.","line":42,"column":6,"nodeType":"ArrayExpression","endLine":42,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchProjects]","fix":{"range":[1512,1514],"text":"[fetchProjects]"}}]},{"ruleId":"prefer-const","severity":2,"message":"'end' is never reassigned. Use 'const' instead.","line":157,"column":15,"nodeType":"Identifier","messageId":"useConst","endLine":157,"endColumn":18,"fix":{"range":[4500,4526],"text":"const end = new Date(start);"}}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { KanbanBoard } from \"./KanbanBoard\";\nimport { TimeTracker } from \"./TimeTracker\";\nimport { GanttChartView } from \"./GanttChartView\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Table, \n  TableHeader, \n  TableRow, \n  TableHead, \n  TableBody, \n  TableCell \n} from \"@/components/ui/table\";\nimport { supabase } from \"@/lib/supabase\";\nimport { toast } from \"sonner\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { AlertCircle, Clock, Users } from \"lucide-react\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Task, TaskType } from \"@/types/dashboard\";\nimport { GanttTask } from \"@/types/business\";\n\nexport function TestingTab() {\n  const [projectsData, setProjectsData] = useState<any[]>([]);\n  const [selectedProject, setSelectedProject] = useState<string | null>(null);\n  const [applicationsData, setApplicationsData] = useState<any[]>([]);\n  const [tasksData, setTasksData] = useState<any[]>([]);\n  const [ticketsData, setTicketsData] = useState<any[]>([]);\n  const [ganttTasks, setGanttTasks] = useState<GanttTask[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [loadingProjects, setLoadingProjects] = useState(true);\n\n  useEffect(() => {\n    fetchProjects();\n  }, []);\n\n  useEffect(() => {\n    if (selectedProject) {\n      fetchApplications(selectedProject);\n      fetchTasks(selectedProject);\n      fetchTickets(selectedProject);\n      prepareGanttData(selectedProject);\n    }\n  }, [selectedProject]);\n\n  const fetchProjects = async () => {\n    setLoadingProjects(true);\n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) return;\n      \n      const { data, error } = await supabase\n        .from('business_projects')\n        .select(`\n          *,\n          businesses!inner (\n            company_name\n          )\n        `)\n        .eq('business_id', session.user.id);\n        \n      if (error) throw error;\n      \n      setProjectsData(data || []);\n      \n      if (data && data.length > 0 && !selectedProject) {\n        setSelectedProject(data[0].project_id);\n      }\n    } catch (error) {\n      console.error('Error fetching projects:', error);\n      toast.error(\"Failed to load projects\");\n    } finally {\n      setLoadingProjects(false);\n    }\n  };\n\n  const fetchApplications = async (projectId: string) => {\n    try {\n      const { data, error } = await supabase\n        .from('job_applications')\n        .select(`\n          *,\n          profiles:user_id (\n            first_name,\n            last_name,\n            email\n          )\n        `)\n        .eq('project_id', projectId);\n        \n      if (error) throw error;\n      \n      setApplicationsData(data || []);\n    } catch (error) {\n      console.error('Error fetching applications:', error);\n      toast.error(\"Failed to load applications\");\n    }\n  };\n\n  const fetchTasks = async (projectId: string) => {\n    try {\n      const { data, error } = await supabase\n        .from('project_sub_tasks')\n        .select('*')\n        .eq('project_id', projectId);\n        \n      if (error) throw error;\n      \n      setTasksData(data || []);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n      toast.error(\"Failed to load tasks\");\n    }\n  };\n\n  const fetchTickets = async (projectId: string) => {\n    setLoading(true);\n    try {\n      const { data, error } = await supabase\n        .from('tickets')\n        .select(`\n          *,\n          project:project_id(title)\n        `)\n        .eq('project_id', projectId);\n        \n      if (error) throw error;\n      \n      setTicketsData(data || []);\n    } catch (error) {\n      console.error('Error fetching tickets:', error);\n      toast.error(\"Failed to load tickets\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const prepareGanttData = async (projectId: string) => {\n    try {\n      const { data, error } = await supabase\n        .from('project_sub_tasks')\n        .select('*')\n        .eq('project_id', projectId);\n        \n      if (error) throw error;\n      \n      if (data && data.length > 0) {\n        const ganttTasksData: GanttTask[] = data.map((task) => {\n          const start = task.created_at ? new Date(task.created_at) : new Date();\n          let end = new Date(start);\n          if (task.timeframe) {\n            const timeframe = task.timeframe.toLowerCase();\n            if (timeframe.includes('week')) {\n              const weeks = parseInt(timeframe) || 1;\n              end.setDate(end.getDate() + (weeks * 7));\n            } else if (timeframe.includes('month')) {\n              const months = parseInt(timeframe) || 1;\n              end.setMonth(end.getMonth() + months);\n            } else if (timeframe.includes('day')) {\n              const days = parseInt(timeframe) || 1;\n              end.setDate(end.getDate() + days);\n            } else {\n              end.setDate(end.getDate() + 7);\n            }\n          } else {\n            end.setDate(end.getDate() + 7);\n          }\n          \n          return {\n            id: task.task_id,\n            name: task.title,\n            start,\n            end,\n            progress: task.completion_percentage ? task.completion_percentage / 100 : 0,\n            type: 'task' as TaskType,\n            isDisabled: false,\n            styles: { progressColor: '#2196F3', progressSelectedColor: '#1976D2' }\n          };\n        });\n        \n        setGanttTasks(ganttTasksData);\n      } else {\n        setGanttTasks([]);\n      }\n    } catch (error) {\n      console.error('Error preparing Gantt data:', error);\n      setGanttTasks([]);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex justify-between items-center\">\n          <h2 className=\"text-xl font-semibold\">Project Management Tools</h2>\n          \n          <div className=\"w-64\">\n            <Select \n              value={selectedProject || ''} \n              onValueChange={(value) => setSelectedProject(value)}\n              disabled={loadingProjects}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select a project\" />\n              </SelectTrigger>\n              <SelectContent>\n                {projectsData.map((project) => (\n                  <SelectItem key={project.project_id} value={project.project_id}>\n                    {project.title}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {!selectedProject ? (\n          <Alert>\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              Please select a project to view management tools\n            </AlertDescription>\n          </Alert>\n        ) : (\n          <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n            <TabsList className=\"grid grid-cols-5 w-full\">\n              <TabsTrigger value=\"overview\">Project Overview</TabsTrigger>\n              <TabsTrigger value=\"applications\">Applications</TabsTrigger>\n              <TabsTrigger value=\"tasks\">Task Completion</TabsTrigger>\n              <TabsTrigger value=\"kanban\">Kanban Board</TabsTrigger>\n              <TabsTrigger value=\"gantt\">Gantt Chart</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"overview\" className=\"space-y-4\">\n              {projectsData.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground\">No projects available.</p>\n                </div>\n              ) : (\n                <div>\n                  <h3 className=\"text-lg font-medium mb-4\">\n                    Project Overview: {projectsData.find(p => p.project_id === selectedProject)?.title}\n                  </h3>\n                  \n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <Card>\n                      <CardHeader className=\"pb-2\">\n                        <h4 className=\"font-medium\">Project Details</h4>\n                      </CardHeader>\n                      <CardContent>\n                        <dl className=\"space-y-2\">\n                          <div className=\"flex justify-between\">\n                            <dt className=\"font-medium\">Status:</dt>\n                            <dd>\n                              <Badge>\n                                {projectsData.find(p => p.project_id === selectedProject)?.status || 'N/A'}\n                              </Badge>\n                            </dd>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <dt className=\"font-medium\">Company:</dt>\n                            <dd>{projectsData.find(p => p.project_id === selectedProject)?.businesses?.company_name || 'N/A'}</dd>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <dt className=\"font-medium\">Timeframe:</dt>\n                            <dd>{projectsData.find(p => p.project_id === selectedProject)?.project_timeframe || 'N/A'}</dd>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <dt className=\"font-medium\">Total Equity:</dt>\n                            <dd>{projectsData.find(p => p.project_id === selectedProject)?.equity_allocation || 0}%</dd>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <dt className=\"font-medium\">Equity Allocated:</dt>\n                            <dd>{projectsData.find(p => p.project_id === selectedProject)?.equity_allocated || 0}%</dd>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <dt className=\"font-medium\">Completion:</dt>\n                            <dd>{projectsData.find(p => p.project_id === selectedProject)?.completion_percentage || 0}%</dd>\n                          </div>\n                        </dl>\n                      </CardContent>\n                    </Card>\n                    \n                    <Card>\n                      <CardHeader className=\"pb-2\">\n                        <h4 className=\"font-medium\">Tasks & Applications Summary</h4>\n                      </CardHeader>\n                      <CardContent>\n                        <dl className=\"space-y-4\">\n                          <div>\n                            <dt className=\"font-medium flex items-center mb-1\">\n                              <Users className=\"mr-2 h-4 w-4\" /> Applications\n                            </dt>\n                            <dd className=\"text-2xl\">{applicationsData.length}</dd>\n                          </div>\n                          <div>\n                            <dt className=\"font-medium flex items-center mb-1\">\n                              <Clock className=\"mr-2 h-4 w-4\" /> Tasks\n                            </dt>\n                            <dd className=\"text-2xl\">{tasksData.length}</dd>\n                          </div>\n                        </dl>\n                      </CardContent>\n                    </Card>\n                  </div>\n                </div>\n              )}\n            </TabsContent>\n            \n            <TabsContent value=\"applications\">\n              {applicationsData.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground\">No applications for this project.</p>\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Applicant</TableHead>\n                      <TableHead>Task</TableHead>\n                      <TableHead>Applied Date</TableHead>\n                      <TableHead>Status</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {applicationsData.map(app => (\n                      <TableRow key={app.job_app_id}>\n                        <TableCell>\n                          {app.profiles?.first_name} {app.profiles?.last_name}\n                        </TableCell>\n                        <TableCell>\n                          {tasksData.find(t => t.task_id === app.task_id)?.title || 'Unknown task'}\n                        </TableCell>\n                        <TableCell>\n                          {new Date(app.applied_at).toLocaleDateString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge className={\n                            app.status === 'accepted' ? 'bg-green-500' : \n                            app.status === 'pending' ? 'bg-yellow-500' : \n                            app.status === 'rejected' ? 'bg-red-500' : \n                            'bg-gray-500'\n                          }>\n                            {app.status}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </TabsContent>\n            \n            <TabsContent value=\"tasks\">\n              {tasksData.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground\">No tasks for this project.</p>\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Task</TableHead>\n                      <TableHead>Description</TableHead>\n                      <TableHead>Timeframe</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Equity</TableHead>\n                      <TableHead>Completion</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {tasksData.map(task => (\n                      <TableRow key={task.task_id}>\n                        <TableCell className=\"font-medium\">{task.title}</TableCell>\n                        <TableCell className=\"max-w-xs truncate\">{task.description}</TableCell>\n                        <TableCell>{task.timeframe}</TableCell>\n                        <TableCell>\n                          <Badge className={\n                            task.status === 'completed' ? 'bg-green-500' : \n                            task.status === 'in_progress' ? 'bg-blue-500' : \n                            task.status === 'open' ? 'bg-yellow-500' : \n                            'bg-gray-500'\n                          }>\n                            {task.status}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>{task.equity_allocation}%</TableCell>\n                        <TableCell>{task.completion_percentage}%</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </TabsContent>\n            \n            <TabsContent value=\"kanban\">\n              <KanbanBoard projectId={selectedProject} />\n            </TabsContent>\n            \n            <TabsContent value=\"gantt\">\n              <GanttChartView projectId={selectedProject} tasks={ganttTasks} />\n            </TabsContent>\n          </Tabs>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/testing/TimeTracker.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1364,1367],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1364,1367],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1664,1667],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1664,1667],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1713,1716],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1713,1716],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1766,1769],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1766,1769],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'timerInterval'. Either include it or remove the dependency array.","line":66,"column":6,"nodeType":"ArrayExpression","endLine":66,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [timerInterval]","fix":{"range":[2344,2346],"text":"[timerInterval]"}}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState, useEffect } from \"react\";\nimport { supabase } from \"@/lib/supabase\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Clock, PauseCircle, PlayCircle, User } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { format } from \"date-fns\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { \n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { Slider } from \"@/components/ui/slider\";\n\nexport const TimeTracker = () => {\n  const [isTracking, setIsTracking] = useState(false);\n  const [startTime, setStartTime] = useState<Date | null>(null);\n  const [timerInterval, setTimerInterval] = useState<NodeJS.Timeout | null>(null);\n  const [elapsedTime, setElapsedTime] = useState(\"00:00:00\");\n  const [description, setDescription] = useState(\"\");\n  const [timeEntries, setTimeEntries] = useState<any[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [ticketId, setTicketId] = useState<string | null>(null);\n  const [projectId, setProjectId] = useState<string | null>(null);\n  const [taskId, setTaskId] = useState<string | null>(null);\n  \n  const [projects, setProjects] = useState<any[]>([]);\n  const [tasks, setTasks] = useState<any[]>([]);\n  const [tickets, setTickets] = useState<any[]>([]);\n  const [loadingProjects, setLoadingProjects] = useState(true);\n  const [loadingTasks, setLoadingTasks] = useState(false);\n  const [loadingTickets, setLoadingTickets] = useState(false);\n  const [selectedProject, setSelectedProject] = useState<string | null>(null);\n  const [selectedTask, setSelectedTask] = useState<string | null>(null);\n  const [selectedTicket, setSelectedTicket] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchProjects();\n    \n    return () => {\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (selectedProject) {\n      fetchTasks(selectedProject);\n      setSelectedTask(null);\n      setSelectedTicket(null);\n    }\n  }, [selectedProject]);\n\n  useEffect(() => {\n    if (selectedTask) {\n      fetchTickets(selectedTask);\n      setSelectedTicket(null);\n    }\n  }, [selectedTask]);\n\n  useEffect(() => {\n    if (selectedTicket) {\n      setTicketId(selectedTicket);\n      fetchTimeEntries(selectedTicket);\n    }\n  }, [selectedTicket]);\n\n  const fetchProjects = async () => {\n    setLoadingProjects(true);\n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) return;\n\n      const { data, error } = await supabase\n        .from('business_projects')\n        .select(`\n          *,\n          businesses (company_name)\n        `)\n        .eq('business_id', session.user.id);\n\n      if (error) throw error;\n      \n      setProjects(data || []);\n      if (data && data.length > 0) {\n        setSelectedProject(data[0].project_id);\n        setProjectId(data[0].project_id);\n      }\n    } catch (error) {\n      console.error(\"Error fetching projects:\", error);\n      toast.error(\"Failed to load projects\");\n    } finally {\n      setLoadingProjects(false);\n    }\n  };\n\n  const fetchTasks = async (projectId: string) => {\n    setLoadingTasks(true);\n    try {\n      const { data, error } = await supabase\n        .from('project_sub_tasks')\n        .select('*')\n        .eq('project_id', projectId);\n\n      if (error) throw error;\n      \n      setTasks(data || []);\n      if (data && data.length > 0) {\n        setSelectedTask(data[0].task_id);\n        setTaskId(data[0].task_id);\n      }\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n      toast.error(\"Failed to load tasks\");\n    } finally {\n      setLoadingTasks(false);\n    }\n  };\n\n  const fetchTickets = async (taskId: string) => {\n    setLoadingTickets(true);\n    try {\n      const { data, error } = await supabase\n        .from('tickets')\n        .select('*')\n        .eq('task_id', taskId);\n\n      if (error) throw error;\n      \n      setTickets(data || []);\n      if (data && data.length > 0) {\n        setSelectedTicket(data[0].id);\n        setTicketId(data[0].id);\n      }\n    } catch (error) {\n      console.error(\"Error fetching tickets:\", error);\n      toast.error(\"Failed to load tickets\");\n    } finally {\n      setLoadingTickets(false);\n    }\n  };\n\n  const fetchTimeEntries = async (ticketId: string) => {\n    setLoading(true);\n    try {\n      const { data, error } = await supabase\n        .from('time_entries')\n        .select('*')\n        .eq('ticket_id', ticketId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      \n      setTimeEntries(data || []);\n    } catch (error) {\n      console.error(\"Error fetching time entries:\", error);\n      toast.error(\"Failed to load time entries\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const startTimer = async () => {\n    if (!selectedTicket) {\n      toast.error(\"Please select a ticket first\");\n      return;\n    }\n    \n    const now = new Date();\n    setStartTime(now);\n    setIsTracking(true);\n    \n    // Create time entry\n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) {\n        toast.error(\"You must be logged in to track time\");\n        return;\n      }\n      \n      const { data, error } = await supabase\n        .from('time_entries')\n        .insert({\n          ticket_id: selectedTicket,\n          user_id: session.user.id,\n          start_time: now.toISOString(),\n          description: description\n        })\n        .select()\n        .single();\n        \n      if (error) throw error;\n      \n      // Start timer interval\n      const intervalId = setInterval(() => {\n        const currentTime = new Date();\n        const diff = currentTime.getTime() - now.getTime();\n        const hours = Math.floor(diff / (1000 * 60 * 60));\n        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n        const seconds = Math.floor((diff % (1000 * 60)) / 1000);\n        \n        setElapsedTime(\n          `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`\n        );\n      }, 1000);\n      \n      setTimerInterval(intervalId);\n      toast.success(\"Time tracking started\");\n    } catch (error) {\n      console.error(\"Error starting time tracking:\", error);\n      toast.error(\"Failed to start time tracking\");\n      setIsTracking(false);\n      setStartTime(null);\n    }\n  };\n\n  const stopTimer = async () => {\n    if (!startTime || !timerInterval) return;\n    \n    clearInterval(timerInterval);\n    setTimerInterval(null);\n    \n    const endTime = new Date();\n    const hoursLogged = (endTime.getTime() - startTime.getTime()) / (1000 * 60 * 60);\n    \n    try {\n      // Update the latest time entry\n      const { data: latestEntry, error: fetchError } = await supabase\n        .from('time_entries')\n        .select('*')\n        .eq('ticket_id', selectedTicket)\n        .is('end_time', null)\n        .order('start_time', { ascending: false })\n        .limit(1)\n        .single();\n        \n      if (fetchError) throw fetchError;\n      \n      const { error: updateError } = await supabase\n        .from('time_entries')\n        .update({\n          end_time: endTime.toISOString(),\n          hours_logged: hoursLogged,\n          description: description\n        })\n        .eq('id', latestEntry.id);\n        \n      if (updateError) throw updateError;\n      \n      // Update ticket hours logged\n      const { data: ticket, error: ticketFetchError } = await supabase\n        .from('tickets')\n        .select('hours_logged')\n        .eq('id', selectedTicket)\n        .single();\n        \n      if (ticketFetchError && ticketFetchError.code !== 'PGRST116') throw ticketFetchError;\n      \n      const currentHours = ticket?.hours_logged || 0;\n      const { error: ticketUpdateError } = await supabase\n        .from('tickets')\n        .update({\n          hours_logged: currentHours + hoursLogged\n        })\n        .eq('id', selectedTicket);\n        \n      if (ticketUpdateError) throw ticketUpdateError;\n      \n      setIsTracking(false);\n      setStartTime(null);\n      setElapsedTime(\"00:00:00\");\n      setDescription(\"\");\n      fetchTimeEntries(selectedTicket);\n      toast.success(\"Time entry saved successfully\");\n    } catch (error) {\n      console.error(\"Error stopping time tracking:\", error);\n      toast.error(\"Failed to save time entry\");\n    }\n  };\n\n  const updateTaskProgress = async (taskId: string, value: number) => {\n    try {\n      const { error } = await supabase\n        .from('project_sub_tasks')\n        .update({ completion_percentage: value })\n        .eq('task_id', taskId);\n        \n      if (error) throw error;\n      \n      // Refresh tasks\n      if (selectedProject) {\n        fetchTasks(selectedProject);\n      }\n      \n      toast.success(\"Task progress updated\");\n    } catch (error) {\n      console.error(\"Error updating task progress:\", error);\n      toast.error(\"Failed to update task progress\");\n    }\n  };\n\n  const formatDuration = (hours: number) => {\n    const totalMinutes = Math.floor(hours * 60);\n    const h = Math.floor(totalMinutes / 60);\n    const m = totalMinutes % 60;\n    \n    return `${h}h ${m}m`;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Time & Progress Tracking</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"mb-6 space-y-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Select Project</label>\n              <Select \n                value={selectedProject || ''} \n                onValueChange={setSelectedProject}\n                disabled={loadingProjects || projects.length === 0}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select a project\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {projects.map(project => (\n                    <SelectItem key={project.project_id} value={project.project_id}>\n                      {project.title}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Select Task</label>\n              <Select \n                value={selectedTask || ''} \n                onValueChange={setSelectedTask}\n                disabled={loadingTasks || tasks.length === 0 || !selectedProject}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select a task\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {tasks.map(task => (\n                    <SelectItem key={task.task_id} value={task.task_id}>\n                      {task.title}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Select Ticket</label>\n              <Select \n                value={selectedTicket || ''} \n                onValueChange={setSelectedTicket}\n                disabled={loadingTickets || tickets.length === 0 || !selectedTask}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select a ticket\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {tickets.map(ticket => (\n                    <SelectItem key={ticket.id} value={ticket.id}>\n                      {ticket.title}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {tickets.length === 0 && selectedTask && !loadingTickets && (\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  No tickets found for this task. Create a ticket first.\n                </p>\n              )}\n            </div>\n          </div>\n          \n          {selectedTicket && (\n            <>\n              <Separator className=\"my-4\" />\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"text-lg font-medium mb-2\">Task Progress</h3>\n                  {selectedTask && tasks.find(t => t.task_id === selectedTask) && (\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"font-medium\">\n                          {tasks.find(t => t.task_id === selectedTask)?.title}\n                        </span>\n                        <span className=\"text-sm\">\n                          {tasks.find(t => t.task_id === selectedTask)?.completion_percentage || 0}%\n                        </span>\n                      </div>\n                      <Slider\n                        defaultValue={[tasks.find(t => t.task_id === selectedTask)?.completion_percentage || 0]}\n                        max={100}\n                        step={5}\n                        className=\"w-full\"\n                        onValueCommit={(value) => {\n                          if (selectedTask) {\n                            updateTaskProgress(selectedTask, value[0]);\n                          }\n                        }}\n                      />\n                    </div>\n                  )}\n                </div>\n                \n                <Separator className=\"my-4\" />\n                \n                <div>\n                  <h3 className=\"text-lg font-medium mb-4\">Time Tracker</h3>\n                  <div className=\"grid gap-4 md:grid-cols-2\">\n                    <div className=\"space-y-4\">\n                      <div className=\"rounded-lg border p-4\">\n                        <div className=\"text-center text-4xl font-mono mb-4\">\n                          {isTracking ? elapsedTime : \"00:00:00\"}\n                        </div>\n                        <Textarea\n                          value={description}\n                          onChange={(e) => setDescription(e.target.value)}\n                          placeholder=\"What are you working on?\"\n                          className=\"mb-4\"\n                          disabled={isTracking}\n                        />\n                        {isTracking ? (\n                          <Button \n                            variant=\"destructive\" \n                            className=\"w-full\" \n                            onClick={stopTimer}\n                          >\n                            <PauseCircle className=\"mr-2 h-4 w-4\" />\n                            Stop Timer\n                          </Button>\n                        ) : (\n                          <Button \n                            className=\"w-full\" \n                            onClick={startTimer}\n                          >\n                            <PlayCircle className=\"mr-2 h-4 w-4\" />\n                            Start Timer\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <div className=\"rounded-lg border\">\n                        <div className=\"p-4 font-medium flex justify-between items-center\">\n                          <h4>Recent Time Entries</h4>\n                          {loading && <p className=\"text-sm text-muted-foreground\">Loading...</p>}\n                        </div>\n                        <div className=\"max-h-[300px] overflow-y-auto\">\n                          {!loading && timeEntries.length === 0 ? (\n                            <p className=\"p-4 text-center text-muted-foreground\">No time entries found</p>\n                          ) : (\n                            <Accordion type=\"single\" collapsible className=\"w-full\">\n                              {timeEntries.map((entry, index) => (\n                                <AccordionItem key={entry.id} value={entry.id}>\n                                  <AccordionTrigger className=\"px-4 py-2 hover:no-underline\">\n                                    <div className=\"flex justify-between items-center w-full\">\n                                      <div className=\"flex items-center\">\n                                        <Clock className=\"mr-2 h-4 w-4\" />\n                                        <span>\n                                          {entry.hours_logged ? formatDuration(entry.hours_logged) : 'In progress'}\n                                        </span>\n                                      </div>\n                                      <span className=\"text-xs text-muted-foreground\">\n                                        {format(new Date(entry.start_time), 'MMM d, yyyy')}\n                                      </span>\n                                    </div>\n                                  </AccordionTrigger>\n                                  <AccordionContent className=\"px-4 pb-3 pt-0\">\n                                    <div className=\"text-sm space-y-2\">\n                                      <div className=\"flex justify-between\">\n                                        <span className=\"font-medium\">Start:</span>\n                                        <span>{format(new Date(entry.start_time), 'MMM d, yyyy h:mm a')}</span>\n                                      </div>\n                                      {entry.end_time && (\n                                        <div className=\"flex justify-between\">\n                                          <span className=\"font-medium\">End:</span>\n                                          <span>{format(new Date(entry.end_time), 'MMM d, yyyy h:mm a')}</span>\n                                        </div>\n                                      )}\n                                      {entry.description && (\n                                        <div className=\"pt-2\">\n                                          <span className=\"font-medium\">Description:</span>\n                                          <p className=\"mt-1\">{entry.description}</p>\n                                        </div>\n                                      )}\n                                    </div>\n                                  </AccordionContent>\n                                </AccordionItem>\n                              ))}\n                            </Accordion>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/business/users/RequestAccessButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/dashboard/TicketAttachmentsList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[765,768],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[765,768],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1179,1182],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1179,1182],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3408,3411],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3408,3411],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4898,4901],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4898,4901],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":172,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6269,6272],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6269,6272],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":205,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7233,7236],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7233,7236],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":352,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":352,"endColumn":36}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useRef } from \"react\";\nimport { supabase } from \"@/lib/supabase\";\nimport { FileImage, FileText, Loader2, AlertCircle, RefreshCw } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { checkStoragePermissions, getSecureFileUrl } from \"@/utils/setupStorage\";\n\ninterface TicketAttachmentsListProps {\n  reporterId: string | undefined;\n  ticketId: string;\n  onAttachmentsLoaded?: (hasAttachments: boolean) => void;\n  userType?: 'jobseeker' | 'business'; // Added userType prop to handle different permission scenarios\n}\n\nexport const TicketAttachmentsList = ({ \n  reporterId, \n  ticketId,\n  onAttachmentsLoaded,\n  userType\n}: TicketAttachmentsListProps) => {\n  const [attachments, setAttachments] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [fileUrls, setFileUrls] = useState<{[key: string]: string}>({});\n  const [loadingFiles, setLoadingFiles] = useState<{[key: string]: boolean}>({});\n  const [fileErrors, setFileErrors] = useState<{[key: string]: string}>({});\n  const [permissionsDetails, setPermissionsDetails] = useState<any>(null);\n  const [retryCount, setRetryCount] = useState(0);\n  \n  // Add these refs to prevent unnecessary re-renders and fetch loops\n  const hasFetchedRef = useRef(false);\n  const reporterIdRef = useRef(reporterId);\n  const ticketIdRef = useRef(ticketId);\n  const hasCalledCallbackRef = useRef(false);\n\n  useEffect(() => {\n    // Update refs when props change\n    reporterIdRef.current = reporterId;\n    ticketIdRef.current = ticketId;\n  }, [reporterId, ticketId]);\n\n  useEffect(() => {\n    // Reset tracking states when retry is triggered\n    if (retryCount > 0) {\n      hasFetchedRef.current = false;\n      hasCalledCallbackRef.current = false;\n    }\n  }, [retryCount]);\n\n  useEffect(() => {\n    const fetchAttachments = async () => {\n      // Skip if already fetched or missing required data\n      if (hasFetchedRef.current || !reporterId || !ticketId) {\n        if (!reporterId || !ticketId) {\n          setLoading(false);\n          if (onAttachmentsLoaded && !hasCalledCallbackRef.current) {\n            onAttachmentsLoaded(false);\n            hasCalledCallbackRef.current = true;\n          }\n        }\n        return;\n      }\n\n      hasFetchedRef.current = true; // Mark as fetched to prevent loops\n      \n      try {\n        console.log(`Fetching attachments from path: ${reporterId}/${ticketId} for ${userType || 'unknown'} user`);\n        \n        // Check if we're authenticated\n        const { data: { session } } = await supabase.auth.getSession();\n        if (!session) {\n          throw new Error(\"Not authenticated\");\n        }\n\n        // First check storage permissions - apply different strategies based on user type\n        const permissionCheck = await checkStoragePermissions(\n          'ticket-attachments', \n          `${reporterId}/${ticketId}`,\n          userType === 'jobseeker' ? { retryLimit: 1 } : undefined // Limit retries for jobseekers\n        );\n        \n        setPermissionsDetails(permissionCheck);\n        \n        if (!permissionCheck.success) {\n          console.error(\"Storage access denied:\", permissionCheck);\n          throw new Error(`Storage access denied: ${permissionCheck.error}`);\n        }\n\n        // Batch state updates to reduce render cycles\n        const updatedState: any = {\n          attachmentsData: [],\n          urlsMap: {},\n          loadingFilesMap: {},\n          errorsMap: {}\n        };\n\n        const { data, error } = await supabase.storage\n          .from('ticket-attachments')\n          .list(`${reporterId}/${ticketId}`);\n\n        if (error) {\n          console.error(\"Storage list error:\", error);\n          throw error;\n        }\n\n        console.log(\"Attachments fetched:\", data);\n        updatedState.attachmentsData = data || [];\n        \n        if (data && data.length > 0) {\n          // Pre-populate loading states\n          const loadingStates: {[key: string]: boolean} = {};\n          data.forEach(file => {\n            loadingStates[file.name] = true;\n          });\n          updatedState.loadingFilesMap = loadingStates;\n          \n          // Set initial state before async operations\n          setAttachments(updatedState.attachmentsData);\n          setLoadingFiles(loadingStates);\n          \n          // Get URLs in parallel instead of sequentially\n          const urlPromises = data.map(async (file) => {\n            try {\n              const result = await getSecureFileUrl(\n                'ticket-attachments', \n                `${reporterId}/${ticketId}/${file.name}`\n              );\n              \n              return {\n                fileName: file.name,\n                url: result.success ? result.url : null,\n                error: !result.success ? result.error : null\n              };\n            } catch (err: any) {\n              console.error(`Error getting URL for ${file.name}:`, err);\n              return {\n                fileName: file.name,\n                url: null,\n                error: err.message || \"Failed to get URL\"\n              };\n            }\n          });\n          \n          // Process results\n          const results = await Promise.all(urlPromises);\n          \n          const urlMap: {[key: string]: string} = {};\n          const errorMap: {[key: string]: string} = {};\n          const finalLoadingStates: {[key: string]: boolean} = {};\n          \n          results.forEach(result => {\n            if (result.url) {\n              urlMap[result.fileName] = result.url;\n            }\n            if (result.error) {\n              errorMap[result.fileName] = result.error;\n            }\n            finalLoadingStates[result.fileName] = false;\n          });\n          \n          // Update state with all results at once\n          setFileUrls(urlMap);\n          setFileErrors(errorMap);\n          setLoadingFiles(finalLoadingStates);\n        }\n        \n        // Call the callback after data is processed\n        if (onAttachmentsLoaded && !hasCalledCallbackRef.current) {\n          const hasAttachments = data && data.length > 0;\n          onAttachmentsLoaded(hasAttachments);\n          hasCalledCallbackRef.current = true;\n        }\n      } catch (err: any) {\n        console.error(\"Error fetching attachments:\", err);\n        setError(err.message || \"Failed to load attachments\");\n        \n        // Call callback even on error\n        if (onAttachmentsLoaded && !hasCalledCallbackRef.current) {\n          onAttachmentsLoaded(false);\n          hasCalledCallbackRef.current = true;\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchAttachments();\n  }, [reporterId, ticketId, onAttachmentsLoaded, retryCount, userType]);\n\n  const handleRetry = () => {\n    hasFetchedRef.current = false;\n    hasCalledCallbackRef.current = false;\n    setLoading(true);\n    setError(null);\n    setFileErrors({});\n    setRetryCount(prev => prev + 1);\n  };\n\n  const getFileIcon = (mimeType: string) => {\n    if (mimeType?.startsWith('image/')) {\n      return <FileImage className=\"h-5 w-5 text-blue-500\" />;\n    }\n    return <FileText className=\"h-5 w-5 text-gray-500\" />;\n  };\n\n  const isImageFile = (file: any) => {\n    if (file.metadata?.mimetype?.startsWith('image/')) return true;\n    \n    const imageSuffixes = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.bmp', '.heic'];\n    return imageSuffixes.some(suffix => file.name.toLowerCase().endsWith(suffix));\n  };\n\n  const handleImageError = (filename: string) => {\n    setFileErrors(prev => ({ ...prev, [filename]: \"Failed to load image preview\" }));\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center py-4\">\n        <Loader2 className=\"h-6 w-6 animate-spin text-gray-400\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex flex-col items-center justify-center py-4 text-red-500\">\n        <AlertCircle className=\"h-8 w-8 mb-2\" />\n        <div className=\"text-sm\">{error}</div>\n        <div className=\"text-xs mt-2\">\n          {userType === 'jobseeker' ? \n            \"You may not have permission to view these attachments.\" : \n            \"Check storage bucket permissions and RLS policies\"}\n        </div>\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          onClick={handleRetry}\n          className=\"mt-2\"\n        >\n          <RefreshCw className=\"h-4 w-4 mr-2\" />\n          Retry\n        </Button>\n        {permissionsDetails && userType !== 'jobseeker' && (\n          <div className=\"text-xs mt-2 bg-gray-100 p-2 rounded max-w-full overflow-auto\">\n            <pre className=\"whitespace-pre-wrap\">\n              {JSON.stringify(permissionsDetails, null, 2)}\n            </pre>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  if (attachments.length === 0) {\n    return (\n      <div className=\"text-sm text-gray-500 py-2\">\n        No attachments found for this ticket.\n        {userType !== 'jobseeker' && (\n          <div className=\"text-xs mt-1\">\n            Path: {reporterId}/{ticketId}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-2\">\n      <h4 className=\"text-sm font-medium\">Attachments ({attachments.length})</h4>\n      <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-2\">\n        {attachments.map((file) => {\n          const isImage = isImageFile(file);\n          const fileUrl = fileUrls[file.name] || '';\n          const hasError = fileErrors[file.name];\n          const isLoading = loadingFiles[file.name];\n          \n          return (\n            <div \n              key={file.id} \n              className=\"border rounded-md p-2 flex flex-col gap-1\"\n            >\n              <div className=\"aspect-square bg-gray-100 rounded flex items-center justify-center overflow-hidden relative\">\n                {isLoading ? (\n                  <Loader2 className=\"h-5 w-5 animate-spin text-gray-400\" />\n                ) : isImage && fileUrl ? (\n                  <>\n                    <img \n                      src={fileUrl} \n                      alt={file.name} \n                      className=\"h-full w-full object-cover\"\n                      onError={() => handleImageError(file.name)}\n                    />\n                    {hasError && (\n                      <div className=\"absolute inset-0 bg-gray-100 bg-opacity-80 flex flex-col items-center justify-center p-2\">\n                        <AlertCircle className=\"h-5 w-5 text-red-500 mb-1\" />\n                        <span className=\"text-xs text-center text-red-500\">Preview not available</span>\n                      </div>\n                    )}\n                  </>\n                ) : (\n                  <div className=\"flex flex-col items-center justify-center\">\n                    {getFileIcon(file.metadata?.mimetype || '')}\n                    <span className=\"text-xs text-gray-500 mt-1\">\n                      {file.metadata?.size ? `${Math.round(file.metadata.size / 1024)} KB` : ''}\n                    </span>\n                  </div>\n                )}\n              </div>\n              <div className=\"text-xs truncate\" title={file.name}>\n                {file.name}\n              </div>\n              <div className=\"flex gap-1 mt-auto\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"text-xs h-7 flex-1\"\n                  onClick={() => window.open(fileUrl, '_blank')}\n                  disabled={!fileUrl || isLoading}\n                >\n                  {isLoading ? <Loader2 className=\"h-3 w-3 animate-spin\" /> : \"View\"}\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"text-xs h-7 flex-1\"\n                  onClick={() => {\n                    const a = document.createElement('a');\n                    a.href = fileUrl;\n                    a.download = file.name;\n                    document.body.appendChild(a);\n                    a.click();\n                    document.body.removeChild(a);\n                  }}\n                  disabled={!fileUrl || isLoading}\n                >\n                  Download\n                </Button>\n              </div>\n              {hasError && !isLoading && (\n                <div className=\"text-xs text-red-500 mt-1\">\n                  {hasError}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport const checkTicketAttachments = async (\n  reporterId?: string, \n  ticketId?: string,\n  userType?: 'jobseeker' | 'business'\n): Promise<boolean> => {\n  if (!reporterId || !ticketId) return false;\n  \n  try {\n    console.log(`Checking attachments at path: ${reporterId}/${ticketId} for ${userType || 'unknown'} user`);\n    \n    const { data: sessionData } = await supabase.auth.getSession();\n    if (!sessionData.session) {\n      console.error(\"Not authenticated\");\n      return false;\n    }\n    \n    // Add caching to prevent repeated checks\n    const cacheKey = `attachments_${reporterId}_${ticketId}`;\n    const cachedResult = sessionStorage.getItem(cacheKey);\n    \n    if (cachedResult !== null) {\n      return cachedResult === 'true';\n    }\n    \n    const { data, error } = await supabase.storage\n      .from('ticket-attachments')\n      .list(`${reporterId}/${ticketId}`);\n\n    if (error) {\n      console.error(\"Error checking attachments:\", error);\n      throw error;\n    }\n    \n    const hasAttachments = data && data.length > 0;\n    \n    // Cache the result for 5 minutes\n    try {\n      sessionStorage.setItem(cacheKey, hasAttachments ? 'true' : 'false');\n      setTimeout(() => {\n        sessionStorage.removeItem(cacheKey);\n      }, 5 * 60 * 1000);\n    } catch (e) {\n      console.warn(\"Could not cache attachment check result\", e);\n    }\n    \n    return hasAttachments;\n  } catch (err) {\n    console.error(\"Error checking ticket attachments:\", err);\n    return false;\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/documents/ContractSignatureDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/documents/DocumentViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/documents/NDASignatureDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/ApplicationsList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/EquityProjectsList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/ProfileCompletionForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/ProfileSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[499,502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[499,502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[574,577],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[574,577],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { CVUploadCard } from \"./cv/CVUploadCard\";\nimport { SkillsCard } from \"./skills/SkillsCard\";\nimport { CareerHistoryDisplay } from \"./career/CareerHistoryDisplay\";\nimport { ProfileEditor } from \"./profile/ProfileEditor\";\nimport { CurrentPositionCard } from \"./career/CurrentPositionCard\";\nimport { Profile, Skill } from \"@/types/jobSeeker\";\nimport { CVFile } from \"@/hooks/job-seeker/useCVData\";\n\ninterface ProfileSectionProps {\n  profile?: Profile;\n  cvUrl?: string | null;\n  parsedCvData?: any;\n  setCvUrl?: (url: string | null) => void;\n  setParsedCvData?: (data: any) => void;\n  skills?: Skill[];\n  onSkillsUpdate?: (skills: Skill[]) => void;\n  userCVs?: CVFile[];\n  onCvListUpdated?: () => void;\n}\n\nexport const ProfileSection = ({\n  profile,\n  cvUrl = null,\n  parsedCvData = {},\n  setCvUrl = () => {},\n  setParsedCvData = () => {},\n  skills = [],\n  onSkillsUpdate = () => {},\n  userCVs = [],\n  onCvListUpdated = () => {}\n}: ProfileSectionProps) => {\n  // Extract current position with better validation\n  const currentPosition = parsedCvData?.career_history && \n                         Array.isArray(parsedCvData.career_history) && \n                         parsedCvData.career_history.length > 0 && \n                         typeof parsedCvData.career_history[0] === 'object'\n                           ? parsedCvData.career_history[0] \n                           : null;\n\n  return (\n    <div className=\"space-y-6\">\n      <ProfileEditor profile={profile} />\n      <CVUploadCard \n        cvUrl={cvUrl}\n        parsedCvData={parsedCvData}\n        userCVs={userCVs}\n        onCvListUpdated={onCvListUpdated}\n      />\n      {currentPosition && (\n        <CurrentPositionCard currentPosition={currentPosition} />\n      )}\n      <SkillsCard \n        skills={skills}\n        onSkillsUpdate={onSkillsUpdate}\n      />\n      {parsedCvData?.career_history && parsedCvData.career_history.length > 0 && (\n        <CareerHistoryDisplay\n          careerHistory={parsedCvData.career_history}\n          skills={skills}\n          education={parsedCvData?.education || []}\n        />\n      )}\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/ProjectsOverview.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[810,813],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[810,813],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[833,836],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[833,836],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[932,935],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[932,935],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[999,1002],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[999,1002],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState, useEffect, useCallback } from 'react';\nimport { supabase } from '@/lib/supabase';\nimport { toast } from 'sonner';\nimport {\n  Card, \n  CardContent, \n  CardHeader, \n  CardTitle\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  ResizableHandle, \n  ResizablePanel, \n  ResizablePanelGroup \n} from \"@/components/ui/resizable\";\nimport { RefreshCw, ExternalLink } from \"lucide-react\";\n\ninterface ProjectsOverviewProps {\n  currentProjects: any[];\n  pastProjects: any[];\n  onDocumentAction: (projectId: string, action: \"edit\" | \"approve\") => void;\n  userTickets: any[];\n  onTicketAction: (ticketId: string, action: string, data?: any) => Promise<void>;\n  refreshTickets: () => Promise<void>;\n}\n\nconst ProjectsOverview = ({\n  currentProjects = [],\n  pastProjects = [],\n  onDocumentAction,\n  userTickets = [],\n  onTicketAction,\n  refreshTickets\n}: ProjectsOverviewProps) => {\n  const [projects, setProjects] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    loadProjects();\n  }, []);\n\n  const loadProjects = async () => {\n    try {\n      setIsLoading(true);\n      const { data: { user } } = await supabase.auth.getUser();\n      \n      if (!user) {\n        toast.error(\"You must be logged in to view projects\");\n        return;\n      }\n\n      const { data, error } = await supabase\n        .from('jobseeker_active_projects')\n        .select('*')\n        .eq('user_id', user.id);\n\n      if (error) {\n        throw error;\n      }\n\n      setProjects(data || []);\n    } catch (error) {\n      console.error('Error loading projects:', error);\n      toast.error('Failed to load projects');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between\">\n        <CardTitle>Projects Overview</CardTitle>\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          onClick={loadProjects} \n          disabled={isLoading}\n        >\n          <RefreshCw className={`h-4 w-4 mr-1 ${isLoading ? 'animate-spin' : ''}`} />\n          Refresh\n        </Button>\n      </CardHeader>\n      <CardContent>\n        {isLoading ? (\n          <div className=\"flex justify-center p-8\">\n            <div className=\"animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full\"></div>\n          </div>\n        ) : projects.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No active projects found.</p>\n          </div>\n        ) : (\n          <ResizablePanelGroup direction=\"vertical\" className=\"min-h-[400px]\">\n            <ResizablePanel defaultSize={50}>\n              <ScrollArea className=\"h-full\">\n                <div className=\"space-y-4 p-4\">\n                  {projects.map((project) => (\n                    <Card key={project.id} className=\"overflow-hidden\">\n                      <CardHeader className=\"bg-muted/50 p-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Avatar className=\"h-8 w-8\">\n                              <AvatarFallback>{project.company_name?.charAt(0) || 'P'}</AvatarFallback>\n                            </Avatar>\n                            <div>\n                              <h3 className=\"font-medium\">{project.title || 'Unnamed Project'}</h3>\n                              <p className=\"text-sm text-muted-foreground\">{project.company_name || 'Unknown Company'}</p>\n                            </div>\n                          </div>\n                          <Badge>{project.status || 'Active'}</Badge>\n                        </div>\n                      </CardHeader>\n                      <CardContent className=\"p-4\">\n                        <div className=\"space-y-2\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span>Progress</span>\n                            <span>{project.completion_percentage || 0}%</span>\n                          </div>\n                          <Progress value={project.completion_percentage || 0} className=\"h-2\" />\n                          <div className=\"flex justify-between mt-4\">\n                            <Button variant=\"outline\" size=\"sm\">\n                              Details\n                            </Button>\n                            <Button size=\"sm\">\n                              <ExternalLink className=\"h-4 w-4 mr-1\" />\n                              Go to Project\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </ScrollArea>\n            </ResizablePanel>\n            <ResizableHandle />\n            <ResizablePanel defaultSize={50}>\n              <Tabs defaultValue=\"details\">\n                <div className=\"p-4\">\n                  <TabsList className=\"grid grid-cols-2\">\n                    <TabsTrigger value=\"details\">Details</TabsTrigger>\n                    <TabsTrigger value=\"activity\">Activity</TabsTrigger>\n                  </TabsList>\n                  <TabsContent value=\"details\" className=\"mt-4\">\n                    <Card>\n                      <CardContent className=\"p-4\">\n                        <p className=\"text-muted-foreground\">Select a project to view details</p>\n                      </CardContent>\n                    </Card>\n                  </TabsContent>\n                  <TabsContent value=\"activity\" className=\"mt-4\">\n                    <Card>\n                      <CardContent className=\"p-4\">\n                        <p className=\"text-muted-foreground\">Select a project to view activity</p>\n                      </CardContent>\n                    </Card>\n                  </TabsContent>\n                </div>\n              </Tabs>\n            </ResizablePanel>\n          </ResizablePanelGroup>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ProjectsOverview;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/career/CareerHistoryCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/career/CareerHistoryDisplay.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[288,291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[288,291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[329,332],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[329,332],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Skill } from \"@/types/jobSeeker\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CalendarClock, Briefcase, GraduationCap } from \"lucide-react\";\n\ninterface CareerHistoryDisplayProps {\n  careerHistory: any[];\n  skills?: Skill[];\n  education?: any[];\n}\n\nexport const CareerHistoryDisplay = ({ \n  careerHistory = [], \n  skills = [],\n  education = []\n}: CareerHistoryDisplayProps) => {\n  // Filter skills to business and project management categories\n  const businessSkills = skills.filter(skill => {\n    const skillName = typeof skill === 'string' \n      ? skill \n      : ('skill' in skill && skill.skill) \n        ? skill.skill \n        : ('name' in skill && skill.name) \n          ? skill.name \n          : '';\n    \n    return (\n      skillName.toLowerCase().includes('project') || \n      skillName.toLowerCase().includes('business') ||\n      skillName.toLowerCase().includes('management') ||\n      skillName.toLowerCase().includes('leadership') ||\n      skillName.toLowerCase().includes('strategy')\n    );\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      {careerHistory.length > 0 && (\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center\">\n              <Briefcase className=\"mr-2 h-5 w-5 text-muted-foreground\" />\n              <h3 className=\"text-lg font-medium\">Professional Experience</h3>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {careerHistory.map((job, index) => (\n              <div key={index} className=\"border-b last:border-0 pb-4 last:pb-0\">\n                <div className=\"flex flex-col md:flex-row md:items-center justify-between mb-2\">\n                  <div>\n                    <h4 className=\"font-medium\">{job.title || 'Position'}</h4>\n                    <p className=\"text-sm text-muted-foreground\">{job.company || 'Company'}</p>\n                  </div>\n                  <div className=\"flex items-center mt-1 md:mt-0\">\n                    <CalendarClock className=\"h-4 w-4 mr-1 text-muted-foreground\" />\n                    <span className=\"text-sm\">\n                      {job.start_date || 'Start'} - {job.end_date || 'Present'}\n                    </span>\n                  </div>\n                </div>\n                {job.description && (\n                  <p className=\"text-sm mt-2\">{job.description}</p>\n                )}\n                {job.skills && job.skills.length > 0 && (\n                  <div className=\"flex flex-wrap gap-1 mt-2\">\n                    {job.skills.map((skill: string, i: number) => (\n                      <Badge key={i} variant=\"outline\" className=\"text-xs\">\n                        {skill}\n                      </Badge>\n                    ))}\n                  </div>\n                )}\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      )}\n\n      {businessSkills.length > 0 && (\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center\">\n              <Briefcase className=\"mr-2 h-5 w-5 text-muted-foreground\" />\n              <h3 className=\"text-lg font-medium\">Business & Management Skills</h3>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-wrap gap-2\">\n              {businessSkills.map((skill, index) => {\n                const skillName = typeof skill === 'string' \n                  ? skill \n                  : ('skill' in skill && skill.skill) \n                    ? skill.skill \n                    : ('name' in skill && skill.name) \n                      ? skill.name \n                      : '';\n                \n                const skillLevel = typeof skill !== 'string' && 'level' in skill ? skill.level : null;\n                \n                return (\n                  <Badge key={index} className=\"text-sm\">\n                    {skillName}\n                    {skillLevel && \n                      <span className=\"ml-1 opacity-70\">({skillLevel})</span>\n                    }\n                  </Badge>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {education && education.length > 0 && (\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center\">\n              <GraduationCap className=\"mr-2 h-5 w-5 text-muted-foreground\" />\n              <h3 className=\"text-lg font-medium\">Education</h3>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {education.map((edu, index) => (\n              <div key={index} className=\"border-b last:border-0 pb-4 last:pb-0\">\n                <div className=\"flex flex-col md:flex-row md:items-center justify-between mb-2\">\n                  <div>\n                    <h4 className=\"font-medium\">{edu.degree || 'Degree'}</h4>\n                    <p className=\"text-sm text-muted-foreground\">{edu.institution || 'Institution'}</p>\n                  </div>\n                  <div className=\"flex items-center mt-1 md:mt-0\">\n                    <CalendarClock className=\"h-4 w-4 mr-1 text-muted-foreground\" />\n                    <span className=\"text-sm\">\n                      {edu.start_date || 'Start'} - {edu.end_date || 'Graduation'}\n                    </span>\n                  </div>\n                </div>\n                {edu.field_of_study && (\n                  <p className=\"text-sm\">Field: {edu.field_of_study}</p>\n                )}\n                {edu.description && (\n                  <p className=\"text-sm mt-1\">{edu.description}</p>\n                )}\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/career/CurrentPositionCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/career/EducationCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/cv/CVCardHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/cv/CVEmptyState.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[71,74],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[71,74],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\ninterface CVEmptyStateProps {\n  displayUrl: string | null;\n  userCVs: any[];\n}\n\nexport const CVEmptyState = ({ displayUrl, userCVs }: CVEmptyStateProps) => {\n  if (userCVs.length > 0 || displayUrl) return null;\n  \n  return (\n    <div className=\"text-sm text-muted-foreground\">\n      <p>Upload your CV to help us understand your skills and experience. We'll automatically extract information to enhance your profile.</p>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/cv/CVLibrary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/cv/CVLibraryItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/cv/CVUploadCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[671,674],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[671,674],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { toast } from \"sonner\";\nimport { supabase } from \"@/lib/supabase\";\nimport { \n  downloadCV,\n  deleteCV,\n  previewCV,\n  setDefaultCV\n} from \"@/utils/setupStorage\";\nimport { CVFile } from \"@/hooks/job-seeker/useCVData\";\n\n// Import refactored components\nimport { CVCardHeader } from \"./CVCardHeader\";\nimport { DefaultCVDisplay } from \"./DefaultCVDisplay\";\nimport { CVUploadForm } from \"./CVUploadForm\";\nimport { CVLibrary } from \"./CVLibrary\";\nimport { CVEmptyState } from \"./CVEmptyState\";\n\ninterface CVUploadCardProps {\n  cvUrl: string | null;\n  parsedCvData?: any;\n  userCVs?: CVFile[];\n  onCvListUpdated?: () => void;\n}\n\nexport const CVUploadCard = ({ \n  cvUrl, \n  parsedCvData, \n  userCVs = [], \n  onCvListUpdated \n}: CVUploadCardProps) => {\n  const [displayUrl, setDisplayUrl] = useState<string | null>(null);\n  const [processingAction, setProcessingAction] = useState<{type: string, fileName: string} | null>(null);\n\n  useEffect(() => {\n    setDisplayUrl(cvUrl || null);\n  }, [cvUrl]);\n\n  const handleDownload = async (fileName: string) => {\n    setProcessingAction({ type: 'downloading', fileName });\n    try {\n      await downloadCV(`${fileName}`);\n    } finally {\n      setProcessingAction(null);\n    }\n  };\n\n  const handleDelete = async (fileName: string) => {\n    if (window.confirm(`Are you sure you want to delete ${fileName}?`)) {\n      setProcessingAction({ type: 'deleting', fileName });\n      try {\n        const { data: { session } } = await supabase.auth.getSession();\n        if (!session?.user) {\n          toast.error(\"You must be logged in to delete CVs\");\n          return;\n        }\n\n        const success = await deleteCV(`${session.user.id}/${fileName}`);\n        if (success && onCvListUpdated) {\n          // If this was the default CV, clear the display URL\n          if (displayUrl && displayUrl.includes(fileName)) {\n            setDisplayUrl(null);\n          }\n          onCvListUpdated();\n        }\n      } finally {\n        setProcessingAction(null);\n      }\n    }\n  };\n\n  const handlePreview = async (fileName: string) => {\n    setProcessingAction({ type: 'previewing', fileName });\n    try {\n      await previewCV(`${fileName}`);\n    } finally {\n      setProcessingAction(null);\n    }\n  };\n\n  const handleSetDefault = async (fileName: string) => {\n    setProcessingAction({ type: 'setting-default', fileName });\n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session?.user) {\n        toast.error(\"You must be logged in to set default CV\");\n        return;\n      }\n\n      const newUrl = await setDefaultCV(session.user.id, fileName);\n      if (newUrl) {\n        setDisplayUrl(newUrl);\n        if (onCvListUpdated) {\n          onCvListUpdated();\n        }\n      }\n    } finally {\n      setProcessingAction(null);\n    }\n  };\n\n  return (\n    <Card>\n      <CVCardHeader />\n      <CardContent className=\"space-y-4\">\n        <div className=\"space-y-4\">\n          <DefaultCVDisplay \n            displayUrl={displayUrl} \n            onPreview={handlePreview} \n          />\n          \n          <CVUploadForm \n            cvUrl={cvUrl} \n            onUploadComplete={() => onCvListUpdated?.()}\n          />\n        </div>\n        \n        <CVLibrary \n          userCVs={userCVs}\n          processingAction={processingAction}\n          onSetDefault={handleSetDefault}\n          onPreview={handlePreview}\n          onDownload={handleDownload}\n          onDelete={handleDelete}\n        />\n        \n        <CVEmptyState displayUrl={displayUrl} userCVs={userCVs} />\n      </CardContent>\n    </Card>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/cv/CVUploadForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3020,3023],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3020,3023],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":182,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5593,5596],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5593,5596],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { FileUp, Loader2 } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { toast } from \"sonner\";\nimport { supabase } from \"@/lib/supabase\";\n\ninterface CVUploadFormProps {\n  cvUrl: string | null;\n  onUploadComplete: () => void;\n}\n\nexport const CVUploadForm = ({ cvUrl, onUploadComplete }: CVUploadFormProps) => {\n  const [file, setFile] = useState<File | null>(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [isUploading, setIsUploading] = useState(false);\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      const selectedFile = e.target.files[0];\n      // Accept PDF and Word documents\n      const validFileTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];\n      if (!validFileTypes.includes(selectedFile.type)) {\n        toast.error(\"Please upload a PDF or Word document (.doc, .docx)\");\n        return;\n      }\n      setFile(selectedFile);\n    }\n  };\n\n  // Helper function to simulate progress updates\n  const simulateProgress = () => {\n    // Reset progress\n    setUploadProgress(0);\n    \n    // Simulate progress updates\n    const interval = setInterval(() => {\n      setUploadProgress(prev => {\n        // Start slow, accelerate in the middle, then slow down approaching 90%\n        const increment = prev < 30 ? 5 : prev < 70 ? 10 : 2;\n        const newValue = Math.min(prev + increment, 90);\n        \n        // Stop at 90% - the final 10% will be set after upload completes\n        if (newValue >= 90) {\n          clearInterval(interval);\n        }\n        \n        return newValue;\n      });\n    }, 300);\n    \n    // Return the interval ID so it can be cleared\n    return interval;\n  };\n\n  const parseCV = async (userId: string, cvUrl: string) => {\n    try {\n      toast.info(\"Analysing your CV for skills and experience...\");\n      \n      console.log(\"Processing CV for parsing:\", cvUrl);\n      \n      // Create FormData with just the userId and cvUrl\n      const formData = new FormData();\n      formData.append('userId', userId);\n      formData.append('cvUrl', cvUrl);\n      \n      console.log(\"Calling parse-cv function with userId and cvUrl\");\n      \n      // Call the parse-cv function with userId and cvUrl\n      const { data, error } = await supabase.functions.invoke('parse-cv', {\n        body: formData\n      });\n      \n      if (error) {\n        console.error(\"CV parsing function error:\", error);\n        throw error;\n      }\n      \n      console.log(\"CV parsed successfully:\", data);\n      toast.success(\"CV analysed successfully! Your skills have been updated.\");\n      \n      // Refresh the page after a short delay to show the parsed data\n      setTimeout(() => {\n        window.location.reload();\n      }, 2000);\n      \n    } catch (error: any) {\n      console.error(\"Error parsing CV:\", error);\n      toast.error(\"Failed to analyse CV. Please try again later.\");\n    }\n  };\n\n  const uploadCV = async () => {\n    if (!file) {\n      toast.error(\"Please select a file to upload\");\n      return;\n    }\n    \n    try {\n      setIsUploading(true);\n      \n      // Start simulating progress updates\n      const progressInterval = simulateProgress();\n      \n      // Get the current user's ID\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session?.user) {\n        clearInterval(progressInterval);\n        toast.error(\"You must be logged in to upload a CV\");\n        return;\n      }\n      \n      const userId = session.user.id;\n      \n      // Set the file path to include the user ID as a folder\n      const filePath = `${userId}/${file.name}`;\n      \n      // Upload the file\n      const { data, error } = await supabase.storage\n        .from('cvs')\n        .upload(filePath, file, {\n          cacheControl: '3600',\n          upsert: true\n        });\n        \n      // Clear the progress simulation interval\n      clearInterval(progressInterval);\n        \n      if (error) {\n        throw error;\n      }\n      \n      // Set progress to 100% when upload is done\n      setUploadProgress(100);\n      \n      // Create a public URL for the uploaded file\n      const { data: publicUrlData } = supabase.storage\n        .from('cvs')\n        .getPublicUrl(filePath);\n        \n      const publicUrl = publicUrlData.publicUrl;\n      \n      // If this is the first CV, set it as default\n      if (!cvUrl) {\n        // Save the CV URL to the profile\n        await supabase\n          .from('profiles')\n          .update({ cv_url: publicUrl })\n          .eq('id', userId);\n          \n        // Check if we need to create a CV parsed data entry\n        const { data: existingData } = await supabase\n          .from('cv_parsed_data')\n          .select('*')\n          .eq('user_id', userId)\n          .maybeSingle();\n          \n        if (!existingData) {\n          await supabase\n            .from('cv_parsed_data')\n            .insert({\n              user_id: userId,\n              cv_url: publicUrl\n            });\n        } else {\n          await supabase\n            .from('cv_parsed_data')\n            .update({ cv_url: publicUrl })\n            .eq('user_id', userId);\n        }\n      }\n      \n      toast.success(\"CV uploaded successfully\");\n      \n      // Now trigger the CV parsing function\n      await parseCV(userId, publicUrl);\n      \n      onUploadComplete();\n      \n    } catch (error: any) {\n      console.error(\"Error uploading CV:\", error);\n      toast.error(error.message || \"Failed to upload CV\");\n    } finally {\n      setIsUploading(false);\n      setFile(null);\n      \n      // Reset the progress after a short delay\n      setTimeout(() => {\n        setUploadProgress(0);\n      }, 2000);\n      \n      // Reset the file input\n      const fileInput = document.getElementById('cv-upload') as HTMLInputElement;\n      if (fileInput) {\n        fileInput.value = '';\n      }\n    }\n  };\n\n  return (\n    <div>\n      <Label>Upload new CV</Label>\n      <div className=\"mt-2 flex items-end gap-3\">\n        <div className=\"flex-1\">\n          <input\n            id=\"cv-upload\"\n            type=\"file\"\n            className=\"block w-full text-sm text-slate-500\n              file:mr-4 file:py-2 file:px-4\n              file:rounded-md file:border-0\n              file:text-sm file:font-semibold\n              file:bg-primary file:text-primary-foreground\n              hover:file:bg-primary/90\"\n            onChange={handleFileChange}\n            accept=\"application/pdf, application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n          />\n        </div>\n        <Button \n          onClick={uploadCV} \n          disabled={!file || isUploading}\n          variant=\"secondary\"\n        >\n          {isUploading ? (\n            <>\n              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n              {uploadProgress}%\n            </>\n          ) : (\n            <>\n              <FileUp className=\"h-4 w-4 mr-2\" />\n              Upload\n            </>\n          )}\n        </Button>\n      </div>\n      \n      {/* Show progress bar when uploading */}\n      {isUploading && (\n        <div className=\"mt-2\">\n          <Progress value={uploadProgress} className=\"h-2\" />\n        </div>\n      )}\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/cv/DefaultCVDisplay.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1779,1782],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1779,1782],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Loader2, Check, ExternalLink } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { toast } from \"sonner\";\nimport { supabase } from \"@/lib/supabase\";\n\ninterface DefaultCVDisplayProps {\n  displayUrl: string | null;\n  onPreview: (fileName: string) => Promise<void>;\n}\n\nexport const DefaultCVDisplay = ({ displayUrl, onPreview }: DefaultCVDisplayProps) => {\n  const [isParsing, setIsParsing] = useState(false);\n  \n  if (!displayUrl) return null;\n  \n  const handleManualParse = async () => {\n    if (!displayUrl) {\n      toast.error(\"No CV available to analyse. Please upload a CV first.\");\n      return;\n    }\n    \n    try {\n      setIsParsing(true);\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session?.user) {\n        toast.error(\"You must be logged in to analyse your CV\");\n        return;\n      }\n      \n      toast.info(\"Analysing your CV for skills and experience...\");\n      \n      // Create FormData with just the userId and cvUrl\n      const formData = new FormData();\n      formData.append('userId', session.user.id);\n      formData.append('cvUrl', displayUrl);\n      \n      // Call the parse-cv function with userId and cvUrl\n      const { data, error } = await supabase.functions.invoke('parse-cv', {\n        body: formData\n      });\n      \n      if (error) {\n        console.error(\"CV parsing function error:\", error);\n        throw error;\n      }\n      \n      toast.success(\"CV analysed successfully! Your skills have been updated.\");\n      \n      // Refresh the page after a short delay to show the parsed data\n      setTimeout(() => {\n        window.location.reload();\n      }, 2000);\n      \n    } catch (error: any) {\n      console.error(\"Error parsing CV:\", error);\n      toast.error(\"Failed to analyse CV. Please try again later.\");\n    } finally {\n      setIsParsing(false);\n    }\n  };\n\n  return (\n    <div>\n      <Label className=\"text-muted-foreground\">Default CV</Label>\n      <div className=\"flex items-center justify-between mt-2\">\n        <p className=\"text-sm truncate max-w-[250px]\">{displayUrl.split('/').pop()}</p>\n        <div className=\"flex gap-2\">\n          <Button \n            variant=\"outline\" \n            onClick={handleManualParse} \n            disabled={isParsing}\n          >\n            {isParsing ? (\n              <>\n                <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                Analysing...\n              </>\n            ) : (\n              <>\n                <Check className=\"h-4 w-4 mr-2\" />\n                Analyse CV\n              </>\n            )}\n          </Button>\n          <Button \n            variant=\"outline\" \n            onClick={() => onPreview(displayUrl.split('/').pop() || '')}\n          >\n            <ExternalLink className=\"h-4 w-4 mr-2\" />\n            View CV\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/DashboardContent.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[457,460],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[457,460],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { Tabs, TabsContent } from \"@/components/ui/tabs\";\nimport { ProfileSection } from \"../ProfileSection\";\nimport { ApplicationsTab } from \"./tabs/ApplicationsTab\";\nimport { OpportunitiesTab } from \"./OpportunitiesTab\";\nimport { EquityTab } from \"./EquityTab\";\nimport { useState } from \"react\";\nimport { TicketsList } from \"@/components/job-seeker/dashboard/tickets/TicketsList\";\n\ninterface DashboardContentProps {\n  activeTab: string;\n  dashboardData: any;\n  refreshApplications: () => void;\n}\n\nexport const DashboardContent = ({ \n  activeTab, \n  dashboardData,\n  refreshApplications\n}: DashboardContentProps) => {\n  return (\n    <div className=\"container mx-auto p-4 md:p-6 overflow-container dashboard-container\">\n      <Tabs defaultValue={activeTab} className=\"w-full\">\n        <TabsContent value=\"profile\" className=\"space-y-6\">\n          <ProfileSection \n            profile={dashboardData.profile} \n            cvUrl={dashboardData.cvUrl}\n            parsedCvData={dashboardData.parsedCvData}\n            setCvUrl={dashboardData.setCvUrl}\n            setParsedCvData={dashboardData.setParsedCvData}\n            skills={dashboardData.skills}\n            onSkillsUpdate={dashboardData.handleSkillsUpdate}\n            userCVs={dashboardData.userCVs}\n            onCvListUpdated={dashboardData.onCvListUpdated}\n          />\n        </TabsContent>\n        \n        <TabsContent value=\"applications\" className=\"space-y-6\">\n          <ApplicationsTab \n            applications={dashboardData.applications}\n            onApplicationUpdated={refreshApplications}\n          />\n        </TabsContent>\n        \n        <TabsContent value=\"opportunities\" className=\"space-y-6\">\n          <OpportunitiesTab \n            projects={dashboardData.availableOpportunities}\n            userSkills={dashboardData.skills || []}\n          />\n        </TabsContent>\n        \n        <TabsContent value=\"equity\" className=\"space-y-6\">\n          <EquityTab \n            equityProjects={dashboardData.equityProjects}\n            logEffort={dashboardData.logEffort}\n            onLogEffort={dashboardData.onLogEffort}\n            onLogEffortChange={dashboardData.onLogEffortChange}\n          />\n        </TabsContent>\n        \n        <TabsContent value=\"tickets\" className=\"space-y-6\">\n          <TicketsList \n            userTickets={dashboardData.userTickets || []}\n            ticketMessages={dashboardData.ticketMessages || []}\n            onTicketAction={dashboardData.onTicketAction || (() => {})}\n          />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/DashboardHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/DashboardHeaderWithActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/DashboardSkeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/DashboardTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/EquityTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2190,2193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2190,2193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState, useEffect } from \"react\";\nimport { Card, CardHeader, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { EquityProject, LogEffort } from \"@/types/jobSeeker\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { supabase } from \"@/lib/supabase\";\nimport { toast } from \"sonner\";\nimport { TimeTracker } from \"@/components/job-seeker/dashboard/TimeTracker\";\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from \"@/components/ui/tabs\";\nimport { Clock, FileText, ArrowUpToLine, Plus } from \"lucide-react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface EquityTabProps {\n  equityProjects?: EquityProject[];\n  logEffort?: LogEffort;\n  onLogEffort?: (projectId: string) => void;\n  onLogEffortChange?: (projectId: string, field: 'hours' | 'description', value: string | number) => void;\n}\n\nexport const EquityTab = ({ \n  equityProjects = [],\n  logEffort,\n  onLogEffort = () => {},\n  onLogEffortChange = () => {}\n}: EquityTabProps) => {\n  const [selectedProject, setSelectedProject] = useState<EquityProject | null>(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [isUploadDialogOpen, setIsUploadDialogOpen] = useState(false);\n  const [isCreateTicketDialogOpen, setIsCreateTicketDialogOpen] = useState(false);\n  const [hours, setHours] = useState<number>(0);\n  const [description, setDescription] = useState<string>('');\n  const [userId, setUserId] = useState<string>('');\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedTaskId, setSelectedTaskId] = useState<string | null>(null);\n  const [ticketTitle, setTicketTitle] = useState('');\n  const [ticketDescription, setTicketDescription] = useState('');\n  const [ticketPriority, setTicketPriority] = useState('medium');\n  const [projectTickets, setProjectTickets] = useState<{ [key: string]: any[] }>({});\n\n  useEffect(() => {\n    const getUser = async () => {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (session) {\n        setUserId(session.user.id);\n      }\n      setIsLoading(false);\n    };\n    \n    getUser();\n  }, []);\n\n  useEffect(() => {\n    if (equityProjects.length > 0) {\n      equityProjects.forEach(project => {\n        fetchProjectTickets(project.id);\n      });\n    }\n  }, [equityProjects]);\n\n  const fetchProjectTickets = async (projectId: string) => {\n    try {\n      const { data, error } = await supabase\n        .from('tickets')\n        .select('*')\n        .eq('project_id', projectId);\n\n      if (error) throw error;\n      \n      setProjectTickets(prev => ({\n        ...prev,\n        [projectId]: data || []\n      }));\n    } catch (error) {\n      console.error('Error fetching project tickets:', error);\n    }\n  };\n\n  const handleLogEffort = async () => {\n    if (!selectedProject || !selectedTaskId) return;\n    \n    try {\n      const today = new Date().toISOString().split('T')[0];\n      \n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) {\n        toast.error(\"You must be logged in to log effort\");\n        return;\n      }\n      \n      const { error } = await supabase\n        .from('time_entries')\n        .insert({\n          ticket_id: selectedTaskId,\n          user_id: session.user.id,\n          description: description,\n          start_time: new Date().toISOString(),\n          end_time: new Date(new Date().getTime() + hours * 60 * 60 * 1000).toISOString(),\n          hours_logged: hours\n        });\n        \n      if (error) throw error;\n      \n      toast.success(\"Time logged successfully\");\n      setIsDialogOpen(false);\n      setHours(0);\n      setDescription('');\n      \n      fetchProjectTickets(selectedProject.id);\n    } catch (error) {\n      console.error('Error logging effort:', error);\n      toast.error(\"Failed to log effort\");\n    }\n  };\n\n  const handleCreateTicket = async () => {\n    if (!selectedProject || !selectedTaskId) {\n      toast.error(\"Please select a project and task first\");\n      return;\n    }\n\n    try {\n      const { data, error } = await supabase\n        .from('tickets')\n        .insert({\n          title: ticketTitle,\n          description: ticketDescription,\n          status: 'todo',\n          priority: ticketPriority,\n          health: 'green',\n          project_id: selectedProject.id,\n          task_id: selectedTaskId,\n          reporter: userId,\n          assigned_to: userId,\n          ticket_type: 'task'\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n      \n      toast.success(\"Ticket created successfully\");\n      setIsCreateTicketDialogOpen(false);\n      setTicketTitle('');\n      setTicketDescription('');\n      setTicketPriority('medium');\n      \n      fetchProjectTickets(selectedProject.id);\n    } catch (error) {\n      console.error('Error creating ticket:', error);\n      toast.error(\"Failed to create ticket\");\n    }\n  };\n\n  return (\n    <>\n      <Card>\n        <CardHeader>\n          <h2 className=\"text-lg font-semibold\">Current Equity Projects</h2>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {equityProjects.length === 0 && (\n              <p className=\"text-muted-foreground\">No active equity projects.</p>\n            )}\n            \n            {equityProjects.map((project) => (\n              <div key={project.id} className=\"border p-4 rounded-lg\">\n                <div className=\"flex justify-between\">\n                  <h3 className=\"text-lg font-medium\">{project.title}</h3>\n                  <Badge>{project.status}</Badge>\n                </div>\n                \n                <div className=\"mt-4 grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Equity Allocation</p>\n                    <p className=\"font-medium\">{project.equity_amount}%</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Time Frame</p>\n                    <p className=\"font-medium\">{project.time_allocated}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Hours Logged</p>\n                    <p className=\"font-medium\">{project.total_hours_logged || 0} hours</p>\n                  </div>\n                </div>\n                \n                <div className=\"mt-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <p className=\"text-sm text-muted-foreground\">Tasks</p>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setSelectedProject(project);\n                        setIsCreateTicketDialogOpen(true);\n                      }}\n                    >\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Create Ticket\n                    </Button>\n                  </div>\n                  \n                  <div className=\"mt-2 space-y-2\">\n                    {project.sub_tasks?.map((task) => (\n                      <div key={task.task_id} className=\"text-sm p-3 bg-secondary/50 rounded-md\">\n                        <div className=\"flex justify-between\">\n                          <p className=\"font-medium\">{task.title}</p>\n                          <span>{task.completion_percentage}% complete</span>\n                        </div>\n                        <p className=\"text-muted-foreground mt-1\">{task.description}</p>\n                        \n                        {projectTickets[project.id]?.filter(ticket => ticket.task_id === task.task_id).length > 0 && (\n                          <div className=\"mt-3 space-y-2\">\n                            <p className=\"text-xs font-medium\">Tickets:</p>\n                            {projectTickets[project.id]\n                              .filter(ticket => ticket.task_id === task.task_id)\n                              .map(ticket => (\n                                <div key={ticket.id} className=\"bg-background rounded p-2 text-xs flex justify-between items-center\">\n                                  <div>\n                                    <p className=\"font-medium\">{ticket.title}</p>\n                                    <p className=\"text-muted-foreground\">{ticket.status} - {ticket.priority} priority</p>\n                                  </div>\n                                  <div className=\"flex gap-2\">\n                                    <Button \n                                      variant=\"ghost\" \n                                      size=\"sm\"\n                                      onClick={() => {\n                                        setSelectedProject(project);\n                                        setSelectedTaskId(ticket.id);\n                                        setIsDialogOpen(true);\n                                      }}\n                                    >\n                                      <Clock className=\"h-3 w-3\" />\n                                    </Button>\n                                  </div>\n                                </div>\n                              ))}\n                          </div>\n                        )}\n                        \n                        <div className=\"flex mt-3 gap-2\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedProject(project);\n                              setSelectedTaskId(task.task_id);\n                              setIsCreateTicketDialogOpen(true);\n                            }}\n                            className=\"flex items-center\"\n                          >\n                            <Plus className=\"h-4 w-4 mr-2\" />\n                            Add Ticket\n                          </Button>\n                          \n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedProject(project);\n                              setSelectedTaskId(task.task_id);\n                              setIsUploadDialogOpen(true);\n                            }}\n                            className=\"flex items-center\"\n                          >\n                            <ArrowUpToLine className=\"h-4 w-4 mr-2\" />\n                            Upload Document\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n                \n                {selectedTaskId && selectedTaskId === project.id && (\n                  <div className=\"mt-6 border-t pt-4\">\n                    <Tabs defaultValue=\"timeTracking\">\n                      <TabsList>\n                        <TabsTrigger value=\"timeTracking\">Time Tracker</TabsTrigger>\n                        <TabsTrigger value=\"documents\">Documents</TabsTrigger>\n                      </TabsList>\n                      \n                      <TabsContent value=\"timeTracking\">\n                        <TimeTracker ticketId={selectedTaskId} userId={userId} />\n                      </TabsContent>\n                      \n                      <TabsContent value=\"documents\">\n                        <p>Document management will appear here</p>\n                      </TabsContent>\n                    </Tabs>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Log Time</DialogTitle>\n            <DialogDescription>\n              Record the time you've spent working on {selectedProject?.title}\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"hours\">Hours Worked</Label>\n              <Input\n                id=\"hours\"\n                type=\"number\"\n                min=\"0\"\n                step=\"0.5\"\n                value={hours}\n                onChange={(e) => setHours(parseFloat(e.target.value) || 0)}\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description of Work</Label>\n              <Textarea\n                id=\"description\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n                placeholder=\"Describe what you accomplished during this time\"\n              />\n            </div>\n          </div>\n          \n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsDialogOpen(false)}>Cancel</Button>\n            <Button onClick={handleLogEffort}>Log Hours</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n      \n      <Dialog open={isCreateTicketDialogOpen} onOpenChange={setIsCreateTicketDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Create Ticket</DialogTitle>\n            <DialogDescription>\n              Create a new ticket for {selectedProject?.title}\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"ticketTitle\">Ticket Title</Label>\n              <Input\n                id=\"ticketTitle\"\n                value={ticketTitle}\n                onChange={(e) => setTicketTitle(e.target.value)}\n                placeholder=\"Enter ticket title\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"ticketDescription\">Description</Label>\n              <Textarea\n                id=\"ticketDescription\"\n                value={ticketDescription}\n                onChange={(e) => setTicketDescription(e.target.value)}\n                placeholder=\"Describe what needs to be done\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"ticketPriority\">Priority</Label>\n              <Select value={ticketPriority} onValueChange={setTicketPriority}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select priority\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"low\">Low</SelectItem>\n                  <SelectItem value=\"medium\">Medium</SelectItem>\n                  <SelectItem value=\"high\">High</SelectItem>\n                  <SelectItem value=\"urgent\">Urgent</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {selectedProject?.sub_tasks && selectedProject.sub_tasks.length > 0 && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"taskId\">Associated Task</Label>\n                <Select \n                  value={selectedTaskId || ''} \n                  onValueChange={(value) => setSelectedTaskId(value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select task\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {selectedProject.sub_tasks.map(task => (\n                      <SelectItem key={task.task_id} value={task.task_id}>\n                        {task.title}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n          </div>\n          \n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsCreateTicketDialogOpen(false)}>Cancel</Button>\n            <Button onClick={handleCreateTicket}>Create Ticket</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n      \n      <Dialog open={isUploadDialogOpen} onOpenChange={setIsUploadDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Upload Document</DialogTitle>\n            <DialogDescription>\n              Upload a document related to your work on {selectedProject?.title}\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"documentTitle\">Document Title</Label>\n              <Input id=\"documentTitle\" placeholder=\"Enter document title\" />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"documentDescription\">Description</Label>\n              <Textarea\n                id=\"documentDescription\"\n                placeholder=\"Describe this document\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"documentFile\">File</Label>\n              <Input id=\"documentFile\" type=\"file\" />\n            </div>\n          </div>\n          \n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsUploadDialogOpen(false)}>Cancel</Button>\n            <Button>Upload Document</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n};\n\nconst TicketActions = ({ project, task, onCreateTicket }) => {\n  const [isCreatingTicket, setIsCreatingTicket] = useState(false);\n  const [tickets, setTickets] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (task?.task_id) {\n      fetchTickets(task.task_id);\n    }\n  }, [task]);\n\n  const fetchTickets = async (taskId) => {\n    setLoading(true);\n    try {\n      const { data, error } = await supabase\n        .from('tickets')\n        .select('*')\n        .eq('task_id', taskId);\n\n      if (error) throw error;\n      setTickets(data || []);\n    } catch (error) {\n      console.error('Error fetching tickets:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"flex justify-between items-center\">\n        <h4 className=\"text-sm font-medium\">Tickets</h4>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => {\n            onCreateTicket(project, task);\n          }}\n        >\n          Create Ticket\n        </Button>\n      </div>\n      \n      {loading ? (\n        <div className=\"text-center py-2\">\n          <span className=\"text-sm text-muted-foreground\">Loading tickets...</span>\n        </div>\n      ) : tickets.length === 0 ? (\n        <div className=\"rounded-md border p-4 text-center\">\n          <p className=\"text-sm text-muted-foreground\">No tickets found for this task.</p>\n          <p className=\"text-sm mt-1\">Create a ticket to track your work.</p>\n        </div>\n      ) : (\n        <div className=\"space-y-2 mt-2\">\n          {tickets.map(ticket => (\n            <div key={ticket.id} className=\"border rounded-md p-3\">\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <h5 className=\"font-medium\">{ticket.title}</h5>\n                  <div className=\"flex items-center gap-2 mt-1\">\n                    <Badge variant={\n                      ticket.status === 'done' ? 'default' :\n                      ticket.status === 'in_progress' ? 'secondary' :\n                      'outline'\n                    }>\n                      {ticket.status}\n                    </Badge>\n                    {ticket.priority && (\n                      <Badge variant={\n                        ticket.priority === 'high' ? 'destructive' :\n                        ticket.priority === 'medium' ? 'secondary' :\n                        'outline'\n                      }>\n                        {ticket.priority}\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  {ticket.due_date && (\n                    <div>Due: {new Date(ticket.due_date).toLocaleDateString()}</div>\n                  )}\n                  {ticket.estimated_hours && (\n                    <div>Est: {ticket.estimated_hours}h</div>\n                  )}\n                </div>\n              </div>\n              {ticket.description && (\n                <p className=\"text-sm text-muted-foreground mt-2 line-clamp-2\">\n                  {ticket.description}\n                </p>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/OpportunitiesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/SkillBadge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/TaskCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/TimeLogDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/TimeTracker.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[750,753],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[750,753],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":95,"column":7,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":95,"endColumn":57,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[2716,2766],"text":"// @ts-expect-error - Safe to ignore as we will clean up"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":125,"column":7,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":125,"endColumn":72,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[3592,3657],"text":"// @ts-expect-error - Safe to ignore as we just need to clear the timer"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":176,"column":7,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":176,"endColumn":72,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[5223,5288],"text":"// @ts-expect-error - Safe to ignore as we just need to clear the timer"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":178,"column":9,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":178,"endColumn":22,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[5334,5347],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { supabase } from \"@/lib/supabase\";\nimport { Loader2, Clock, Calendar } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\ninterface TimeTrackerProps {\n  ticketId: string;\n  userId: string;\n  jobAppId?: string;\n}\n\nexport const TimeTracker: React.FC<TimeTrackerProps> = ({ \n  ticketId, \n  userId,\n  jobAppId \n}) => {\n  const [isTracking, setIsTracking] = useState(false);\n  const [startTime, setStartTime] = useState<Date | null>(null);\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [description, setDescription] = useState(\"\");\n  const [timeEntries, setTimeEntries] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [totalHours, setTotalHours] = useState(0);\n  const [timeEntryId, setTimeEntryId] = useState<string | null>(null);\n\n  // Fetch existing time entries for this ticket\n  useEffect(() => {\n    const fetchTimeEntries = async () => {\n      setLoading(true);\n      try {\n        const { data, error } = await supabase\n          .from('time_entries')\n          .select('*')\n          .eq('ticket_id', ticketId)\n          .eq('user_id', userId)\n          .order('created_at', { ascending: false });\n          \n        if (error) throw error;\n        \n        setTimeEntries(data || []);\n        \n        // Calculate total hours\n        const total = (data || []).reduce((sum, entry) => sum + (entry.hours_logged || 0), 0);\n        setTotalHours(total);\n      } catch (error) {\n        console.error('Error fetching time entries:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    if (ticketId && userId) {\n      fetchTimeEntries();\n    }\n    \n    return () => {\n      // Clean up if necessary\n    };\n  }, [ticketId, userId]);\n\n  // Start time tracking\n  const startTracking = async () => {\n    const now = new Date();\n    setStartTime(now);\n    setIsTracking(true);\n    \n    try {\n      // Create initial time entry\n      const { data, error } = await supabase\n        .from('time_entries')\n        .insert({\n          ticket_id: ticketId,\n          user_id: userId,\n          job_app_id: jobAppId,\n          start_time: now.toISOString(),\n          description: description || \"Work in progress...\"\n        })\n        .select()\n        .single();\n        \n      if (error) throw error;\n      \n      setTimeEntryId(data.id);\n      \n      // Start timer\n      const timer = setInterval(() => {\n        const currentTime = new Date();\n        const elapsed = Math.floor((currentTime.getTime() - now.getTime()) / 1000);\n        setElapsedTime(elapsed);\n      }, 1000);\n      \n      // @ts-ignore - Safe to ignore as we will clean up\n      window.timeTrackerTimer = timer;\n      \n      toast.success(\"Time tracking started\");\n    } catch (error) {\n      setIsTracking(false);\n      setStartTime(null);\n      console.error('Error starting time tracking:', error);\n      toast.error(\"Failed to start time tracking\");\n    }\n  };\n\n  // Stop time tracking\n  const stopTracking = async () => {\n    if (!isTracking || !startTime || !timeEntryId) return;\n    \n    try {\n      const endTime = new Date();\n      const hours = (endTime.getTime() - startTime.getTime()) / (1000 * 60 * 60);\n      \n      await supabase\n        .from('time_entries')\n        .update({\n          end_time: endTime.toISOString(),\n          hours_logged: hours,\n          description: description || \"Completed work\"\n        })\n        .eq('id', timeEntryId);\n      \n      // Stop timer\n      // @ts-ignore - Safe to ignore as we just need to clear the timer\n      clearInterval(window.timeTrackerTimer);\n      \n      // Reset state\n      setIsTracking(false);\n      setStartTime(null);\n      setElapsedTime(0);\n      setTimeEntryId(null);\n      \n      // Refresh time entries\n      const { data, error } = await supabase\n        .from('time_entries')\n        .select('*')\n        .eq('ticket_id', ticketId)\n        .eq('user_id', userId)\n        .order('created_at', { ascending: false });\n        \n      if (error) throw error;\n      \n      setTimeEntries(data || []);\n      \n      // Update total hours\n      const total = (data || []).reduce((sum, entry) => sum + (entry.hours_logged || 0), 0);\n      setTotalHours(total);\n      \n      setDescription(\"\");\n      toast.success(\"Time tracking stopped successfully\");\n    } catch (error) {\n      console.error('Error stopping time tracking:', error);\n      toast.error(\"Failed to stop time tracking\");\n    }\n  };\n\n  // Format time as HH:MM:SS\n  const formatTime = (seconds: number) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = Math.floor(seconds % 60);\n    \n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Format date for display\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  };\n\n  // Clean up on unmount\n  useEffect(() => {\n    return () => {\n      // @ts-ignore - Safe to ignore as we just need to clear the timer\n      if (window.timeTrackerTimer) {\n        // @ts-ignore\n        clearInterval(window.timeTrackerTimer);\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between\">\n        <h3 className=\"text-lg font-medium\">Time Tracker</h3>\n        <div className=\"text-sm font-medium\">\n          Total Hours: <span className=\"text-primary\">{totalHours.toFixed(2)}</span>\n        </div>\n      </div>\n      \n      {loading ? (\n        <div className=\"flex justify-center py-4\">\n          <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n          <span>Loading time entries...</span>\n        </div>\n      ) : (\n        <>\n          <div className=\"border rounded-md p-4\">\n            <h4 className=\"font-medium mb-2\">\n              {isTracking ? \"Currently Tracking\" : \"Start New Session\"}\n            </h4>\n            \n            <Textarea\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              placeholder=\"What are you working on?\"\n              className=\"mb-4\"\n            />\n            \n            {isTracking ? (\n              <div className=\"space-y-4\">\n                <div className=\"text-2xl font-mono text-center\">\n                  {formatTime(elapsedTime)}\n                </div>\n                <Button \n                  variant=\"destructive\" \n                  className=\"w-full\" \n                  onClick={stopTracking}\n                >\n                  <Clock className=\"h-4 w-4 mr-2\" />\n                  Stop Tracking\n                </Button>\n              </div>\n            ) : (\n              <Button \n                className=\"w-full\" \n                onClick={startTracking}\n              >\n                <Clock className=\"h-4 w-4 mr-2\" />\n                Start Tracking\n              </Button>\n            )}\n          </div>\n          \n          <div>\n            <h4 className=\"font-medium mb-2\">Time Entry History</h4>\n            {timeEntries.length > 0 ? (\n              <div className=\"space-y-2 max-h-60 overflow-y-auto border rounded-md p-2\">\n                {timeEntries.map((entry) => (\n                  <div key={entry.id} className=\"border p-2 rounded-md\">\n                    <div className=\"flex justify-between items-center\">\n                      <div className=\"font-medium\">{parseFloat(entry.hours_logged || 0).toFixed(2)} hours</div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        <Calendar className=\"h-3 w-3 inline mr-1\" />\n                        {formatDate(entry.created_at)}\n                      </div>\n                    </div>\n                    <p className=\"text-sm mt-1\">{entry.description}</p>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p className=\"text-sm text-muted-foreground p-2\">No time entries yet.</p>\n            )}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/AcceptJobDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/ApplicationContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/ApplicationHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/ApplicationItem.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":4,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":7,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1162,1165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1162,1165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState } from 'react';\nimport { JobApplication } from '@/types/applications';\nimport { CreateMessageDialog } from './CreateMessageDialog';\nimport { WithdrawDialog } from './WithdrawDialog';\nimport { useWithdrawApplication } from './hooks/useWithdrawApplication';\nimport { useApplicationActions } from './hooks/useApplicationActions';\nimport { supabase } from '@/lib/supabase';\nimport { toast } from 'sonner';\nimport { useAcceptedJobs } from '@/hooks/useAcceptedJobs';\nimport { AcceptJobDialog } from './AcceptJobDialog';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { ChevronDown, ChevronUp, MessageSquare } from 'lucide-react';\nimport { StatusBadge } from './StatusBadge';\nimport { formatDistanceToNow } from 'date-fns';\nimport { ApplicationItemContentProps } from '@/types/dashboardProps';\nimport { convertApplicationToJobApplication } from '@/utils/applicationUtils';\n\n// Simple components for structure\nconst ApplicationItemHeader = ({ \n  title, \n  company, \n  project, \n  status, \n  isExpanded, \n  toggleExpand,\n  onStatusChange,\n  isUpdatingStatus,\n  showAcceptButton,\n  onAcceptClick\n}: any) => (\n  <div className=\"p-4 flex justify-between items-center border-b\">\n    <div className=\"flex-1\">\n      <h3 className=\"font-medium text-base\">{title}</h3>\n      <p className=\"text-sm text-muted-foreground\">\n        {company}\n        {project && ` • ${project}`}\n      </p>\n    </div>\n    <div className=\"flex items-center gap-2\">\n      <StatusBadge status={status} isUpdating={isUpdatingStatus} />\n      {showAcceptButton && (\n        <Button \n          size=\"sm\" \n          onClick={(e) => {\n            e.stopPropagation();\n            onAcceptClick();\n          }}\n        >\n          Accept\n        </Button>\n      )}\n      <Button \n        variant=\"ghost\" \n        size=\"sm\" \n        className=\"p-1\" \n        onClick={toggleExpand}\n      >\n        {isExpanded ? <ChevronUp /> : <ChevronDown />}\n      </Button>\n    </div>\n  </div>\n);\n\nconst ApplicationItemContent = ({ \n  description, \n  message, \n  discourse, \n  appliedAt\n}: ApplicationItemContentProps) => (\n  <div className=\"p-4 space-y-4\">\n    {description && (\n      <div>\n        <h4 className=\"text-sm font-medium mb-1\">Role Description</h4>\n        <p className=\"text-sm text-muted-foreground\">{description}</p>\n      </div>\n    )}\n    \n    {message && (\n      <div>\n        <h4 className=\"text-sm font-medium mb-1\">Your Message</h4>\n        <p className=\"text-sm text-muted-foreground\">{message}</p>\n      </div>\n    )}\n    \n    {discourse && (\n      <div>\n        <h4 className=\"text-sm font-medium mb-1\">Message History</h4>\n        <div className=\"bg-muted/30 p-3 rounded-md text-sm whitespace-pre-wrap\">\n          {discourse}\n        </div>\n      </div>\n    )}\n    \n    <div className=\"text-xs text-muted-foreground\">\n      Applied {formatDistanceToNow(new Date(appliedAt || Date.now()), { addSuffix: true })}\n    </div>\n  </div>\n);\n\ninterface ApplicationItemProps {\n  application: JobApplication;\n  onApplicationUpdated?: () => void;\n  compact?: boolean;\n}\n\nexport const ApplicationItem = ({ application, onApplicationUpdated, compact = false }: ApplicationItemProps) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [isCreateMessageOpen, setIsCreateMessageOpen] = useState(false);\n  const [isAcceptJobDialogOpen, setIsAcceptJobDialogOpen] = useState(false);\n  const [statusDialogOpen, setStatusDialogOpen] = useState(false);\n  const [selectedStatus, setSelectedStatus] = useState(application.status);\n  \n  // Ensure we have a valid ID for our application\n  const applicationId = application.job_app_id || application.id || `app-${Math.random()}`;\n  \n  const { \n    isWithdrawDialogOpen, \n    setIsWithdrawDialogOpen,\n    handleWithdrawApplication \n  } = useWithdrawApplication(onApplicationUpdated);\n  \n  const { \n    isUpdatingStatus, \n    updateApplicationStatus \n  } = useApplicationActions(onApplicationUpdated);\n  \n  const {\n    acceptJobAsJobSeeker,\n    isLoading: isAcceptingJob\n  } = useAcceptedJobs(onApplicationUpdated);\n\n  const toggleExpand = () => {\n    setIsExpanded(!isExpanded);\n  };\n\n  const handleWithdraw = async (reason?: string) => {\n    await handleWithdrawApplication(applicationId, reason);\n    return Promise.resolve();\n  };\n  \n  const handleMessageSubmit = async (message: string) => {\n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) {\n        toast.error(\"You must be logged in to send messages\");\n        return;\n      }\n\n      // Get existing discourse\n      const { data: applicationData, error: fetchError } = await supabase\n        .from('job_applications')\n        .select('task_discourse')\n        .eq('job_app_id', applicationId)\n        .single();\n\n      if (fetchError) throw fetchError;\n\n      // Format the message with timestamp and sender\n      const timestamp = new Date().toLocaleString();\n      const formattedMessage = `[${timestamp}] Job Seeker: ${message}`;\n\n      // Append to existing discourse or create new\n      const updatedDiscourse = applicationData?.task_discourse\n        ? `${applicationData.task_discourse}\\n\\n${formattedMessage}`\n        : formattedMessage;\n\n      // Update the application with the new discourse\n      const { error: updateError } = await supabase\n        .from('job_applications')\n        .update({ task_discourse: updatedDiscourse })\n        .eq('job_app_id', applicationId);\n\n      if (updateError) throw updateError;\n\n      toast.success(\"Message sent successfully\");\n      \n      if (onApplicationUpdated) {\n        onApplicationUpdated();\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n      toast.error(\"Failed to send message\");\n    }\n  };\n  \n  const handleStatusChange = (status: string) => {\n    if (status === 'withdrawn') {\n      setIsWithdrawDialogOpen(true);\n      return;\n    }\n    \n    setSelectedStatus(status);\n    setStatusDialogOpen(true);\n  };\n  \n  const confirmStatusChange = async () => {\n    await updateApplicationStatus(applicationId, selectedStatus);\n    setStatusDialogOpen(false);\n  };\n  \n  const handleAcceptJob = async () => {\n    // Convert application to jobSeeker.JobApplication if it's not already\n    const jobSeekerApplication = application;\n    \n    await acceptJobAsJobSeeker(jobSeekerApplication);\n    if (onApplicationUpdated) onApplicationUpdated();\n  };\n  \n  const showAcceptButton = application.status === 'accepted' && !application.accepted_jobseeker;\n\n  // Get title from either direct property or business_roles\n  const taskTitle = application.task_title || \n                   (application.business_roles?.title || \"Untitled Task\");\n                   \n  const companyName = application.company_name || \n                     (application.business_roles?.company_name || 'Company');\n                     \n  const projectTitle = application.project_title || \n                      (application.business_roles?.project_title || 'Project');\n  \n  const description = application.description || application.business_roles?.description || \"\";\n  \n  // If applied_at is missing, use created_at or current date\n  const appliedAt = application.applied_at || application.created_at || new Date().toISOString();\n\n  return (\n    <div className=\"border rounded-md overflow-hidden bg-card dashboard-card\">\n      {/* Application Header Section */}\n      <ApplicationItemHeader\n        title={taskTitle}\n        company={companyName}\n        project={projectTitle}\n        status={application.status}\n        isExpanded={isExpanded}\n        toggleExpand={toggleExpand}\n        onStatusChange={handleStatusChange}\n        isUpdatingStatus={isUpdatingStatus === applicationId}\n        showAcceptButton={showAcceptButton}\n        onAcceptClick={() => setIsAcceptJobDialogOpen(true)}\n      />\n      \n      {/* Application Content Section - shown when expanded */}\n      {isExpanded && (\n        <ApplicationItemContent\n          description={description}\n          message={application.message || \"\"}\n          discourse={application.task_discourse || \"\"}\n          appliedAt={appliedAt}\n        />\n      )}\n      \n      {/* Action Footer - always shown */}\n      <div className=\"p-3 flex justify-end border-t bg-muted/30\">\n        <Button \n          variant=\"outline\" \n          size=\"sm\"\n          onClick={() => setIsCreateMessageOpen(true)}\n          className=\"flex items-center gap-1\"\n        >\n          <MessageSquare className=\"h-4 w-4\" />\n          Send Message\n        </Button>\n      </div>\n      \n      {/* Dialog components */}\n      <CreateMessageDialog\n        isOpen={isCreateMessageOpen}\n        onOpenChange={setIsCreateMessageOpen}\n        onSendMessage={handleMessageSubmit}\n        applicationId={applicationId}\n      />\n      \n      <WithdrawDialog \n        isOpen={isWithdrawDialogOpen}\n        onOpenChange={setIsWithdrawDialogOpen}\n        onWithdraw={handleWithdraw}\n      />\n      \n      <AcceptJobDialog\n        isOpen={isAcceptJobDialogOpen}\n        onOpenChange={setIsAcceptJobDialogOpen}\n        application={application}\n        onAccept={handleAcceptJob}\n        isLoading={isAcceptingJob}\n      />\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/ApplicationSkills.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/ApplicationsList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/ApplicationsTabBase.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1630,1633],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1630,1633],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":93,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3659,3662],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3659,3662],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useMemo, useCallback, useRef } from \"react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { InfoIcon } from \"lucide-react\";\nimport { JobApplication } from \"@/types/jobSeeker\";\nimport { ApplicationsList } from \"./ApplicationsList\";\nimport { PendingApplicationsList } from \"./PendingApplicationsList\";\nimport { PastApplicationsList } from \"./PastApplicationsList\";\nimport { EquityProjectsList } from \"./EquityProjectsList\";\nimport { useApplicationActions } from \"./hooks/useApplicationActions\";\nimport { useWithdrawApplication } from \"./hooks/useWithdrawApplication\";\nimport { useAcceptedJobs } from \"@/hooks/useAcceptedJobs\";\nimport { supabase } from \"@/lib/supabase\";\n\ninterface ApplicationsTabBaseProps {\n  applications: JobApplication[];\n  onApplicationUpdated: () => void;\n  newMessagesCount?: number;\n}\n\nexport const ApplicationsTabBase = ({\n  applications,\n  onApplicationUpdated,\n  newMessagesCount\n}: ApplicationsTabBaseProps) => {\n  const [activeTab, setActiveTab] = useState<string>(\"pending\");\n  const { isUpdatingStatus, updateApplicationStatus } = useApplicationActions(onApplicationUpdated);\n  const { isWithdrawing, handleWithdrawApplication } = useWithdrawApplication(onApplicationUpdated);\n  const { acceptJobAsJobSeeker, isLoading: isAcceptingJob } = useAcceptedJobs(onApplicationUpdated);\n  \n  // 🔧 FIX: Use a more stable approach for equity data\n  const [equityDataMap, setEquityDataMap] = useState<Record<string, any>>({});\n  const [isLoadingEquityData, setIsLoadingEquityData] = useState(false);\n  const lastFetchedAppsRef = useRef<string>('');\n  const equityDataTimeoutRef = useRef<NodeJS.Timeout>();\n\n  // 🔧 FIX: Create a stable hash of applications to prevent unnecessary fetches\n  const applicationsHash = useMemo(() => {\n    return applications\n      .map(app => `${app.job_app_id}-${app.status}-${app.accepted_business}-${app.accepted_jobseeker}`)\n      .sort() // Sort to ensure consistent ordering\n      .join('|');\n  }, [applications]);\n\n  // 🔧 FIX: Debounced equity data fetching\n  const fetchEquityData = useCallback(async (apps: JobApplication[]) => {\n    if (apps.length === 0) {\n      setEquityDataMap({});\n      setIsLoadingEquityData(false);\n      return;\n    }\n    \n    // Clear any existing timeout\n    if (equityDataTimeoutRef.current) {\n      clearTimeout(equityDataTimeoutRef.current);\n    }\n    \n    // Debounce the API call\n    equityDataTimeoutRef.current = setTimeout(async () => {\n      const jobAppIds = apps\n        .map(app => app.job_app_id)\n        .filter(id => id);\n      \n      if (jobAppIds.length === 0) {\n        setEquityDataMap({});\n        setIsLoadingEquityData(false);\n        return;\n      }\n      \n      try {\n        setIsLoadingEquityData(true);\n        \n        const { data, error } = await supabase\n          .from('accepted_jobs')\n          .select('job_app_id, equity_agreed, jobs_equity_allocated, date_accepted, id')\n          .in('job_app_id', jobAppIds);\n          \n        if (error) {\n          console.error(\"Error fetching equity data:\", error);\n          return;\n        }\n        \n        // Create equity data map\n        const newEquityDataMap = (data || []).reduce((map, item) => {\n          map[item.job_app_id] = {\n            equity_agreed: item.equity_agreed || 0,\n            jobs_equity_allocated: item.jobs_equity_allocated || 0,\n            date_accepted: item.date_accepted,\n            id: item.id\n          };\n          return map;\n        }, {} as Record<string, any>);\n        \n        // Only update if the data actually changed\n        setEquityDataMap(prev => {\n          const hasChanged = JSON.stringify(prev) !== JSON.stringify(newEquityDataMap);\n          return hasChanged ? newEquityDataMap : prev;\n        });\n        \n      } catch (err) {\n        console.error(\"Error processing equity data:\", err);\n      } finally {\n        setIsLoadingEquityData(false);\n      }\n    }, 300); // 300ms debounce\n  }, []);\n\n  // 🔧 FIX: Only fetch when applications hash actually changes\n  useEffect(() => {\n    if (applicationsHash !== lastFetchedAppsRef.current) {\n      lastFetchedAppsRef.current = applicationsHash;\n      fetchEquityData(applications);\n    }\n    \n    // Cleanup timeout on unmount\n    return () => {\n      if (equityDataTimeoutRef.current) {\n        clearTimeout(equityDataTimeoutRef.current);\n      }\n    };\n  }, [applicationsHash, fetchEquityData, applications]);\n\n  // 🔧 FIX: Stable applications with equity data using useMemo\n  const applicationsWithEquityData = useMemo(() => {\n    return applications.map(app => ({\n      ...app,\n      hasEquityData: !!equityDataMap[app.job_app_id],\n      accepted_jobs: equityDataMap[app.job_app_id] || null\n    }));\n  }, [applications, equityDataMap]);\n\n  // Helper function to filter applications by status\n  const getApplicationsByStatus = useCallback((statusArray: string[]) => {\n    return applicationsWithEquityData.filter(app => {\n      const status = app.status?.toLowerCase() || '';\n      return statusArray.map(s => s.toLowerCase()).includes(status);\n    });\n  }, [applicationsWithEquityData]);\n\n  // 🔧 FIX: Stable filtered arrays with proper dependencies\n  const pendingApplications = useMemo(() => {\n    return getApplicationsByStatus(['pending', 'in review']);\n  }, [getApplicationsByStatus]);\n\n  const negotiationApplications = useMemo(() => {\n    return getApplicationsByStatus(['negotiation']);\n  }, [getApplicationsByStatus]);\n\n  const currentApplications = useMemo(() => {\n    const acceptedApps = getApplicationsByStatus(['accepted']);\n    \n    return acceptedApps.filter(app => {\n      if (!app.accepted_jobs) return true;\n      \n      const equityAgreed = app.accepted_jobs.equity_agreed || 0;\n      const equityAllocated = app.accepted_jobs.jobs_equity_allocated || 0;\n      \n      return equityAgreed === 0 || equityAgreed > equityAllocated;\n    });\n  }, [getApplicationsByStatus]);\n\n  const pastApplications = useMemo(() => {\n    return [\n      ...getApplicationsByStatus(['withdrawn']),\n      ...getApplicationsByStatus(['rejected'])\n    ];\n  }, [getApplicationsByStatus]);\n\n  const allPendingApplications = useMemo(() => {\n    return [...pendingApplications, ...negotiationApplications];\n  }, [pendingApplications, negotiationApplications]);\n\n  const activeEquityProjects = useMemo(() => \n    applicationsWithEquityData.filter(app => \n      app.hasEquityData && \n      app.status?.toLowerCase() === 'accepted' && \n      app.accepted_jobs && \n      app.accepted_jobs.equity_agreed > app.accepted_jobs.jobs_equity_allocated\n    ), \n    [applicationsWithEquityData]\n  );\n\n  const completedEquityProjects = useMemo(() => \n    applicationsWithEquityData.filter(app => \n      app.hasEquityData && \n      app.accepted_jobs && \n      app.accepted_jobs.equity_agreed > 0 && \n      app.accepted_jobs.equity_agreed === app.accepted_jobs.jobs_equity_allocated\n    ), \n    [applicationsWithEquityData]\n  );\n\n  // Count notifications for tabs\n  const pendingCount = negotiationApplications.length;\n  const messagesCount = newMessagesCount || 0;\n\n  // 🔧 FIX: Reduce debug logging and make it conditional\n  const lastDebugRef = useRef<string>('');\n  useEffect(() => {\n    // Only log when not loading and when counts actually change\n    if (!isLoadingEquityData && applications.length > 0) {\n      const debugInfo = {\n        total: applications.length,\n        withEquity: applicationsWithEquityData.length,\n        pending: allPendingApplications.length,\n        current: currentApplications.length,\n        past: pastApplications.length\n      };\n      \n      // Create a stable string to compare\n      const debugString = JSON.stringify(debugInfo);\n      \n      // Only log if this is different from the last log\n      if (lastDebugRef.current !== debugString) {\n        console.log(\"📊 Applications Summary:\", debugInfo);\n        lastDebugRef.current = debugString;\n      }\n    }\n  }, [\n    applications.length,\n    applicationsWithEquityData.length,\n    allPendingApplications.length,\n    currentApplications.length,\n    pastApplications.length,\n    isLoadingEquityData\n  ]);\n\n  if (applications.length === 0) {\n    return (\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"text-center py-6\">\n            <h3 className=\"text-lg font-medium\">No Applications Yet</h3>\n            <p className=\"text-muted-foreground mt-2\">\n              You haven't applied to any projects yet. Check out the Opportunities tab to find projects to apply for.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n      <TabsList className=\"grid grid-cols-4\">\n        <TabsTrigger value=\"pending\" className=\"relative\">\n          Pending\n          {pendingCount > 0 && (\n            <span className=\"absolute -top-2 -right-2 bg-red-500 text-white w-5 h-5 flex items-center justify-center rounded-full text-xs\">\n              {pendingCount}\n            </span>\n          )}\n        </TabsTrigger>\n        <TabsTrigger value=\"current\" className=\"relative\">\n          Current\n          {messagesCount > 0 && (\n            <span className=\"absolute -top-2 -right-2 bg-red-500 text-white w-5 h-5 flex items-center justify-center rounded-full text-xs\">\n              {messagesCount}\n            </span>\n          )}\n        </TabsTrigger>\n        <TabsTrigger value=\"past\">Past</TabsTrigger>\n        <TabsTrigger value=\"equity\">Equity</TabsTrigger>\n      </TabsList>\n\n      <TabsContent value=\"pending\">\n        <Alert variant=\"default\">\n          <InfoIcon className=\"h-4 w-4 mr-2\" />\n          <AlertDescription>\n            This tab shows applications that are awaiting a response, under review, or in negotiation.\n          </AlertDescription>\n        </Alert>\n        <PendingApplicationsList \n          applications={allPendingApplications}\n          onWithdraw={handleWithdrawApplication}\n          onAccept={acceptJobAsJobSeeker}\n          isWithdrawing={isWithdrawing}\n        />\n      </TabsContent>\n\n      <TabsContent value=\"current\">\n        <Alert variant=\"default\">\n          <InfoIcon className=\"h-4 w-4 mr-2\" />\n          <AlertDescription>\n            This tab shows your active projects where you and the business have agreed to work together.\n          </AlertDescription>\n        </Alert>\n        <ApplicationsList \n          applications={currentApplications}\n          onApplicationUpdated={onApplicationUpdated}\n        />\n      </TabsContent>\n\n      <TabsContent value=\"past\">\n        <Alert variant=\"default\">\n          <InfoIcon className=\"h-4 w-4 mr-2\" />\n          <AlertDescription>\n            This tab shows your past applications, including rejected and withdrawn projects.\n          </AlertDescription>\n        </Alert>\n        <PastApplicationsList \n          applications={pastApplications}\n          onApplicationUpdated={onApplicationUpdated}\n        />\n      </TabsContent>\n\n      <TabsContent value=\"equity\">\n        <Alert variant=\"default\">\n          <InfoIcon className=\"h-4 w-4 mr-2\" />\n          <AlertDescription>\n            This tab shows your equity-based projects, both active and completed.\n          </AlertDescription>\n        </Alert>\n        \n        <div className=\"space-y-6\">\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Active Equity Projects</h3>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Projects where you have equity allocation that is still being earned.\n            </p>\n            <EquityProjectsList \n              applications={activeEquityProjects}\n              onApplicationUpdated={onApplicationUpdated}\n              isCompleted={false}\n            />\n          </div>\n          \n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Completed Equity Projects</h3>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Projects where 100% of your agreed equity has been allocated.\n            </p>\n            <EquityProjectsList \n              applications={completedEquityProjects}\n              onApplicationUpdated={onApplicationUpdated}\n              isCompleted={true}\n            />\n          </div>\n        </div>\n      </TabsContent>\n    </Tabs>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/CreateMessageDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/EquityProjectItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/EquityProjectsList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/JobSeekerContractSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/PastApplicationItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/PastApplicationsList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/PendingApplicationItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/PendingApplicationsList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/StatusBadge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/WithdrawDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/components/ApplicationContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/components/ApplicationItemContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/components/ApplicationItemHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/components/ApplicationStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/components/MessageActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/components/ProjectActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/components/ProjectDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/components/ProjectHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/components/ProjectInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/components/StatusChangeDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/hooks/useApplicationActions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/hooks/useMessaging.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/hooks/useUserSkills.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/hooks/useWithdrawApplication.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[551,554],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[551,554],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState } from \"react\";\nimport { supabase } from \"@/lib/supabase\";\nimport { toast } from \"sonner\";\n\nexport const useWithdrawApplication = (onApplicationUpdated?: () => void) => {\n  const [isWithdrawDialogOpen, setIsWithdrawDialogOpen] = useState(false);\n  const [isWithdrawing, setIsWithdrawing] = useState(false);\n\n  const handleWithdrawApplication = async (applicationId: string, reason?: string) => {\n    try {\n      setIsWithdrawing(true);\n      \n      // Update only the status to withdrawn, reason is optional\n      const updateData: any = { status: 'withdrawn' };\n      \n      // Only store the reason in notes if provided\n      if (reason) {\n        updateData.notes = reason;\n      }\n      \n      console.log(`Withdrawing application ${applicationId}${reason ? ` with reason: ${reason}` : ''}`);\n      \n      const { error } = await supabase\n        .from('job_applications')\n        .update(updateData)\n        .eq('job_app_id', applicationId);\n      \n      if (error) throw error;\n      \n      toast.success(\"Application withdrawn successfully\");\n      \n      if (onApplicationUpdated) {\n        onApplicationUpdated();\n      }\n    } catch (error) {\n      console.error('Error withdrawing application:', error);\n      toast.error(\"Failed to withdraw application\");\n    } finally {\n      setIsWithdrawing(false);\n      setIsWithdrawDialogOpen(false);\n    }\n  };\n\n  return {\n    isWithdrawDialogOpen,\n    setIsWithdrawDialogOpen,\n    isWithdrawing,\n    handleWithdrawApplication\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/applications/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/opportunities/EmptyState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/opportunities/FilterSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/opportunities/OpportunitiesTabContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/opportunities/ProjectCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2252,2255],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2252,2255],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { EquityProject, SubTask } from \"@/types/jobSeeker\";\nimport { Building, Clock, CreditCard, Eye, Users } from \"lucide-react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { toast } from \"sonner\";\n\ninterface ProjectCardProps {\n  project: EquityProject;\n  userSkillStrings: string[];\n  onApply: (project: EquityProject, task: SubTask) => void;\n}\n\nexport const ProjectCard = ({ project, userSkillStrings, onApply }: ProjectCardProps) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const navigate = useNavigate();\n  \n  const toggleExpand = () => {\n    setIsExpanded(!isExpanded);\n  };\n  \n  const handleViewProject = () => {\n    if (project.project_id) {\n      navigate(`/projects/${project.project_id}`);\n    } else if (project.id) {\n      navigate(`/projects/${project.id}`);\n    } else {\n      toast.error(\"Project details not available\");\n    }\n  };\n  \n  const formatTimeframe = (timeframe: string | undefined) => {\n    if (!timeframe) return \"Flexible\";\n    return timeframe;\n  };\n\n  const getSkillMatch = (task: SubTask) => {\n    if (!task.skill_requirements || !Array.isArray(task.skill_requirements) || task.skill_requirements.length === 0 || !userSkillStrings || userSkillStrings.length === 0) {\n      return { count: 0, total: 0, percentage: 0 };\n    }\n    \n    const taskSkills = task.skill_requirements.map(skill => {\n      if (typeof skill === 'string') return skill.toLowerCase();\n      if (typeof skill === 'object' && skill !== null && 'skill' in skill && typeof skill.skill === 'string') {\n        return skill.skill.toLowerCase();\n      }\n      return '';\n    }).filter(Boolean);\n    \n    if (taskSkills.length === 0) {\n      return { count: 0, total: 0, percentage: 0 };\n    }\n    \n    const matchCount = userSkillStrings.filter(skill => \n      taskSkills.includes(skill.toLowerCase())\n    ).length;\n    \n    return {\n      count: matchCount,\n      total: taskSkills.length,\n      percentage: Math.round((matchCount / taskSkills.length) * 100)\n    };\n  };\n\n  const formatSkills = (skills: any) => {\n    if (!skills) return [];\n    \n    if (typeof skills === 'string') {\n      return [skills];\n    }\n    \n    if (Array.isArray(skills)) {\n      return skills.map(skill => {\n        if (typeof skill === 'string') {\n          return skill;\n        } else if (skill && (skill.name || skill.skill)) {\n          return skill.name || skill.skill;\n        }\n        return '';\n      }).filter(Boolean);\n    }\n    \n    return [];\n  };\n\n  // Get project skills - handle both skills_required and any other property that might contain skills\n  const projectSkills = formatSkills(project.skills_required || []);\n  \n  const matchedSkills = projectSkills.filter(skill => \n    userSkillStrings.some(userSkill => \n      (typeof userSkill === 'string' ? userSkill.toLowerCase() : \n       (userSkill.name || userSkill.skill || '').toLowerCase())\n       .includes(skill.toLowerCase())\n    )\n  );\n\n  const tasks = project.sub_tasks || [];\n\n  return (\n    <Card className=\"overflow-hidden\">\n      <CardHeader className=\"pb-2\">\n        <div className=\"flex justify-between items-start\">\n          <div>\n            <CardTitle className=\"text-lg\">{project.title || \"Untitled Project\"}</CardTitle>\n            <div className=\"flex items-center text-sm text-muted-foreground\">\n              <Building className=\"mr-1 h-4 w-4\" />\n              {project.business_roles?.company_name || \"Unknown Company\"}\n            </div>\n          </div>\n          <div className=\"flex gap-2\">\n            {tasks.length > 0 && (\n              <Button variant=\"outline\" size=\"sm\" onClick={toggleExpand}>\n                {isExpanded ? \"Show Less\" : \"Show Roles\"}\n              </Button>\n            )}\n            <Button variant=\"outline\" size=\"sm\" onClick={handleViewProject}>\n              <Eye className=\"h-4 w-4 mr-1\" />\n              View Project\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"pb-2\">\n        <div className=\"mb-2\">\n          <p className=\"text-sm text-muted-foreground line-clamp-2\">\n            {project.business_roles?.description || \"No description provided.\"}\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2 mb-2\">\n          <div>\n            <div className=\"text-xs font-medium\">Equity Available</div>\n            <div className=\"flex items-center\">\n              <CreditCard className=\"mr-1 h-3 w-3 text-muted-foreground\" />\n              <span>{project.equity_amount || 0}%</span>\n            </div>\n          </div>\n          <div>\n            <div className=\"text-xs font-medium\">Timeframe</div>\n            <div className=\"flex items-center\">\n              <Clock className=\"mr-1 h-3 w-3 text-muted-foreground\" />\n              <span>{formatTimeframe(project.time_allocated)}</span>\n            </div>\n          </div>\n          {project.skill_match !== undefined && (\n            <div>\n              <div className=\"text-xs font-medium\">Skill Match</div>\n              <div className=\"flex items-center\">\n                <Users className=\"mr-1 h-3 w-3 text-muted-foreground\" />\n                <span>{project.skill_match}%</span>\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {isExpanded && tasks.length > 0 && (\n          <div className=\"space-y-3 mt-3\">\n            <div className=\"text-sm font-medium\">Available Roles</div>\n            {tasks.map((task) => {\n              const skillMatch = getSkillMatch(task);\n              \n              return (\n                <div key={task.id} className=\"p-2 border rounded-md\">\n                  <div className=\"flex justify-between items-start mb-2\">\n                    <div>\n                      <div className=\"font-medium text-sm\">{task.title}</div>\n                      <div className=\"text-xs text-muted-foreground line-clamp-2\">\n                        {task.description || \"No description provided.\"}\n                      </div>\n                    </div>\n                    <Button \n                      size=\"sm\" \n                      onClick={() => onApply(project, task)}\n                    >\n                      Apply\n                    </Button>\n                  </div>\n                  \n                  <div className=\"mb-2\">\n                    <div className=\"text-xs font-medium\">Skill Match</div>\n                    <div className=\"text-sm\">{skillMatch.percentage}% ({skillMatch.count}/{skillMatch.total})</div>\n                  </div>\n                  \n                  <div>\n                    <div className=\"text-xs font-medium mb-1\">Required Skills</div>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {Array.isArray(task.skill_requirements) && task.skill_requirements.map((skill, index) => {\n                        const skillName = typeof skill === 'string' ? skill : \n                                         (typeof skill === 'object' && skill !== null && 'skill' in skill) ? \n                                         skill.skill : '';\n                        const skillLevel = typeof skill === 'string' ? 'Intermediate' : \n                                         (typeof skill === 'object' && skill !== null && 'level' in skill) ? \n                                         skill.level : '';\n                        \n                        const isMatched = userSkillStrings.includes(\n                          typeof skillName === 'string' ? skillName.toLowerCase() : ''\n                        );\n                        \n                        return (\n                          <Badge \n                            key={index} \n                            variant={isMatched ? \"default\" : \"outline\"}\n                            className={`text-xs ${isMatched ? \"bg-green-500\" : \"\"}`}\n                          >\n                            {skillName} {skillLevel ? `(${skillLevel})` : ''}\n                          </Badge>\n                        );\n                      })}\n                      {(!Array.isArray(task.skill_requirements) || task.skill_requirements.length === 0) && (\n                        <span className=\"text-xs text-muted-foreground\">No specific skills required</span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/opportunities/ProjectsList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/opportunities/TaskCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/opportunities/hooks/useOpportunities.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/projects/DeleteTicketDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/projects/ProjectTabContent.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[600,603],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[600,603],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1255,1258],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1255,1258],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport { TicketDashboard } from \"@/components/ticket/TicketDashboard\";\nimport { KanbanBoard } from \"@/components/business/testing/KanbanBoard\";\nimport { GanttChartView } from \"@/components/business/testing/GanttChartView\";\nimport { Ticket } from \"@/types/types\";\nimport { Task, ViewMode } from \"gantt-task-react\";\n\ninterface ProjectTabContentProps {\n  activeTickets: Ticket[];\n  showKanban: boolean;\n  showGantt: boolean;\n  onRefresh: () => void;\n  onTicketAction: (ticketId: string, action: string, data: any) => Promise<void>;\n  onLogTime: (ticketId: string) => void;\n  userId: string;\n  expandedTickets: Set<string>;\n  toggleTicketExpansion: (ticketId: string) => void;\n  onDeleteTicket: (ticket: Ticket) => void;\n  handleDragEnd: (result: DropResult) => void;\n}\n\nexport const ProjectTabContent: React.FC<ProjectTabContentProps> = ({\n  activeTickets,\n  showKanban,\n  showGantt,\n  onRefresh,\n  onTicketAction,\n  onLogTime,\n  userId,\n  expandedTickets,\n  toggleTicketExpansion,\n  onDeleteTicket,\n  handleDragEnd\n}) => {\n  // Enhanced ticket action handler to properly handle deletion\n  const handleTicketAction = async (ticketId: string, action: string, data: any) => {\n    try {\n      // For delete actions, pass the userId as data\n      if (action === \"deleteTicket\") {\n        return await onTicketAction(ticketId, action, userId);\n      }\n      // For all other actions, pass the data as is\n      return await onTicketAction(ticketId, action, data);\n    } catch (error) {\n      console.error(`Error in handleTicketAction (${action}):`, error);\n      throw error; // Re-throw to allow proper error handling in components\n    }\n  };\n\n  // Convert activeTickets to Gantt-compatible Task[] format\n  const getGanttTasks = (): Task[] => {\n    return activeTickets.map((ticket) => {\n      const startDate = new Date(ticket.created_at);\n      let endDate = ticket.due_date ? new Date(ticket.due_date) : new Date();\n      \n      if (!ticket.due_date || endDate < startDate) {\n        endDate = new Date(startDate);\n        endDate.setDate(endDate.getDate() + 7); // Default to one week duration\n      }\n      \n      return {\n        id: ticket.id,\n        name: ticket.title,\n        start: startDate,\n        end: endDate,\n        progress: ticket.completion_percentage ? ticket.completion_percentage / 100 : 0,\n        type: 'task',\n        isDisabled: false,\n        styles: { \n          progressColor: \n            ticket.priority === 'high' ? '#ef4444' : \n            ticket.priority === 'medium' ? '#f59e0b' : '#3b82f6',\n          progressSelectedColor: \n            ticket.priority === 'high' ? '#dc2626' : \n            ticket.priority === 'medium' ? '#d97706' : '#2563eb'\n        }\n      };\n    });\n  };\n\n  return (\n    <>\n      {showKanban ? (\n        <div className=\"mb-6\">\n          <DragDropContext onDragEnd={handleDragEnd}>\n            <KanbanBoard \n              tickets={activeTickets}\n              onStatusChange={(ticketId, newStatus) => \n                onTicketAction(ticketId, 'updateStatus', newStatus)\n              }\n              onTicketClick={(ticket) => {\n                console.log(\"Ticket clicked:\", ticket.id);\n              }}\n              onTicketDelete={onDeleteTicket}\n            />\n          </DragDropContext>\n        </div>\n      ) : showGantt ? (\n        <div className=\"mb-6\">\n          <GanttChartView \n            tasks={getGanttTasks()}\n          />\n        </div>\n      ) : (\n        <TicketDashboard \n          initialTickets={activeTickets}\n          onRefresh={onRefresh}\n          onTicketAction={handleTicketAction}\n          showTimeTracking={true}\n          userId={userId}\n          onLogTime={onLogTime}\n          userCanEditDates={true}\n          userCanEditStatus={true}\n          expandedTickets={expandedTickets}\n          toggleTicketExpansion={toggleTicketExpansion}\n        />\n      )}\n    </>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/projects/ProjectsHeader.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[304,307],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[304,307],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from \"react\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { RefreshCw, KanbanSquare, BarChart2 } from \"lucide-react\";\n\ninterface ProjectsHeaderProps {\n  projects: any[];\n  selectedProject: string;\n  showKanban: boolean;\n  showGantt: boolean;\n  onProjectChange: (projectId: string) => void;\n  onToggleKanban: () => void;\n  onToggleGantt: () => void;\n  onRefresh: () => void;\n  onCreateTicket: () => void;\n}\n\nexport const ProjectsHeader: React.FC<ProjectsHeaderProps> = ({\n  projects,\n  selectedProject,\n  showKanban,\n  showGantt,\n  onProjectChange,\n  onToggleKanban,\n  onToggleGantt,\n  onRefresh,\n  onCreateTicket\n}) => {\n  return (\n    <div className=\"flex items-center justify-between mb-4\">\n      <Select value={selectedProject} onValueChange={onProjectChange}>\n        <SelectTrigger className=\"w-[180px]\">\n          <SelectValue placeholder=\"Select project\" />\n        </SelectTrigger>\n        <SelectContent>\n          <SelectItem value=\"all\">All Projects</SelectItem>\n          {projects.length === 0 ? (\n            <SelectItem value=\"none\" disabled>No projects available</SelectItem>\n          ) : (\n            projects.map(project => (\n              <SelectItem key={project.project_id} value={project.project_id}>\n                {project.project_title}\n              </SelectItem>\n            ))\n          )}\n        </SelectContent>\n      </Select>\n      \n      <div className=\"flex gap-2\">\n        <Button \n          size=\"sm\" \n          variant={showKanban ? \"default\" : \"outline\"} \n          onClick={onToggleKanban}\n        >\n          <KanbanSquare className=\"h-4 w-4 mr-1\" /> \n          {showKanban ? \"Hide Kanban\" : \"Show Kanban\"}\n        </Button>\n        \n        <Button \n          size=\"sm\" \n          variant={showGantt ? \"default\" : \"outline\"} \n          onClick={onToggleGantt}\n        >\n          <BarChart2 className=\"h-4 w-4 mr-1\" /> \n          {showGantt ? \"Hide Gantt\" : \"Show Gantt\"}\n        </Button>\n        \n        <Button size=\"sm\" variant=\"outline\" onClick={onRefresh}>\n          <RefreshCw className=\"h-4 w-4 mr-1\" /> Refresh\n        </Button>\n        \n        <Button size=\"sm\" onClick={onCreateTicket}>\n          Create Ticket\n        </Button>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/projects/StatisticsCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/projects/useProjectsTabs.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[473,476],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[473,476],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchProjects' and 'loadTickets'. Either include them or remove the dependency array.","line":33,"column":6,"nodeType":"ArrayExpression","endLine":33,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [fetchProjects, loadTickets, userId]","fix":{"range":[1342,1350],"text":"[fetchProjects, loadTickets, userId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTickets'. Either include it or remove the dependency array.","line":39,"column":6,"nodeType":"ArrayExpression","endLine":39,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [userId, selectedProject, loadTickets]","fix":{"range":[1426,1451],"text":"[userId, selectedProject, loadTickets]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":127,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4264,4267],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4264,4267],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":336,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":336,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10041,10044],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10041,10044],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { supabase } from \"@/lib/supabase\";\nimport { toast } from \"sonner\";\nimport { Ticket } from \"@/types/types\";\nimport { DropResult } from \"react-beautiful-dnd\";\n\nexport const useProjectsTabs = (userId?: string) => {\n  const [activeTab, setActiveTab] = useState(\"all-tickets\");\n  const [tickets, setTickets] = useState<Ticket[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [projects, setProjects] = useState<any[]>([]);\n  const [selectedProject, setSelectedProject] = useState<string>(\"all\");\n  const [taskStats, setTaskStats] = useState({\n    total: 0,\n    open: 0,\n    closed: 0,\n    highPriority: 0\n  });\n  const [isCreateTicketDialogOpen, setIsCreateTicketDialogOpen] = useState(false);\n  const [showKanban, setShowKanban] = useState(false);\n  const [showGantt, setShowGantt] = useState(false);\n  const [isTimeLogDialogOpen, setIsTimeLogDialogOpen] = useState(false);\n  const [selectedTicketId, setSelectedTicketId] = useState<string | null>(null);\n  const [expandedTickets, setExpandedTickets] = useState<Set<string>>(new Set());\n  const [ticketToDelete, setTicketToDelete] = useState<Ticket | null>(null);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n\n  useEffect(() => {\n    if (userId) {\n      fetchProjects();\n      loadTickets();\n    }\n  }, [userId]);\n  \n  useEffect(() => {\n    if (userId) {\n      loadTickets();\n    }\n  }, [userId, selectedProject]);\n\n  const fetchProjects = async () => {\n    if (!userId) return;\n    \n    try {\n      const { data: projectsData, error } = await supabase\n        .from('jobseeker_active_projects')\n        .select('project_id, project_title')\n        .eq('user_id', userId)\n        .order('project_title', { ascending: true });\n      \n      if (error) throw error;\n      \n      const uniqueProjects = Array.from(\n        new Map(projectsData.map(item => [item.project_id, item])).values()\n      );\n      \n      setProjects(uniqueProjects);\n    } catch (error) {\n      console.error(\"Error fetching projects:\", error);\n      toast.error(\"Failed to load projects\");\n    }\n  };\n\n  const loadTickets = async () => {\n    if (!userId) return;\n    \n    try {\n      setLoading(true);\n      \n      let query = supabase\n        .from('tickets')\n        .select(`\n          *,\n          accepted_jobs:job_app_id(\n            equity_agreed,\n            jobs_equity_allocated\n          )\n        `)\n        .or(`assigned_to.eq.${userId},reporter.eq.${userId}`);\n      \n      if (selectedProject && selectedProject !== \"all\") {\n        query = query.eq('project_id', selectedProject);\n      }\n      \n      const { data, error } = await query.order('created_at', { ascending: false });\n      \n      if (error) throw error;\n      \n      // Filter out deleted tickets using the soft-delete approach\n      const filteredTickets = (data || [])\n        .filter(ticket => ticket.status !== 'deleted') // Filter out soft-deleted tickets\n        .filter(ticket => {\n          if (ticket.accepted_jobs && \n              ticket.accepted_jobs.equity_agreed > 0 && \n              ticket.accepted_jobs.jobs_equity_allocated >= ticket.accepted_jobs.equity_agreed) {\n            return false;\n          }\n          return true;\n        });\n      \n      const processedTickets = filteredTickets.map(ticket => ({\n        ...ticket,\n        ticket_type: ticket.ticket_type || \"\",\n        description: ticket.description || \"\",\n        equity_agreed: ticket.accepted_jobs?.equity_agreed || 0,\n        equity_allocated: ticket.accepted_jobs?.jobs_equity_allocated || 0\n      }));\n      \n      setTickets(processedTickets);\n      \n      const stats = {\n        total: processedTickets.length,\n        open: processedTickets.filter(t => t.status !== 'done' && t.status !== 'closed').length,\n        closed: processedTickets.filter(t => t.status === 'done' || t.status === 'closed').length,\n        highPriority: processedTickets.filter(t => t.priority === 'high').length\n      };\n      \n      setTaskStats(stats);\n    } catch (error) {\n      console.error(\"Error loading tickets:\", error);\n      toast.error(\"Failed to load tickets\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTicketAction = async (ticketId: string, action: string, data: any) => {\n    try {\n      switch (action) {\n        case 'updateStatus': {\n          const { error } = await supabase\n            .from('tickets')\n            .update({ status: data })\n            .eq('id', ticketId);\n          \n          if (error) throw error;\n          \n          setTickets(prevTickets => \n            prevTickets.map(t => t.id === ticketId ? { ...t, status: data } : t)\n          );\n          \n          toast.success(\"Status updated\");\n          break;\n        }\n        \n        case 'updatePriority': {\n          const { error } = await supabase\n            .from('tickets')\n            .update({ priority: data })\n            .eq('id', ticketId);\n          \n          if (error) throw error;\n          \n          setTickets(prevTickets => \n            prevTickets.map(t => t.id === ticketId ? { ...t, priority: data } : t)\n          );\n          \n          toast.success(\"Priority updated\");\n          break;\n        }\n        \n        case 'updateDueDate': {\n          const { error } = await supabase\n            .from('tickets')\n            .update({ due_date: data })\n            .eq('id', ticketId);\n          \n          if (error) throw error;\n          \n          setTickets(prevTickets => \n            prevTickets.map(t => t.id === ticketId ? { ...t, due_date: data } : t)\n          );\n          \n          toast.success(\"Due date updated\");\n          break;\n        }\n        \n        case 'updateCompletionPercentage': {\n          const { error } = await supabase\n            .from('tickets')\n            .update({ completion_percentage: data })\n            .eq('id', ticketId);\n          \n          if (error) throw error;\n          \n          setTickets(prevTickets => \n            prevTickets.map(t => t.id === ticketId ? { ...t, completion_percentage: data } : t)\n          );\n          \n          toast.success(\"Completion percentage updated\");\n          break;\n        }\n        \n        case 'updateEstimatedHours': {\n          const { error } = await supabase\n            .from('tickets')\n            .update({ estimated_hours: data })\n            .eq('id', ticketId);\n          \n          if (error) throw error;\n          \n          setTickets(prevTickets => \n            prevTickets.map(t => t.id === ticketId ? { ...t, estimated_hours: data } : t)\n          );\n          \n          toast.success(\"Estimated hours updated\");\n          break;\n        }\n        \n        case 'addNote': {\n          const { data: ticketData } = await supabase\n            .from('tickets')\n            .select('notes')\n            .eq('id', ticketId)\n            .single();\n          \n          const { data: profileData } = await supabase\n            .from('profiles')\n            .select('first_name, last_name')\n            .eq('id', userId)\n            .single();\n          \n          const userName = profileData ? \n            `${profileData.first_name || ''} ${profileData.last_name || ''}`.trim() : \n            'User';\n          \n          const newNote = {\n            id: Date.now().toString(),\n            user: userName,\n            timestamp: new Date().toISOString(),\n            comment: data\n          };\n          \n          const currentNotes = ticketData?.notes || [];\n          const updatedNotes = [...currentNotes, newNote];\n          \n          await supabase\n            .from('tickets')\n            .update({ notes: updatedNotes })\n            .eq('id', ticketId);\n          \n          setTickets(prevTickets => \n            prevTickets.map(t => t.id === ticketId ? { ...t, notes: updatedNotes } : t)\n          );\n          \n          toast.success(\"Note added\");\n          break;\n        }\n        \n        case 'refreshTicket': {\n          const { data: refreshedTicket, error } = await supabase\n            .from('tickets')\n            .select('*')\n            .eq('id', ticketId)\n            .single();\n            \n          if (error) throw error;\n          \n          if (refreshedTicket) {\n            setTickets(prevTickets => \n              prevTickets.map(t => t.id === ticketId ? refreshedTicket : t)\n            );\n          }\n          \n          break;\n        }\n        \n        case 'deleteTicket': {\n          const { error } = await supabase\n            .from('tickets')\n            .delete()\n            .eq('id', ticketId);\n            \n          if (error) throw error;\n          \n          setTickets(prevTickets => \n            prevTickets.filter(t => t.id !== ticketId)\n          );\n          \n          toast.success(\"Ticket deleted successfully\");\n          break;\n        }\n        \n        default:\n          console.warn(\"Unknown action:\", action);\n      }\n    } catch (error) {\n      console.error(\"Error handling ticket action:\", error);\n      toast.error(\"Failed to update ticket\");\n    }\n  };\n\n  const confirmTicketDeletion = (ticket: Ticket) => {\n    setTicketToDelete(ticket);\n    setIsDeleteDialogOpen(true);\n  };\n\n  const handleDeleteTicket = async () => {\n    if (!ticketToDelete) return;\n    \n    try {\n      await handleTicketAction(ticketToDelete.id, 'deleteTicket', null);\n      setIsDeleteDialogOpen(false);\n      setTicketToDelete(null);\n    } catch (error) {\n      console.error(\"Error deleting ticket:\", error);\n    }\n  };\n  \n  const handleLogTime = (ticketId: string) => {\n    if (!userId) {\n      toast.error(\"User ID not found\");\n      return;\n    }\n    \n    setSelectedTicketId(ticketId);\n    setIsTimeLogDialogOpen(true);\n  };\n\n  const handleTimeLogged = () => {\n    loadTickets();\n  };\n\n  const handleRefresh = () => {\n    loadTickets();\n  };\n\n  const handleProjectChange = (projectId: string) => {\n    setSelectedProject(projectId);\n  };\n\n  const handleCreateTicket = () => {\n    setIsCreateTicketDialogOpen(true);\n  };\n\n  const handleTicketCreated = async (ticketData: any): Promise<void> => {\n    try {\n      if (!userId) {\n        toast.error(\"User ID not found\");\n        return;\n      }\n      \n      const ticketToCreate = {\n        ...ticketData,\n        reporter: userId,\n        created_at: new Date().toISOString(),\n        ticket_type: ticketData.ticket_type || \"task\",\n        status: \"todo\",\n        priority: ticketData.priority || \"medium\",\n        health: ticketData.health || \"good\"\n      };\n      \n      const { data, error } = await supabase\n        .from('tickets')\n        .insert(ticketToCreate)\n        .select()\n        .single();\n      \n      if (error) throw error;\n      \n      toast.success(\"Ticket created successfully\");\n      if (data) {\n        setTickets([data, ...tickets]);\n      }\n      setIsCreateTicketDialogOpen(false);\n    } catch (error) {\n      console.error(\"Error creating ticket:\", error);\n      toast.error(\"Failed to create ticket\");\n    }\n  };\n\n  const getActiveTickets = () => {\n    switch (activeTab) {\n      case \"project-tasks\":\n        return tickets.filter(t => t.ticket_type === \"task\");\n      case \"project-tickets\":\n        return tickets.filter(t => t.ticket_type === \"ticket\");\n      case \"beta-testing\":\n        return tickets.filter(t => \n          t.ticket_type === \"beta_testing\" || \n          t.ticket_type === \"beta-test\" || \n          t.ticket_type === \"beta-testing\"\n        );\n      default:\n        return tickets;\n    }\n  };\n\n  const toggleKanbanView = () => {\n    setShowKanban(!showKanban);\n    if (showKanban) {\n      setShowGantt(false);\n    }\n  };\n\n  const toggleGanttView = () => {\n    setShowGantt(!showGantt);\n    if (showGantt) {\n      setShowKanban(false);\n    }\n  };\n\n  const toggleTicketExpansion = (ticketId: string) => {\n    setExpandedTickets(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(ticketId)) {\n        newSet.delete(ticketId);\n      } else {\n        newSet.add(ticketId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleDragEnd = (result: DropResult) => {\n    const { destination, source, draggableId } = result;\n    \n    if (!destination) {\n      return;\n    }\n    \n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n    \n    const newStatus = destination.droppableId;\n    handleTicketAction(draggableId, 'updateStatus', newStatus);\n  };\n\n  return {\n    activeTab,\n    setActiveTab,\n    tickets,\n    loading,\n    projects,\n    selectedProject,\n    taskStats,\n    isCreateTicketDialogOpen,\n    setIsCreateTicketDialogOpen,\n    showKanban,\n    showGantt,\n    isTimeLogDialogOpen,\n    setIsTimeLogDialogOpen,\n    selectedTicketId,\n    expandedTickets,\n    ticketToDelete,\n    isDeleteDialogOpen,\n    setIsDeleteDialogOpen,\n    handleTicketAction,\n    confirmTicketDeletion,\n    handleDeleteTicket,\n    handleLogTime,\n    handleTimeLogged,\n    handleRefresh,\n    handleProjectChange,\n    handleCreateTicket,\n    handleTicketCreated,\n    getActiveTickets,\n    toggleKanbanView,\n    toggleGanttView,\n    toggleTicketExpansion,\n    handleDragEnd\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/tabs/ApplicationsTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[621,624],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[621,624],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleApplicationUpdated'. Either include it or remove the dependency array.","line":62,"column":6,"nodeType":"ArrayExpression","endLine":62,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [handleApplicationUpdated]","fix":{"range":[1943,1945],"text":"[handleApplicationUpdated]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useEffect, useState, useCallback, useRef } from \"react\";\nimport { supabase } from \"@/lib/supabase\";\nimport { JobApplication } from \"@/types/jobSeeker\";\nimport { ApplicationsTabBase } from \"@/components/job-seeker/dashboard/applications\";\n\ninterface ApplicationsTabProps {\n  applications: JobApplication[];\n  onApplicationUpdated: () => void;\n}\n\nexport const ApplicationsTab = ({\n  applications,\n  onApplicationUpdated,\n}: ApplicationsTabProps) => {\n  const [newMessagesCount, setNewMessagesCount] = useState(0);\n  const [newApplicationsCount, setNewApplicationsCount] = useState(0);\n  const channelRef = useRef<any>(null);\n\n  // Calculate new applications that need attention (accepted jobs that need jobseeker acceptance)\n  useEffect(() => {\n    const pendingAcceptance = applications.filter(app => \n      app.status === 'accepted' && app.accepted_business && !app.accepted_jobseeker\n    ).length;\n    \n    setNewApplicationsCount(pendingAcceptance);\n  }, [applications]);\n\n  // Memoize the update function to prevent unnecessary re-renders\n  const handleApplicationUpdated = useCallback(() => {\n    setNewMessagesCount(prev => prev + 1);\n    onApplicationUpdated();\n  }, [onApplicationUpdated]);\n\n  useEffect(() => {\n    // Only create the channel if it doesn't exist yet\n    if (!channelRef.current) {\n      channelRef.current = supabase\n        .channel(\"job-seeker-apps\")\n        .on(\n          \"postgres_changes\",\n          {\n            event: \"UPDATE\",\n            schema: \"public\",\n            table: \"job_applications\",\n            filter: \"task_discourse=neq.null\",\n          },\n          () => {\n            setNewMessagesCount(prev => prev + 1);\n            handleApplicationUpdated();\n          }\n        )\n        .subscribe();\n    }\n\n    // Cleanup function to remove the Supabase subscription\n    return () => {\n      if (channelRef.current) {\n        supabase.removeChannel(channelRef.current);\n      }\n    };\n  }, []); // Empty dependency array to ensure this only runs once\n\n  return (\n    <div className=\"space-y-6\">\n      <ApplicationsTabBase \n        applications={applications} \n        onApplicationUpdated={handleApplicationUpdated}\n        newMessagesCount={newMessagesCount}\n      />\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/tabs/DashboardTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2445,2448],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2445,2448],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":112,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3711,3714],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3711,3714],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3861,3864],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3861,3864],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":299,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":299,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9506,9509],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9506,9509],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import ProjectsOverview from \"@/components/job-seeker/ProjectsOverview\";\nimport { DashboardContent } from \"@/components/job-seeker/dashboard/DashboardContent\";\nimport { EquityProject, JobApplication, Profile, Skill } from \"@/types/jobSeeker\";\nimport { CVFile } from \"@/hooks/job-seeker/useCVData\";\nimport { Notification, TicketMessage, Task, TaskType } from \"@/types/dashboard\";\nimport { useEffect, useState, useCallback } from \"react\";\nimport { useMessaging } from \"@/components/job-seeker/dashboard/applications/hooks/useMessaging\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\nimport { FileText, Clock, CheckCircle, AlertTriangle, Info } from \"lucide-react\";\nimport React from \"react\";\nimport { useAcceptedJobsCore } from \"@/hooks/jobs/useAcceptedJobsCore\";\n\n// Components imports for the ticket UI\nimport { KanbanBoard, BetaTicket } from \"@/components/shared/beta-testing/KanbanBoard\";\nimport { GanttChartView } from \"@/components/business/testing/GanttChartView\";\nimport { ExpandedTicketDetails } from \"@/components/ticket/ExpandedTicketDetails\";\nimport { AdminTicketManager } from \"@/components/admin/tickets/AdminTicketManager\";\nimport { supabase } from \"@/lib/supabase\";\nimport { TimeTracker } from \"@/components/job-seeker/dashboard/TimeTracker\";\n\n// Define ticket interface\ninterface Ticket {\n  id: string;\n  title: string;\n  status: string;\n  priority: string;\n  health: string;\n  due_date?: string;\n  assigned_to?: string;\n  expanded?: boolean;\n  task_id?: string;\n  project_id?: string;\n  description?: string;\n  job_app_id?: string;\n  created_by?: string;\n  created_at?: string;\n}\n\ninterface TicketStats {\n  total: number;\n  todo: number;\n  inProgress: number;\n  review: number;\n  done: number;\n  closed: number;\n}\n\ninterface AcceptedJob {\n  id: string;\n  job_app_id: string;\n  date_accepted: string;\n  document_url: string | null;\n  accepted_discourse: string | null;\n  equity_agreed: number;\n}\n\ninterface DashboardTabProps {\n  activeTab: string;\n  profile: Profile | null;\n  cvUrl: string | null;\n  parsedCvData: any;\n  skills: Skill[] | null;\n  applications: JobApplication[];\n  equityProjects: EquityProject[];\n  availableOpportunities: EquityProject[];\n  handleSkillsUpdate: (skills: Skill[]) => Promise<void>;\n  refreshApplications: () => void;\n  onDocumentAction: (projectId: string, action: \"edit\" | \"approve\") => void;\n  userCVs?: CVFile[];\n  onCvListUpdated?: () => void;\n}\n\nexport const DashboardTab = ({\n  activeTab,\n  profile,\n  cvUrl,\n  parsedCvData,\n  skills,\n  applications,\n  equityProjects,\n  availableOpportunities,\n  handleSkillsUpdate,\n  refreshApplications,\n  onDocumentAction,\n  userCVs,\n  onCvListUpdated,\n}: DashboardTabProps) => {\n  const { conversations, loadConversations, unreadCount } = useMessaging();\n  const [userTickets, setUserTickets] = useState<Ticket[]>([]);\n  const [ticketMessages, setTicketMessages] = useState<TicketMessage[]>([]);\n  const [ticketsLoading, setTicketsLoading] = useState(true);\n  const [selectedTab, setSelectedTab] = useState(\"kanban\");\n  const [selectedTicketId, setSelectedTicketId] = useState<string | null>(null);\n  const [expandedTickets, setExpandedTickets] = useState<Record<string, boolean>>({});\n  const [betaTickets, setBetaTickets] = useState<BetaTicket[]>([]);\n  const [timeEntries, setTimeEntries] = useState<any[]>([]);\n  const [acceptedJobs, setAcceptedJobs] = useState<AcceptedJob[]>([]);\n  const [denormalizedProjects, setDenormalizedProjects] = useState<any[]>([]);\n  const [isLoadingProjects, setIsLoadingProjects] = useState(true);\n  const { getAcceptedJob } = useAcceptedJobsCore();\n  const [ticketStats, setTicketStats] = useState<TicketStats>({\n    total: 0,\n    todo: 0,\n    inProgress: 0,\n    review: 0,\n    done: 0,\n    closed: 0,\n  });\n\n  const loadUserTickets = useCallback(async () => {\n    setTicketsLoading(true);\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) return;\n\n      const { data: assignedTickets, error: assignedError } = await supabase\n        .from('tickets')\n        .select('*')\n        .eq('assigned_to', user.id);\n\n      const { data: reportedTickets, error: reportedError } = await supabase\n        .from('tickets')\n        .select('*')\n        .eq('reporter', user.id);\n\n      if (assignedError) console.error(\"Error fetching assigned tickets:\", assignedError);\n      if (reportedError) console.error(\"Error fetching reported tickets:\", reportedError);\n\n      const allTickets = [...(assignedTickets || []), ...(reportedTickets || [])];\n      const uniqueTickets = Array.from(new Map(allTickets.map(ticket => [ticket.id, ticket])).values());\n\n      const { data: timeEntriesData, error: timeEntriesError } = await supabase\n        .from('time_entries')\n        .select('*')\n        .eq('user_id', user.id);\n\n      if (timeEntriesError) {\n        console.error(\"Error fetching time entries:\", timeEntriesError);\n      } else {\n        setTimeEntries(timeEntriesData || []);\n      }\n\n      const stats = {\n        total: uniqueTickets.length,\n        todo: uniqueTickets.filter(t => t.status === 'todo').length,\n        inProgress: uniqueTickets.filter(t => t.status === 'in-progress').length,\n        review: uniqueTickets.filter(t => t.status === 'review').length,\n        done: uniqueTickets.filter(t => t.status === 'done').length,\n        closed: uniqueTickets.filter(t => t.status === 'closed').length,\n      };\n\n      setTicketStats(stats);\n      setUserTickets(uniqueTickets);\n      setBetaTickets(uniqueTickets as BetaTicket[]);\n\n      await loadTicketMessages(user.id, uniqueTickets.map(t => t.id));\n    } catch (error) {\n      console.error(\"Error loading tickets:\", error);\n    } finally {\n      setTicketsLoading(false);\n    }\n  }, []);\n\n  const loadAcceptedJobs = useCallback(async () => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) return;\n\n      // Load accepted jobs from the normalized table\n      const { data: acceptedJobsData, error: acceptedJobsError } = await supabase\n        .from('accepted_jobs')\n        .select(`\n          *,\n          job_applications!inner (\n            job_app_id,\n            user_id,\n            project_id,\n            task_id,\n            status\n          )\n        `)\n        .eq('job_applications.user_id', user.id);\n\n      if (acceptedJobsError) {\n        console.error(\"Error fetching accepted jobs:\", acceptedJobsError);\n      } else {\n        setAcceptedJobs(acceptedJobsData || []);\n      }\n\n      // Load denormalized projects view\n      const { data: denormalizedData, error: denormalizedError } = await supabase\n        .from('jobseeker_active_projects')\n        .select('*')\n        .eq('user_id', user.id);\n\n      if (denormalizedError) {\n        console.error(\"Error fetching denormalized projects:\", denormalizedError);\n      } else {\n        setDenormalizedProjects(denormalizedData || []);\n      }\n    } catch (error) {\n      console.error(\"Error loading projects data:\", error);\n    } finally {\n      setIsLoadingProjects(false);\n    }\n  }, []);\n\n  const loadTicketMessages = async (userId: string, ticketIds: string[]) => {\n    if (!ticketIds.length) return;\n    \n    try {\n      const { data: messages, error: messagesError } = await supabase\n        .from('user_messages')\n        .select('*')\n        .eq('recipient_id', userId)\n        .in('related_ticket', ticketIds);\n      \n      if (messagesError) {\n        console.error(\"Error fetching ticket messages:\", messagesError);\n        return;\n      }\n      \n      setTicketMessages(messages || []);\n      \n    } catch (error) {\n      console.error(\"Error loading ticket messages:\", error);\n    }\n  };\n\n  useEffect(() => {\n    loadUserTickets();\n    loadAcceptedJobs();\n  }, [loadUserTickets, loadAcceptedJobs]);\n\n  useEffect(() => {\n    if (loadConversations) {\n      loadConversations();\n    }\n  }, [loadConversations]);\n\n  useEffect(() => {\n    const loadTimeEntriesForTickets = async () => {\n      try {\n        const { data: { user } } = await supabase.auth.getUser();\n        if (!user || !userTickets.length) return;\n\n        const ticketIds = userTickets.map(ticket => ticket.id);\n        \n        const { data: timeEntriesData, error: timeEntriesError } = await supabase\n          .from('time_entries')\n          .select('*')\n          .eq('user_id', user.id)\n          .in('ticket_id', ticketIds);\n\n        if (timeEntriesError) {\n          console.error(\"Error fetching time entries:\", timeEntriesError);\n        } else {\n          setTimeEntries(timeEntriesData || []);\n        }\n      } catch (error) {\n        console.error(\"Error loading time entries:\", error);\n      }\n    };\n\n    if (userTickets.length > 0) {\n      loadTimeEntriesForTickets();\n    }\n  }, [userTickets]);\n\n  const toggleTicketExpanded = (ticketId: string) => {\n    setExpandedTickets(prev => ({\n      ...prev,\n      [ticketId]: !prev[ticketId]\n    }));\n    \n    if (selectedTicketId === ticketId) {\n      setSelectedTicketId(null);\n    } else {\n      setSelectedTicketId(ticketId);\n    }\n  };\n\n  const handleTicketAction = async (ticketId: string, action: string, data?: any) => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) return;\n\n      if (action === 'update_status') {\n        const { error } = await supabase\n          .from('tickets')\n          .update({ status: data.status })\n          .eq('id', ticketId);\n\n        if (error) throw error;\n      } \n      else if (action === 'update_priority') {\n        const { error } = await supabase\n          .from('tickets')\n          .update({ priority: data.priority })\n          .eq('id', ticketId);\n\n        if (error) throw error;\n      }\n      else if (action === 'set_due_date') {\n        const { error } = await supabase\n          .from('tickets')\n          .update({ due_date: data.due_date })\n          .eq('id', ticketId);\n\n        if (error) throw error;\n      }\n      else if (action === 'add_note') {\n        const { data: ticketData, error: getError } = await supabase\n          .from('tickets')\n          .select('notes')\n          .eq('id', ticketId)\n          .single();\n\n        if (getError) throw getError;\n\n        const notes = ticketData.notes || [];\n        notes.push({\n          text: data.note,\n          added_by: user.id,\n          added_at: new Date().toISOString()\n        });\n\n        const { error: updateError } = await supabase\n          .from('tickets')\n          .update({ notes })\n          .eq('id', ticketId);\n\n        if (updateError) throw updateError;\n      }\n      else if (action === 'reply') {\n        const { error } = await supabase\n          .from('user_messages')\n          .insert({\n            sender_id: user.id,\n            recipient_id: data.recipientId,\n            subject: data.subject || `Re: Ticket #${ticketId}`,\n            message: data.message,\n            related_ticket: ticketId,\n            read: false,\n            created_at: new Date().toISOString()\n          });\n\n        if (error) throw error;\n      }\n      else if (action === 'update_task_progress') {\n        const ticket = userTickets.find(t => t.id === ticketId);\n        if (ticket && ticket.task_id) {\n          const { error } = await supabase\n            .from('project_sub_tasks')\n            .update({ completion_percentage: data.completion_percentage })\n            .eq('task_id', ticket.task_id);\n\n          if (error) throw error;\n        }\n      }\n      else if (action === 'log_time') {\n        const { error } = await supabase\n          .from('time_entries')\n          .insert({\n            ticket_id: ticketId,\n            user_id: user.id,\n            start_time: new Date().toISOString(),\n            end_time: new Date(new Date().getTime() + data.hours * 60 * 60 * 1000).toISOString(),\n            hours_logged: data.hours,\n            description: data.description\n          });\n\n        if (error) throw error;\n      }\n      \n      await loadUserTickets();\n      await loadAcceptedJobs();\n      \n    } catch (error) {\n      console.error(`Error handling ticket action ${action}:`, error);\n    }\n  };\n\n  const getGanttTasks = (): Task[] => {\n    return userTickets.map(ticket => ({\n      id: ticket.id,\n      name: ticket.title,\n      start: new Date(new Date().setDate(new Date().getDate() - 3)),\n      end: ticket.due_date ? new Date(ticket.due_date) : new Date(new Date().setDate(new Date().getDate() + 4)),\n      progress: ticket.status === 'done' ? 100 :\n               ticket.status === 'review' ? 75 :\n               ticket.status === 'in-progress' ? 50 :\n               ticket.status === 'blocked' ? 25 : 0,\n      type: 'task' as TaskType,\n      isDisabled: false\n    }));\n  };\n\n  const calculateTotalHoursLogged = (ticketId: string) => {\n    const entries = timeEntries.filter(entry => entry.ticket_id === ticketId);\n    return entries.reduce((sum, entry) => sum + (entry.hours_logged || 0), 0);\n  };\n\n  const renderTicketStats = () => {\n    return (\n      <div className=\"grid grid-cols-3 md:grid-cols-6 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\">{ticketStats.total}</div>\n              <p className=\"text-sm text-muted-foreground\">Total Tickets</p>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\">{ticketStats.todo}</div>\n              <p className=\"text-sm text-muted-foreground\">To Do</p>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\">{ticketStats.inProgress}</div>\n              <p className=\"text-sm text-muted-foreground\">In Progress</p>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\">{ticketStats.review}</div>\n              <p className=\"text-sm text-muted-foreground\">In Review</p>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\">{ticketStats.done}</div>\n              <p className=\"text-sm text-muted-foreground\">Done</p>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\">{ticketStats.closed}</div>\n              <p className=\"text-sm text-muted-foreground\">Closed</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  };\n\n  const renderAcceptedJobsTable = () => {\n    return (\n      <Card className=\"mt-6\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Info className=\"h-5 w-5\" />\n            Normalized Data: Accepted Jobs\n          </CardTitle>\n          <CardDescription>\n            Data from the normalized 'accepted_jobs' table (joined with job_applications)\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {acceptedJobs.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              No accepted jobs found in the normalized table.\n            </div>\n          ) : (\n            <div className=\"border rounded-md overflow-hidden\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50\">\n                  <tr>\n                    <th className=\"text-left p-3 text-xs font-medium\">ID</th>\n                    <th className=\"text-left p-3 text-xs font-medium\">Job Application ID</th>\n                    <th className=\"text-left p-3 text-xs font-medium\">Date Accepted</th>\n                    <th className=\"text-left p-3 text-xs font-medium\">Equity Agreed</th>\n                    <th className=\"text-left p-3 text-xs font-medium\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {acceptedJobs.map((job) => (\n                    <tr key={job.id} className=\"border-t\">\n                      <td className=\"p-3 text-sm\">{job.id.substring(0, 8)}...</td>\n                      <td className=\"p-3 text-sm\">{job.job_app_id.substring(0, 8)}...</td>\n                      <td className=\"p-3 text-sm\">{new Date(job.date_accepted).toLocaleDateString()}</td>\n                      <td className=\"p-3 text-sm\">{job.equity_agreed}%</td>\n                      <td className=\"p-3 text-sm\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            // Find corresponding ticket\n                            const ticket = userTickets.find(t => t.job_app_id === job.job_app_id);\n                            if (ticket) {\n                              setSelectedTicketId(ticket.id);\n                            }\n                          }}\n                        >\n                          View Ticket\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const renderDenormalizedProjectsTable = () => {\n    return (\n      <Card className=\"mt-6\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Info className=\"h-5 w-5\" />\n            Denormalized Data: Jobseeker Active Projects\n          </CardTitle>\n          <CardDescription>\n            Data from the denormalized 'jobseeker_active_projects' view\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {denormalizedProjects.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              No active projects found in the denormalized view.\n            </div>\n          ) : (\n            <div className=\"border rounded-md overflow-hidden\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50\">\n                  <tr>\n                    <th className=\"text-left p-3 text-xs font-medium\">Project</th>\n                    <th className=\"text-left p-3 text-xs font-medium\">Task</th>\n                    <th className=\"text-left p-3 text-xs font-medium\">Status</th>\n                    <th className=\"text-left p-3 text-xs font-medium\">Equity</th>\n                    <th className=\"text-left p-3 text-xs font-medium\">Completion</th>\n                    <th className=\"text-left p-3 text-xs font-medium\">Hours Logged</th>\n                    <th className=\"text-left p-3 text-xs font-medium\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {denormalizedProjects.map((project) => (\n                    <tr key={project.job_app_id || project.ticket_id} className=\"border-t\">\n                      <td className=\"p-3 text-sm\">{project.project_title || 'Unknown'}</td>\n                      <td className=\"p-3 text-sm\">{project.ticket_title || 'Unknown'}</td>\n                      <td className=\"p-3 text-sm\">\n                        <Badge variant={\n                          project.ticket_status === 'done' ? 'success' : \n                          project.ticket_status === 'in-progress' ? 'secondary' : 'default'\n                        }>\n                          {project.ticket_status || project.application_status || 'Unknown'}\n                        </Badge>\n                      </td>\n                      <td className=\"p-3 text-sm\">{project.equity_agreed || project.equity_points || 0}%</td>\n                      <td className=\"p-3 text-sm\">{project.project_completion || 0}%</td>\n                      <td className=\"p-3 text-sm\">{project.total_hours_logged || 0} hrs</td>\n                      <td className=\"p-3 text-sm\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            if (project.ticket_id) {\n                              setSelectedTicketId(project.ticket_id);\n                            }\n                          }}\n                        >\n                          View Ticket\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const renderTicketManagementUI = () => {\n    return (\n      <div className=\"space-y-6\">\n        {renderTicketStats()}\n        \n        <Card>\n          <CardHeader>\n            <CardTitle>Project Tasks</CardTitle>\n            <CardDescription>Track and manage your project tasks</CardDescription>\n            <div className=\"flex gap-2 mt-2\">\n              <TabsList>\n                <TabsTrigger\n                  value=\"kanban\"\n                  className={selectedTab === 'kanban' ? 'bg-primary text-primary-foreground' : ''}\n                  onClick={() => setSelectedTab('kanban')}\n                >\n                  Kanban\n                </TabsTrigger>\n                <TabsTrigger\n                  value=\"gantt\"\n                  className={selectedTab === 'gantt' ? 'bg-primary text-primary-foreground' : ''}\n                  onClick={() => setSelectedTab('gantt')}\n                >\n                  Gantt\n                </TabsTrigger>\n              </TabsList>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => {\n                  loadUserTickets();\n                  loadAcceptedJobs();\n                }}\n              >\n                Refresh\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"relative\">\n              <div className={selectedTab === 'kanban' ? 'block' : 'hidden'}>\n                <DragDropContext onDragEnd={(result) => {\n                  if (!result.destination) return;\n                  const { draggableId, destination } = result;\n                  \n                  handleTicketAction(\n                    draggableId,\n                    'update_status',\n                    { status: destination.droppableId }\n                  );\n                }}>\n                  <KanbanBoard \n                    tickets={betaTickets} \n                    onStatusChange={(ticketId, newStatus) => \n                      handleTicketAction(ticketId, 'update_status', { status: newStatus })\n                    }\n                    onTicketClick={toggleTicketExpanded}\n                  />\n                </DragDropContext>\n              </div>\n              <div className={selectedTab === 'gantt' ? 'block' : 'hidden'}>\n                <GanttChartView tasks={getGanttTasks()} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {renderAcceptedJobsTable()}\n        {renderDenormalizedProjectsTable()}\n\n        {selectedTicketId && (\n          <Card className=\"mt-6\">\n            <CardHeader>\n              <CardTitle>\n                {userTickets.find(t => t.id === selectedTicketId)?.title || 'Ticket Details'}\n              </CardTitle>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setSelectedTicketId(null)}\n              >\n                Close\n              </Button>\n            </CardHeader>\n            <CardContent className=\"space-y-8\">\n              <ExpandedTicketDetails\n                ticket={userTickets.find(t => t.id === selectedTicketId) || null}\n                messages={ticketMessages.filter(m => m.related_ticket === selectedTicketId)}\n                onReply={(message) => \n                  handleTicketAction(selectedTicketId, 'reply', { \n                    message,\n                    recipientId: userTickets.find(t => t.id === selectedTicketId)?.assigned_to\n                  })\n                }\n                onStatusChange={(status) => \n                  handleTicketAction(selectedTicketId, 'update_status', { status })\n                }\n                onPriorityChange={(priority) => \n                  handleTicketAction(selectedTicketId, 'update_priority', { priority })\n                }\n              />\n              \n              {selectedTicketId && (\n                <div className=\"border rounded-md p-4 bg-card\">\n                  <h3 className=\"text-lg font-medium mb-4\">Time Tracking</h3>\n                  {profile && (\n                    <TimeTracker \n                      ticketId={selectedTicketId}\n                      userId={profile.id}\n                      jobAppId={userTickets.find(t => t.id === selectedTicketId)?.job_app_id}\n                    />\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    );\n  };\n\n  const dashboardData = {\n    profile,\n    cvUrl,\n    parsedCvData,\n    setCvUrl: () => {},\n    setParsedCvData: () => {},\n    skills,\n    applications,\n    availableOpportunities,\n    equityProjects,\n    handleSkillsUpdate,\n    logEffort: { projectId: '', hours: 0, description: '' },\n    onLogEffort: () => {},\n    onLogEffortChange: () => {},\n    userTickets,\n    ticketMessages,\n    onTicketAction: handleTicketAction,\n    userCVs,\n    onCvListUpdated\n  };\n\n  return (\n    <>\n      <div className=\"space-y-6\">\n        <ProjectsOverview \n          currentProjects={equityProjects}\n          pastProjects={[]}\n          onDocumentAction={onDocumentAction}\n          userTickets={userTickets}\n          onTicketAction={handleTicketAction}\n          refreshTickets={loadUserTickets}\n        />\n      </div>\n\n      {activeTab === 'tickets' && renderTicketManagementUI()}\n      \n      {activeTab === 'dashboard' && (\n        <DashboardContent \n          activeTab={activeTab} \n          dashboardData={dashboardData}\n          refreshApplications={refreshApplications}\n        />\n      )}\n    </>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/tabs/JobSeekerProjectsTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2192,2195],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2192,2195],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadNdaForTicket'. Either include it or remove the dependency array.","line":70,"column":6,"nodeType":"ArrayExpression","endLine":70,"endColumn":24,"suggestions":[{"desc":"Update the dependencies array to be: [loadNdaForTicket, selectedTicketId]","fix":{"range":[2510,2528],"text":"[loadNdaForTicket, selectedTicketId]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3456,3459],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3456,3459],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { CreateTicketDialog } from \"@/components/ticket/CreateTicketDialog\";\nimport { TimeLogDialog } from \"../TimeLogDialog\";\nimport { useProjectsTabs } from \"../projects/useProjectsTabs\";\nimport { ProjectsHeader } from \"../projects/ProjectsHeader\";\nimport { StatisticsCards } from \"../projects/StatisticsCards\";\nimport { ProjectTabContent } from \"../projects/ProjectTabContent\";\nimport { DeleteTicketDialog } from \"@/components/ticket/details/DeleteTicketDialog\";\nimport { toast } from \"sonner\";\nimport { useNDAManagement } from \"@/hooks/useNDAManagement\";\nimport { DocumentViewer } from \"@/components/documents/DocumentViewer\";\nimport { NDASignatureDialog } from \"@/components/documents/NDASignatureDialog\";\nimport { supabase } from \"@/lib/supabase\";\n\ninterface JobSeekerProjectsTabProps {\n  userId?: string;\n}\n\nexport const JobSeekerProjectsTab = ({ userId }: JobSeekerProjectsTabProps) => {\n  const {\n    activeTab,\n    setActiveTab,\n    projects,\n    selectedProject,\n    taskStats,\n    isCreateTicketDialogOpen,\n    setIsCreateTicketDialogOpen,\n    showKanban,\n    showGantt,\n    isTimeLogDialogOpen,\n    setIsTimeLogDialogOpen,\n    selectedTicketId,\n    expandedTickets,\n    ticketToDelete,\n    isDeleteDialogOpen,\n    setIsDeleteDialogOpen,\n    handleTicketAction,\n    confirmTicketDeletion,\n    handleDeleteTicket,\n    handleLogTime,\n    handleTimeLogged,\n    handleRefresh,\n    handleProjectChange,\n    handleCreateTicket,\n    handleTicketCreated,\n    getActiveTickets,\n    toggleKanbanView,\n    toggleGanttView,\n    toggleTicketExpansion,\n    handleDragEnd\n  } = useProjectsTabs(userId);\n\n  const { getNDAForJobApplication, isLoadingDocuments } = useNDAManagement();\n  \n  const [deleteErrorMessage, setDeleteErrorMessage] = useState<string | undefined>();\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [selectedJobApplication, setSelectedJobApplication] = useState<string | null>(null);\n  const [ndaDocument, setNdaDocument] = useState<any | null>(null);\n  const [isNdaDialogOpen, setIsNdaDialogOpen] = useState(false);\n  const [isSignatureDialogOpen, setIsSignatureDialogOpen] = useState(false);\n\n  // Load NDA document for the selected project/ticket\n  useEffect(() => {\n    if (selectedTicketId) {\n      loadNdaForTicket(selectedTicketId);\n    }\n  }, [selectedTicketId]);\n\n  const loadNdaForTicket = async (ticketId: string) => {\n    try {\n      // First get the job application ID for this ticket\n      const { data: ticket, error: ticketError } = await supabase\n        .from('tickets')\n        .select('job_app_id')\n        .eq('id', ticketId)\n        .single();\n        \n      if (ticketError || !ticket?.job_app_id) return;\n      \n      setSelectedJobApplication(ticket.job_app_id);\n      \n      // Then load the NDA document\n      const document = await getNDAForJobApplication(ticket.job_app_id);\n      setNdaDocument(document);\n    } catch (error) {\n      console.error(\"Error loading NDA for ticket:\", error);\n    }\n  };\n\n  const handleConfirmDelete = async () => {\n    if (!ticketToDelete) return;\n    \n    setIsDeleting(true);\n    setDeleteErrorMessage(undefined);\n    \n    try {\n      await handleDeleteTicket();\n      toast.success(\"Ticket deleted successfully\");\n    } catch (error: any) {\n      console.error(\"Error deleting ticket:\", error);\n      \n      // Create a user-friendly error message based on the error\n      let errorMessage = \"Failed to delete ticket\";\n      if (error?.message) {\n        if (error.message.includes(\"time entries\")) {\n          errorMessage = \"Cannot delete ticket with time entries\";\n        } else if (error.message.includes(\"completion progress\")) {\n          errorMessage = \"Cannot delete ticket with completion progress\";\n        } else if (error.message.includes(\"legal documents\")) {\n          errorMessage = \"Cannot delete ticket with associated legal documents\";\n        } else {\n          errorMessage = `${error.message}`;\n        }\n      }\n      \n      setDeleteErrorMessage(errorMessage);\n      throw error; // Re-throw for the DeleteTicketDialog to handle\n    } finally {\n      setIsDeleting(false);\n    }\n  };\n\n  const handleViewNda = () => {\n    setIsNdaDialogOpen(true);\n  };\n\n  const handleSignNda = () => {\n    setIsSignatureDialogOpen(true);\n  };\n\n  const handleNdaSigned = () => {\n    // Refresh documents after signing\n    if (selectedJobApplication) {\n      getNDAForJobApplication(selectedJobApplication).then(doc => {\n        setNdaDocument(doc);\n      });\n    }\n    toast.success(\"NDA signed successfully\");\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col space-y-2\">\n        <h2 className=\"text-2xl font-bold\">My Projects</h2>\n        <p className=\"text-muted-foreground\">View and manage your project tasks</p>\n      </div>\n\n      <ProjectsHeader\n        projects={projects}\n        selectedProject={selectedProject}\n        showKanban={showKanban}\n        showGantt={showGantt}\n        onProjectChange={handleProjectChange}\n        onToggleKanban={toggleKanbanView}\n        onToggleGantt={toggleGanttView}\n        onRefresh={handleRefresh}\n        onCreateTicket={handleCreateTicket}\n      />\n\n      <StatisticsCards taskStats={taskStats} />\n      \n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"mb-4\">\n          <TabsTrigger value=\"all-tickets\">All Tickets</TabsTrigger>\n          <TabsTrigger value=\"project-tasks\">Project Tasks</TabsTrigger>\n          <TabsTrigger value=\"project-tickets\">Project Tickets</TabsTrigger>\n          <TabsTrigger value=\"beta-testing\">Beta Testing Tickets</TabsTrigger>\n          <TabsTrigger value=\"documents\">Legal Documents</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value={activeTab !== 'documents' ? activeTab : ''}>\n          <ProjectTabContent\n            activeTickets={getActiveTickets()}\n            showKanban={showKanban}\n            showGantt={showGantt}\n            onRefresh={handleRefresh}\n            onTicketAction={handleTicketAction}\n            onLogTime={handleLogTime}\n            userId={userId || ''}\n            expandedTickets={expandedTickets}\n            toggleTicketExpansion={toggleTicketExpansion}\n            onDeleteTicket={confirmTicketDeletion}\n            handleDragEnd={handleDragEnd}\n          />\n        </TabsContent>\n        \n        <TabsContent value=\"documents\">\n          <div className=\"space-y-4\">\n            {ndaDocument ? (\n              <DocumentViewer \n                documentId={ndaDocument.id}\n                documentType=\"nda\"\n                documentTitle=\"Non-Disclosure Agreement\"\n                documentContent={ndaDocument.content}\n                documentStatus={ndaDocument.status}\n                onSign={ndaDocument.status === 'final' ? handleSignNda : undefined}\n              />\n            ) : selectedJobApplication ? (\n              <Card className=\"p-6 flex flex-col items-center justify-center min-h-[200px]\">\n                {isLoadingDocuments ? (\n                  <div className=\"text-center\">\n                    <div className=\"spinner h-8 w-8 animate-spin rounded-full border-4 border-gray-300 border-t-blue-600 mx-auto mb-2\"></div>\n                    <p>Loading documents...</p>\n                  </div>\n                ) : (\n                  <div className=\"text-center\">\n                    <p className=\"mb-4\">No legal documents found for this project.</p>\n                  </div>\n                )}\n              </Card>\n            ) : (\n              <Card className=\"p-6 flex flex-col items-center justify-center min-h-[200px]\">\n                <p className=\"mb-4\">Select a project or ticket to view associated legal documents.</p>\n                <Button variant=\"outline\" onClick={handleRefresh}>Refresh</Button>\n              </Card>\n            )}\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      <CreateTicketDialog\n        open={isCreateTicketDialogOpen}\n        onClose={() => setIsCreateTicketDialogOpen(false)}\n        onCreateTicket={handleTicketCreated}\n        projects={projects}\n      />\n\n      {selectedTicketId && userId && (\n        <TimeLogDialog\n          open={isTimeLogDialogOpen}\n          onClose={() => setIsTimeLogDialogOpen(false)}\n          ticketId={selectedTicketId}\n          userId={userId}\n          onTimeLogged={handleTimeLogged}\n        />\n      )}\n\n      {ticketToDelete && (\n        <DeleteTicketDialog\n          open={isDeleteDialogOpen}\n          onOpenChange={setIsDeleteDialogOpen}\n          onConfirm={handleConfirmDelete}\n          isDeleting={isDeleting}\n          ticketTitle={ticketToDelete.title}\n          errorMessage={deleteErrorMessage}\n        />\n      )}\n\n      {selectedJobApplication && (\n        <NDASignatureDialog\n          open={isSignatureDialogOpen}\n          onOpenChange={setIsSignatureDialogOpen}\n          jobApplicationId={selectedJobApplication}\n          onSigned={handleNdaSigned}\n        />\n      )}\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/tabs/OpportunitiesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/tabs/ProfileTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[382,385],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[382,385],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { ProfileSection } from \"@/components/job-seeker/ProfileSection\";\nimport { Profile, Skill } from \"@/types/jobSeeker\";\nimport { CVFile } from \"@/hooks/job-seeker/useCVData\";\nimport { AccountSettingsCard } from \"@/components/shared/AccountSettingsCard\";\n\ninterface ProfileTabProps {\n  profile: Profile | null;\n  cvUrl: string | null;\n  skills: Skill[] | null;\n  parsedCvData: any;\n  onSkillsUpdate: (updatedSkills: Skill[]) => Promise<void>;\n  userCVs?: CVFile[];\n  onCvListUpdated?: () => void;\n}\n\nexport const ProfileTab = ({\n  profile,\n  cvUrl,\n  skills,\n  parsedCvData,\n  onSkillsUpdate,\n  userCVs = [],\n  onCvListUpdated = () => {},\n}: ProfileTabProps) => {\n  return (\n    <div className=\"space-y-6\">\n      <ProfileSection\n        profile={profile}\n        cvUrl={cvUrl}\n        skills={skills}\n        parsedCvData={parsedCvData}\n        onSkillsUpdate={onSkillsUpdate}\n        setCvUrl={() => {}}\n        setParsedCvData={() => {}}\n        userCVs={userCVs}\n        onCvListUpdated={onCvListUpdated}\n      />\n      \n      {/* Add account settings card at the bottom of the profile tab */}\n      <AccountSettingsCard userType=\"job_seeker\" />\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/dashboard/tickets/TicketsList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[674,677],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[674,677],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[776,779],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[776,779],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1104,1107],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1104,1107],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1801,1804],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1801,1804],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { TicketMessage, KanbanColumn } from \"@/types/dashboard\";\nimport { AlertTriangle, CheckCircle2, Clock, MessageCircle } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CreateMessageDialog } from \"@/components/job-seeker/dashboard/applications/CreateMessageDialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport KanbanBoard from \"@/components/ui/kanban-board\";\n\ninterface TicketsListProps {\n  userTickets: any[];\n  ticketMessages: TicketMessage[];\n  onTicketAction: (ticketId: string, action: string, data?: any) => void;\n}\n\nexport const TicketsList = ({ userTickets, ticketMessages, onTicketAction }: TicketsListProps) => {\n  const [selectedTicketId, setSelectedTicketId] = useState<string | null>(null);\n  const [isMessageDialogOpen, setIsMessageDialogOpen] = useState(false);\n  const [tickets, setTickets] = useState<{[key: string]: any}>({});\n  const [columns, setColumns] = useState<{[key: string]: KanbanColumn}>({\n    'new': { id: 'new', title: 'New', ticketIds: [] },\n    'in-progress': { id: 'in-progress', title: 'In Progress', ticketIds: [] },\n    'review': { id: 'review', title: 'Review', ticketIds: [] },\n    'done': { id: 'done', title: 'Done', ticketIds: [] },\n    'blocked': { id: 'blocked', title: 'Blocked', ticketIds: [] }\n  });\n  const [activeTab, setActiveTab] = useState('list');\n\n  // Use the ticketMessages directly from props instead of fetching again\n  useEffect(() => {\n    if (userTickets.length > 0) {\n      // Process tickets into format needed for kanban board\n      const newTickets: {[key: string]: any} = {};\n      const newColumns = {\n        'new': { id: 'new', title: 'New', ticketIds: [] },\n        'in-progress': { id: 'in-progress', title: 'In Progress', ticketIds: [] },\n        'review': { id: 'review', title: 'Review', ticketIds: [] },\n        'done': { id: 'done', title: 'Done', ticketIds: [] },\n        'blocked': { id: 'blocked', title: 'Blocked', ticketIds: [] }\n      };\n      \n      userTickets.forEach(ticket => {\n        newTickets[ticket.id] = {\n          id: ticket.id,\n          title: ticket.title,\n          description: ticket.description,\n          priority: ticket.priority,\n          status: ticket.status,\n          due_date: ticket.due_date\n        };\n        \n        // Map status to column\n        const columnId = ticket.status === 'closed' ? 'done' : ticket.status;\n        if (newColumns[columnId]) {\n          newColumns[columnId].ticketIds.push(ticket.id);\n        } else {\n          // Default to new column if status doesn't match\n          newColumns['new'].ticketIds.push(ticket.id);\n        }\n      });\n      \n      setTickets(newTickets);\n      setColumns(newColumns);\n    }\n  }, [userTickets]);\n\n  const handleSendMessage = async (message: string) => {\n    if (selectedTicketId) {\n      await onTicketAction(selectedTicketId, 'reply', { message });\n      setIsMessageDialogOpen(false);\n    }\n  };\n\n  const handleTicketMove = async (ticketId: string, newStatus: string) => {\n    try {\n      await onTicketAction(ticketId, 'update_status', { status: newStatus });\n      \n      // Update local state to reflect the change\n      const startColumn = Object.values(columns).find(col => \n        col.ticketIds.includes(ticketId)\n      );\n      \n      if (startColumn && columns[newStatus]) {\n        const newColumns = { ...columns };\n        \n        // Remove from current column\n        newColumns[startColumn.id].ticketIds = newColumns[startColumn.id].ticketIds\n          .filter(id => id !== ticketId);\n        \n        // Add to new column\n        newColumns[newStatus].ticketIds.push(ticketId);\n        \n        setColumns(newColumns);\n      }\n    } catch (error) {\n      console.error(\"Error moving ticket:\", error);\n    }\n  };\n\n  const handleTicketClick = (ticketId: string) => {\n    setSelectedTicketId(ticketId);\n    setIsMessageDialogOpen(true);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  // Get ticket messages for a specific ticket from the provided ticketMessages prop\n  const getTicketMessages = (ticketId: string) => {\n    return ticketMessages.filter(msg => msg.ticketId === ticketId);\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle>My Tickets</CardTitle>\n            <CardDescription>Your reported issues and tasks</CardDescription>\n          </div>\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-auto\">\n            <TabsList>\n              <TabsTrigger value=\"list\">List View</TabsTrigger>\n              <TabsTrigger value=\"board\">Board View</TabsTrigger>\n            </TabsList>\n          </Tabs>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <TabsContent value=\"list\" className=\"mt-0\">\n          {userTickets.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <AlertTriangle className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\n              <p className=\"text-lg font-medium text-gray-700\">No tickets found</p>\n              <p className=\"text-sm text-gray-500 mt-1\">\n                You haven't reported any issues yet or no tickets have been assigned to you.\n              </p>\n              <p className=\"text-sm text-gray-500 mt-3\">\n                Use the \"Report Beta Issue\" button to report problems or request features.\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {userTickets.map(ticket => (\n                <div key={ticket.id} className=\"border rounded-lg p-4\">\n                  <div className=\"flex justify-between items-start\">\n                    <div>\n                      <h3 className=\"font-medium text-lg\">{ticket.title}</h3>\n                      <p className=\"text-sm text-gray-500 mt-1\">{ticket.description}</p>\n                      <div className=\"flex gap-2 mt-2\">\n                        <Badge className={getStatusColor(ticket.status)}>\n                          {getStatusIcon(ticket.status)} \n                          <span className=\"ml-1\">{ticket.status}</span>\n                        </Badge>\n                        <Badge className={getPriorityColor(ticket.priority)}>\n                          {ticket.priority}\n                        </Badge>\n                        {ticket.due_date && (\n                          <Badge variant=\"outline\">\n                            Due: {formatDate(ticket.due_date)}\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        setSelectedTicketId(ticket.id);\n                        setIsMessageDialogOpen(true);\n                      }}\n                    >\n                      <MessageCircle className=\"h-4 w-4 mr-1\" />\n                      Reply\n                    </Button>\n                  </div>\n\n                  {/* Show ticket messages if present */}\n                  {getTicketMessages(ticket.id).length > 0 && (\n                    <div className=\"mt-4 border-t pt-3\">\n                      <h4 className=\"text-sm font-medium mb-2\">Messages</h4>\n                      <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n                        {getTicketMessages(ticket.id).map((msg, idx) => (\n                          <div \n                            key={msg.id || idx} \n                            className=\"bg-gray-50 p-3 rounded text-sm\"\n                          >\n                            <div className=\"flex justify-between items-start\">\n                              <p className=\"font-medium\">{msg.subject || 'Reply'}</p>\n                              <span className=\"text-xs text-gray-500\">\n                                {formatDate(msg.createdAt)}\n                              </span>\n                            </div>\n                            <p className=\"mt-1\">{msg.message}</p>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n        \n        <TabsContent value=\"board\" className=\"mt-0\">\n          {userTickets.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <AlertTriangle className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\n              <p className=\"text-lg font-medium text-gray-700\">No tickets found</p>\n              <p className=\"text-sm text-gray-500 mt-1\">\n                You haven't reported any issues yet or no tickets have been assigned to you.\n              </p>\n            </div>\n          ) : (\n            <KanbanBoard \n              columns={columns}\n              tickets={tickets}\n              onTicketMove={handleTicketMove}\n              onTicketClick={handleTicketClick}\n              formatDate={formatDate}\n            />\n          )}\n        </TabsContent>\n      </CardContent>\n\n      <CreateMessageDialog\n        isOpen={isMessageDialogOpen}\n        onOpenChange={setIsMessageDialogOpen}\n        onSendMessage={handleSendMessage}\n        applicationId={selectedTicketId || ''}\n        onMessageSent={() => {\n          setSelectedTicketId(null);\n        }}\n      />\n    </Card>\n  );\n  \n  // Helper functions for displaying status information\n  function getStatusIcon(status: string) {\n    switch (status) {\n      case 'new':\n        return <Clock className=\"h-4 w-4 text-blue-500\" />;\n      case 'in-progress':\n        return <Clock className=\"h-4 w-4 text-yellow-500\" />;\n      case 'blocked':\n        return <AlertTriangle className=\"h-4 w-4 text-red-500\" />;\n      case 'done':\n      case 'closed':\n        return <CheckCircle2 className=\"h-4 w-4 text-green-500\" />;\n      default:\n        return <Clock className=\"h-4 w-4 text-blue-500\" />;\n    }\n  }\n\n  function getStatusColor(status: string) {\n    switch (status) {\n      case 'new':\n        return 'bg-blue-100 text-blue-800';\n      case 'in-progress':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'blocked':\n        return 'bg-red-100 text-red-800';\n      case 'review':\n        return 'bg-purple-100 text-purple-800';\n      case 'done':\n        return 'bg-green-100 text-green-800';\n      case 'closed':\n        return 'bg-gray-100 text-gray-800';\n      default:\n        return 'bg-blue-100 text-blue-800';\n    }\n  }\n\n  function getPriorityColor(priority: string) {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-100 text-red-800';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'low':\n        return 'bg-green-100 text-green-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/profile/AvailabilitySelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/profile/ConsentCheckboxes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/profile/PersonalInfoFields.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/profile/ProfileEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/job-seeker/skills/SkillsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/landing/ContractProcessExplanation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/landing/RegistrationProcess.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/projects/ApplicationForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1001,1004],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1001,1004],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkNDARequirement'. Either include it or remove the dependency array.","line":63,"column":6,"nodeType":"ArrayExpression","endLine":63,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [checkNDARequirement, projectId]","fix":{"range":[1992,2003],"text":"[checkNDARequirement, projectId]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { supabase } from \"@/lib/supabase\";\nimport { toast } from \"sonner\";\nimport { Loader2, Check } from \"lucide-react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useNDAIntegration } from \"@/hooks/useNDAIntegration\";\nimport { DocumentViewer } from \"@/components/documents/DocumentViewer\";\n\ninterface ApplicationFormProps {\n  projectId: string;\n  taskId: string;\n  projectTitle?: string;\n  taskTitle?: string;\n}\n\nexport const ApplicationForm = ({\n  projectId,\n  taskId,\n  projectTitle = \"Project\",\n  taskTitle = \"Role\"\n}: ApplicationFormProps) => {\n  const [message, setMessage] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [businessId, setBusinessId] = useState<string>(\"\");\n  const [ndaDocumentId, setNdaDocumentId] = useState<string | null>(null);\n  const [ndaDocument, setNdaDocument] = useState<any>(null);\n  const [ndaStatus, setNdaStatus] = useState<string | null>(null);\n  const [requiresNDA, setRequiresNDA] = useState<boolean>(false);\n  const navigate = useNavigate();\n  \n  const { \n    isProcessingNDA,\n    checkNDARequirement,\n    getNDAForJobApplication,\n    generateApplicationNDA \n  } = useNDAIntegration();\n\n  // Get business ID for the project\n  useEffect(() => {\n    const getBusinessId = async () => {\n      try {\n        const { data, error } = await supabase\n          .from(\"business_projects\")\n          .select(\"business_id\")\n          .eq(\"project_id\", projectId)\n          .single();\n\n        if (error) throw error;\n        if (data) setBusinessId(data.business_id);\n        \n        // Check if project requires NDA\n        const needsNDA = await checkNDARequirement(projectId);\n        setRequiresNDA(needsNDA);\n      } catch (error) {\n        console.error(\"Error fetching project business ID:\", error);\n      }\n    };\n\n    if (projectId) getBusinessId();\n  }, [projectId]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!projectId || !taskId) {\n      toast.error(\"Missing project or task information\");\n      return;\n    }\n\n    try {\n      setIsSubmitting(true);\n\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) {\n        toast.error(\"You must be logged in to apply\");\n        return;\n      }\n\n      // Create job application\n      const { data: applicationData, error: applicationError } = await supabase\n        .from(\"job_applications\")\n        .insert({\n          user_id: session.user.id,\n          task_id: taskId,\n          project_id: projectId,\n          message,\n          status: \"pending\",\n          applied_at: new Date().toISOString()\n        })\n        .select(\"job_app_id\")\n        .single();\n\n      if (applicationError) throw applicationError;\n      \n      // If project requires NDA, generate it\n      if (requiresNDA && applicationData?.job_app_id && businessId) {\n        await generateApplicationNDA(\n          applicationData.job_app_id,\n          businessId,\n          session.user.id,\n          projectId\n        );\n      }\n\n      toast.success(\"Application submitted successfully\");\n      navigate(\"/seeker/dashboard?tab=applications\");\n    } catch (error) {\n      console.error(\"Error submitting application:\", error);\n      toast.error(\"Failed to submit application\");\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-lg font-medium mb-2\">\n          Apply to: {taskTitle}\n        </h2>\n        <p className=\"text-sm text-muted-foreground mb-6\">\n          Project: {projectTitle}\n        </p>\n        \n        {requiresNDA && (\n          <div className=\"mb-6\">\n            <div className=\"bg-amber-50 border border-amber-200 rounded-md p-4 mb-4\">\n              <h3 className=\"text-sm font-medium text-amber-800 mb-1\">\n                Non-Disclosure Agreement Required\n              </h3>\n              <p className=\"text-sm text-amber-700\">\n                This project requires a Non-Disclosure Agreement (NDA). By submitting your application, an NDA will be automatically generated for you to review and sign.\n              </p>\n            </div>\n          </div>\n        )}\n        \n        <div className=\"mb-6\">\n          <label htmlFor=\"message\" className=\"block text-sm font-medium mb-2\">\n            Application Message\n          </label>\n          <Textarea\n            id=\"message\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            placeholder=\"Describe why you're a good fit for this role and any relevant experience you have.\"\n            className=\"min-h-[150px]\"\n          />\n        </div>\n\n        <div className=\"flex justify-end\">\n          <Button\n            type=\"submit\"\n            className=\"w-full sm:w-auto\"\n            disabled={isSubmitting || isProcessingNDA}\n          >\n            {(isSubmitting || isProcessingNDA) ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                {isProcessingNDA ? \"Generating NDA...\" : \"Submitting...\"}\n              </>\n            ) : (\n              \"Submit Application\"\n            )}\n          </Button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/projects/ProjectDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/projects/ProjectHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/shared/AccountSettingsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/shared/BetaTestingButton.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'detectRelevantFiles' and 'fetchProjectSubTasks'. Either include them or remove the dependency array.","line":317,"column":6,"nodeType":"ArrayExpression","endLine":317,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, errorLocation, fetchProjectSubTasks, detectRelevantFiles]","fix":{"range":[24063,24086],"text":"[isOpen, errorLocation, fetchProjectSubTasks, detectRelevantFiles]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useRef, useEffect } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { AlertTriangle, Camera, Upload, X, Code, Plus } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { supabase } from \"@/lib/supabase\";\nimport { toast } from \"sonner\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { Badge } from \"@/components/ui/badge\";\nimport html2canvas from 'html2canvas';\n\ninterface SystemLogInfo {\n  url: string;\n  userAgent: string;\n  timestamp: string;\n  viewportSize: string;\n  referrer: string;\n}\n\ninterface ProjectSubTask {\n  id: string;\n  title: string;\n}\n\ninterface RelevantCodeFile {\n  path: string;\n  type: 'component' | 'page' | 'hook' | 'util' | 'api';\n  confidence: 'high' | 'medium' | 'low';\n  reason: string;\n}\n\n// Auto-generated route mapping from your codebase analysis\nconst ROUTE_TO_FILES_MAP: Record<string, RelevantCodeFile[]> = {\n  '/seeker/dashboard?tab=applications': [\n    { path: 'src\\\\components\\\\job-seeker\\\\ApplicationsList.tsx', type: 'component', confidence: 'high', reason: 'Component related to /seeker/dashboard?tab=applications' },\n    { path: 'src\\\\components\\\\job-seeker\\\\career\\\\CareerHistoryCard.tsx', type: 'component', confidence: 'high', reason: 'Component related to /seeker/dashboard?tab=applications' },\n    { path: 'src\\\\components\\\\job-seeker\\\\career\\\\CareerHistoryDisplay.tsx', type: 'component', confidence: 'high', reason: 'Component related to /seeker/dashboard?tab=applications' },\n    { path: 'src\\\\components\\\\job-seeker\\\\career\\\\CurrentPositionCard.tsx', type: 'component', confidence: 'high', reason: 'Component related to /seeker/dashboard?tab=applications' },\n    { path: 'src\\\\components\\\\job-seeker\\\\career\\\\EducationCard.tsx', type: 'component', confidence: 'high', reason: 'Component related to /seeker/dashboard?tab=applications' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\hooks\\\\useApplicationActions.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /seeker/dashboard?tab=applications data/logic' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\hooks\\\\useMessaging.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /seeker/dashboard?tab=applications data/logic' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\hooks\\\\useUserSkills.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /seeker/dashboard?tab=applications data/logic' },\n  ],\n  '/seeker/profile/complete': [\n    { path: 'src\\\\components\\\\business\\\\BusinessProfileCompletion.tsx', type: 'component', confidence: 'high', reason: 'Component related to /seeker/profile/complete' },\n    { path: 'src\\\\components\\\\business\\\\BusinessProfileEditor.tsx', type: 'component', confidence: 'high', reason: 'Component related to /seeker/profile/complete' },\n    { path: 'src\\\\components\\\\business\\\\profile\\\\BusinessProfileEditor.tsx', type: 'component', confidence: 'high', reason: 'Component related to /seeker/profile/complete' },\n    { path: 'src\\\\components\\\\job-seeker\\\\ApplicationsList.tsx', type: 'component', confidence: 'high', reason: 'Component related to /seeker/profile/complete' },\n    { path: 'src\\\\components\\\\job-seeker\\\\career\\\\CareerHistoryCard.tsx', type: 'component', confidence: 'high', reason: 'Component related to /seeker/profile/complete' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\hooks\\\\useApplicationActions.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /seeker/profile/complete data/logic' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\hooks\\\\useMessaging.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /seeker/profile/complete data/logic' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\hooks\\\\useUserSkills.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /seeker/profile/complete data/logic' },\n  ],\n  '/recruiter/dashboard': [\n    { path: 'src\\\\components\\\\business\\\\dashboard\\\\tabs\\\\BetaTestingTab.tsx', type: 'component', confidence: 'high', reason: 'Component related to /recruiter/dashboard' },\n    { path: 'src\\\\components\\\\dashboard\\\\TicketAttachmentsList.tsx', type: 'component', confidence: 'high', reason: 'Component related to /recruiter/dashboard' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\AcceptJobDialog.tsx', type: 'component', confidence: 'high', reason: 'Component related to /recruiter/dashboard' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\ApplicationContent.tsx', type: 'component', confidence: 'high', reason: 'Component related to /recruiter/dashboard' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\ApplicationHeader.tsx', type: 'component', confidence: 'high', reason: 'Component related to /recruiter/dashboard' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\hooks\\\\useApplicationActions.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /recruiter/dashboard data/logic' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\hooks\\\\useMessaging.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /recruiter/dashboard data/logic' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\hooks\\\\useUserSkills.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /recruiter/dashboard data/logic' },\n  ],\n  '/business/dashboard': [\n    { path: 'src\\\\components\\\\business\\\\ActiveRolesTable.tsx', type: 'component', confidence: 'high', reason: 'Component related to /business/dashboard' },\n    { path: 'src\\\\components\\\\business\\\\applications\\\\AcceptJobDialog.tsx', type: 'component', confidence: 'high', reason: 'Component related to /business/dashboard' },\n    { path: 'src\\\\components\\\\business\\\\applications\\\\ActiveProjectsTable.tsx', type: 'component', confidence: 'high', reason: 'Component related to /business/dashboard' },\n    { path: 'src\\\\components\\\\business\\\\applications\\\\ApplicationCard.tsx', type: 'component', confidence: 'high', reason: 'Component related to /business/dashboard' },\n    { path: 'src\\\\components\\\\business\\\\applications\\\\ApplicationsTable.tsx', type: 'component', confidence: 'high', reason: 'Component related to /business/dashboard' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\hooks\\\\useApplicationActions.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /business/dashboard data/logic' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\hooks\\\\useMessaging.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /business/dashboard data/logic' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\hooks\\\\useUserSkills.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /business/dashboard data/logic' },\n  ],\n  '/seeker/dashboard': [\n    { path: 'src\\\\components\\\\business\\\\dashboard\\\\tabs\\\\BetaTestingTab.tsx', type: 'component', confidence: 'high', reason: 'Component related to /seeker/dashboard' },\n    { path: 'src\\\\components\\\\dashboard\\\\TicketAttachmentsList.tsx', type: 'component', confidence: 'high', reason: 'Component related to /seeker/dashboard' },\n    { path: 'src\\\\components\\\\job-seeker\\\\ApplicationsList.tsx', type: 'component', confidence: 'high', reason: 'Component related to /seeker/dashboard' },\n    { path: 'src\\\\components\\\\job-seeker\\\\career\\\\CareerHistoryCard.tsx', type: 'component', confidence: 'high', reason: 'Component related to /seeker/dashboard' },\n    { path: 'src\\\\components\\\\job-seeker\\\\career\\\\CareerHistoryDisplay.tsx', type: 'component', confidence: 'high', reason: 'Component related to /seeker/dashboard' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\hooks\\\\useApplicationActions.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /seeker/dashboard data/logic' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\hooks\\\\useMessaging.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /seeker/dashboard data/logic' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\hooks\\\\useUserSkills.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /seeker/dashboard data/logic' },\n  ],\n  '/projects/apply': [\n    { path: 'src\\\\components\\\\business\\\\applications\\\\ActiveProjectsTable.tsx', type: 'component', confidence: 'high', reason: 'Component related to /projects/apply' },\n    { path: 'src\\\\components\\\\business\\\\projects\\\\BetaTestingTab.tsx', type: 'component', confidence: 'high', reason: 'Component related to /projects/apply' },\n    { path: 'src\\\\components\\\\business\\\\projects\\\\components\\\\ProjectStatsSummary.tsx', type: 'component', confidence: 'high', reason: 'Component related to /projects/apply' },\n    { path: 'src\\\\components\\\\business\\\\projects\\\\components\\\\ProjectTicketFilters.tsx', type: 'component', confidence: 'high', reason: 'Component related to /projects/apply' },\n    { path: 'src\\\\components\\\\business\\\\projects\\\\components\\\\ProjectTicketTabs.tsx', type: 'component', confidence: 'high', reason: 'Component related to /projects/apply' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\projects\\\\useProjectsTabs.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /projects/apply data/logic' },\n    { path: 'src\\\\hooks\\\\job-seeker\\\\useEquityProjects.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /projects/apply data/logic' },\n  ],\n  '/auth/recruiter': [\n    { path: 'src\\\\components\\\\auth\\\\LoginForm.tsx', type: 'component', confidence: 'high', reason: 'Component related to /auth/recruiter' },\n    { path: 'src\\\\components\\\\auth\\\\RegisterForm.tsx', type: 'component', confidence: 'high', reason: 'Component related to /auth/recruiter' },\n    { path: 'src\\\\pages\\\\Auth.tsx', type: 'component', confidence: 'high', reason: 'Component related to /auth/recruiter' },\n    { path: 'src\\\\pages\\\\AuthPage.tsx', type: 'component', confidence: 'high', reason: 'Component related to /auth/recruiter' },\n    { path: 'src\\\\pages\\\\dashboards\\\\RecruiterDashboard.tsx', type: 'component', confidence: 'high', reason: 'Component related to /auth/recruiter' },\n  ],\n  '/auth/business': [\n    { path: 'src\\\\components\\\\auth\\\\LoginForm.tsx', type: 'component', confidence: 'high', reason: 'Component related to /auth/business' },\n    { path: 'src\\\\components\\\\auth\\\\RegisterForm.tsx', type: 'component', confidence: 'high', reason: 'Component related to /auth/business' },\n    { path: 'src\\\\components\\\\business\\\\ActiveRolesTable.tsx', type: 'component', confidence: 'high', reason: 'Component related to /auth/business' },\n    { path: 'src\\\\components\\\\business\\\\applications\\\\AcceptJobDialog.tsx', type: 'component', confidence: 'high', reason: 'Component related to /auth/business' },\n    { path: 'src\\\\components\\\\business\\\\applications\\\\ActiveProjectsTable.tsx', type: 'component', confidence: 'high', reason: 'Component related to /auth/business' },\n  ],\n  '/auth/seeker': [\n    { path: 'src\\\\components\\\\auth\\\\LoginForm.tsx', type: 'component', confidence: 'high', reason: 'Component related to /auth/seeker' },\n    { path: 'src\\\\components\\\\auth\\\\RegisterForm.tsx', type: 'component', confidence: 'high', reason: 'Component related to /auth/seeker' },\n    { path: 'src\\\\components\\\\job-seeker\\\\ApplicationsList.tsx', type: 'component', confidence: 'high', reason: 'Component related to /auth/seeker' },\n    { path: 'src\\\\components\\\\job-seeker\\\\career\\\\CareerHistoryCard.tsx', type: 'component', confidence: 'high', reason: 'Component related to /auth/seeker' },\n    { path: 'src\\\\components\\\\job-seeker\\\\career\\\\CareerHistoryDisplay.tsx', type: 'component', confidence: 'high', reason: 'Component related to /auth/seeker' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\hooks\\\\useApplicationActions.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /auth/seeker data/logic' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\hooks\\\\useMessaging.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /auth/seeker data/logic' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\hooks\\\\useUserSkills.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /auth/seeker data/logic' },\n  ],\n  '/sweaquity': [\n    { path: 'src\\\\pages\\\\dashboards\\\\SweaquityDashboard.tsx', type: 'component', confidence: 'high', reason: 'Component related to /sweaquity' },\n  ],\n  '/dashboard': [\n    { path: 'src\\\\components\\\\business\\\\dashboard\\\\tabs\\\\BetaTestingTab.tsx', type: 'component', confidence: 'high', reason: 'Component related to /dashboard' },\n    { path: 'src\\\\components\\\\dashboard\\\\TicketAttachmentsList.tsx', type: 'component', confidence: 'high', reason: 'Component related to /dashboard' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\AcceptJobDialog.tsx', type: 'component', confidence: 'high', reason: 'Component related to /dashboard' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\ApplicationContent.tsx', type: 'component', confidence: 'high', reason: 'Component related to /dashboard' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\ApplicationHeader.tsx', type: 'component', confidence: 'high', reason: 'Component related to /dashboard' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\hooks\\\\useApplicationActions.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /dashboard data/logic' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\hooks\\\\useMessaging.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /dashboard data/logic' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\hooks\\\\useUserSkills.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /dashboard data/logic' },\n  ],\n  '/projects': [\n    { path: 'src\\\\components\\\\business\\\\applications\\\\ActiveProjectsTable.tsx', type: 'component', confidence: 'high', reason: 'Component related to /projects' },\n    { path: 'src\\\\components\\\\business\\\\projects\\\\BetaTestingTab.tsx', type: 'component', confidence: 'high', reason: 'Component related to /projects' },\n    { path: 'src\\\\components\\\\business\\\\projects\\\\components\\\\ProjectStatsSummary.tsx', type: 'component', confidence: 'high', reason: 'Component related to /projects' },\n    { path: 'src\\\\components\\\\business\\\\projects\\\\components\\\\ProjectTicketFilters.tsx', type: 'component', confidence: 'high', reason: 'Component related to /projects' },\n    { path: 'src\\\\components\\\\business\\\\projects\\\\components\\\\ProjectTicketTabs.tsx', type: 'component', confidence: 'high', reason: 'Component related to /projects' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\projects\\\\useProjectsTabs.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /projects data/logic' },\n    { path: 'src\\\\hooks\\\\job-seeker\\\\useEquityProjects.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /projects data/logic' },\n  ],\n  '/project': [\n    { path: 'src\\\\components\\\\business\\\\applications\\\\ActiveProjectsTable.tsx', type: 'component', confidence: 'high', reason: 'Component related to /project' },\n    { path: 'src\\\\components\\\\business\\\\ProjectApplicationsSection.tsx', type: 'component', confidence: 'high', reason: 'Component related to /project' },\n    { path: 'src\\\\components\\\\business\\\\projects\\\\BetaTestingTab.tsx', type: 'component', confidence: 'high', reason: 'Component related to /project' },\n    { path: 'src\\\\components\\\\business\\\\projects\\\\components\\\\ProjectStatsSummary.tsx', type: 'component', confidence: 'high', reason: 'Component related to /project' },\n    { path: 'src\\\\components\\\\business\\\\projects\\\\components\\\\ProjectTicketFilters.tsx', type: 'component', confidence: 'high', reason: 'Component related to /project' },\n    { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\projects\\\\useProjectsTabs.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /project data/logic' },\n    { path: 'src\\\\hooks\\\\job-seeker\\\\useEquityProjects.ts', type: 'hook', confidence: 'medium', reason: 'Hook for /project data/logic' },\n  ],\n  '/admin': [\n    { path: 'src\\\\components\\\\admin\\\\tickets\\\\AdminTicketManager.tsx', type: 'component', confidence: 'high', reason: 'Component related to /admin' },\n    { path: 'src\\\\pages\\\\dashboards\\\\AdminDashboard.tsx', type: 'component', confidence: 'high', reason: 'Component related to /admin' },\n  ],\n  '/login': [\n    { path: 'src\\\\components\\\\auth\\\\LoginForm.tsx', type: 'component', confidence: 'high', reason: 'Component related to /login' },\n    { path: 'src\\\\pages\\\\Login\\\\Business.tsx', type: 'component', confidence: 'high', reason: 'Component related to /login' },\n    { path: 'src\\\\pages\\\\Login\\\\Recruiter.tsx', type: 'component', confidence: 'high', reason: 'Component related to /login' },\n    { path: 'src\\\\pages\\\\Login\\\\Seeker.tsx', type: 'component', confidence: 'high', reason: 'Component related to /login' },\n  ],\n  '/auth': [\n    { path: 'src\\\\components\\\\auth\\\\LoginForm.tsx', type: 'component', confidence: 'high', reason: 'Component related to /auth' },\n    { path: 'src\\\\components\\\\auth\\\\RegisterForm.tsx', type: 'component', confidence: 'high', reason: 'Component related to /auth' },\n    { path: 'src\\\\pages\\\\Auth.tsx', type: 'component', confidence: 'high', reason: 'Component related to /auth' },\n    { path: 'src\\\\pages\\\\AuthPage.tsx', type: 'component', confidence: 'high', reason: 'Component related to /auth' },\n  ],\n};\n\n// Common files that might be relevant to any issue\nconst COMMON_FILES: RelevantCodeFile[] = [\n  { path: 'src\\\\App.tsx', type: 'component', confidence: 'low', reason: 'Global component: App.tsx' },\n  { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\index.tsx', type: 'component', confidence: 'low', reason: 'Global component: index.tsx' },\n  { path: 'src\\\\pages\\\\Index.tsx', type: 'component', confidence: 'low', reason: 'Global component: Index.tsx' },\n  { path: 'src\\\\components\\\\job-seeker\\\\dashboard\\\\applications\\\\hooks\\\\useUserSkills.ts', type: 'hook', confidence: 'medium', reason: 'Auth/user hook: useUserSkills.ts' },\n];\n\nexport function BetaTestingButton() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [description, setDescription] = useState('');\n  const [errorLocation, setErrorLocation] = useState('');\n  const [severity, setSeverity] = useState('medium');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [screenshots, setScreenshots] = useState<File[]>([]);\n  const [screenshotPreviews, setScreenshotPreviews] = useState<string[]>([]);\n  const [systemInfo, setSystemInfo] = useState<SystemLogInfo | null>(null);\n  const [projectSubTasks, setProjectSubTasks] = useState<ProjectSubTask[]>([]);\n  const [selectedSubTaskId, setSelectedSubTaskId] = useState<string>('');\n  const [isLoadingSubTasks, setIsLoadingSubTasks] = useState(false);\n  const [isCapturingScreenshot, setIsCapturingScreenshot] = useState(false);\n  const [relevantFiles, setRelevantFiles] = useState<RelevantCodeFile[]>([]);\n  const [customFilePath, setCustomFilePath] = useState('');\n  const [showCodeSection, setShowCodeSection] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [projectId, setProjectId] = useState('1ec133ba-26d6-4112-8e44-f0b67ddc8fb4');\n\n  // Function to detect relevant files based on current route\n  const detectRelevantFiles = (): RelevantCodeFile[] => {\n    const pathname = window.location.pathname;\n    const detectedFiles: RelevantCodeFile[] = [];\n    let foundExactMatch = false;\n    \n    // Check for exact route matches\n    if (ROUTE_TO_FILES_MAP[pathname]) {\n      detectedFiles.push(...ROUTE_TO_FILES_MAP[pathname]);\n      foundExactMatch = true;\n    }\n    \n    // Check for partial route matches (e.g., /project/123 matches /project)\n    for (const [route, files] of Object.entries(ROUTE_TO_FILES_MAP)) {\n      if (route !== pathname && pathname.startsWith(route + '/')) {\n        detectedFiles.push(...files.map(file => ({\n          ...file,\n          confidence: file.confidence === 'high' ? 'medium' : 'low' as 'medium' | 'low',\n          reason: `${file.reason} (partial route match)`\n        })));\n        foundExactMatch = true;\n      }\n    }\n    \n    // If no matches found, try to guess files based on route structure\n    if (!foundExactMatch) {\n      const guessedFiles = detectFilesForUnknownRoute(pathname);\n      detectedFiles.push(...guessedFiles);\n    }\n    \n    // Add common files that might be relevant\n    detectedFiles.push(...COMMON_FILES);\n    \n    // Remove duplicates based on path\n    const uniqueFiles = detectedFiles.filter((file, index, self) => \n      index === self.findIndex(f => f.path === file.path)\n    );\n    \n    // Sort by confidence (high first) and then by type\n    return uniqueFiles.sort((a, b) => {\n      const confidenceOrder = { high: 3, medium: 2, low: 1 };\n      const typeOrder = { page: 5, component: 4, hook: 3, api: 2, util: 1 };\n      \n      if (confidenceOrder[a.confidence] !== confidenceOrder[b.confidence]) {\n        return confidenceOrder[b.confidence] - confidenceOrder[a.confidence];\n      }\n      \n      return typeOrder[b.type] - typeOrder[a.type];\n    });\n  };\n\n  // Fallback function for routes not explicitly mapped\n  const detectFilesForUnknownRoute = (pathname: string): RelevantCodeFile[] => {\n    const detectedFiles: RelevantCodeFile[] = [];\n    const segments = pathname.split('/').filter(Boolean);\n    \n    if (segments.length === 0) {\n      // Root route\n      detectedFiles.push(\n        { path: 'src/pages/Home.tsx', type: 'page', confidence: 'medium', reason: 'Guessed home page' },\n        { path: 'src/pages/Index.tsx', type: 'page', confidence: 'low', reason: 'Alternative home page' },\n        { path: 'src/App.tsx', type: 'page', confidence: 'medium', reason: 'Root app component' }\n      );\n    } else {\n      // Try to predict files based on route segments\n      segments.forEach((segment, index) => {\n        const isLast = index === segments.length - 1;\n        const confidence = isLast ? 'medium' : 'low';\n        \n        // Convert kebab-case or snake_case to PascalCase\n        const componentName = segment\n          .split(/[-_]/)\n          .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n          .join('');\n        \n        if (isLast) {\n          // Page prediction for the final segment\n          detectedFiles.push({\n            path: `src/pages/${componentName}.tsx`,\n            type: 'page',\n            confidence,\n            reason: `Guessed page for /${segments.join('/')}`\n          });\n          \n          // Component prediction\n          detectedFiles.push({\n            path: `src/components/${componentName}.tsx`,\n            type: 'component',\n            confidence: 'low',\n            reason: `Guessed component for /${segment}`\n          });\n        }\n      });\n    }\n    \n    return detectedFiles;\n  };\n\n  useEffect(() => {\n    if (isOpen) {\n      fetchProjectSubTasks();\n      \n      const info: SystemLogInfo = {\n        url: window.location.href,\n        userAgent: navigator.userAgent,\n        timestamp: new Date().toISOString(),\n        viewportSize: `${window.innerWidth}x${window.innerHeight}`,\n        referrer: document.referrer || 'Direct'\n      };\n      setSystemInfo(info);\n      \n      // Detect relevant files\n      const detectedFiles = detectRelevantFiles();\n      setRelevantFiles(detectedFiles);\n      \n      if (!errorLocation) {\n        const pathParts = window.location.pathname.split('/');\n        const pageName = pathParts[pathParts.length - 1] || pathParts[pathParts.length - 2] || 'Home';\n        setErrorLocation(pageName.charAt(0).toUpperCase() + pageName.slice(1).replace(/-/g, ' '));\n      }\n    }\n  }, [isOpen, errorLocation]);\n\n  const fetchProjectSubTasks = async () => {\n    try {\n      setIsLoadingSubTasks(true);\n      \n      const { data, error } = await supabase\n        .from('project_sub_tasks')\n        .select('task_id, title')\n        .eq('project_id', projectId);\n      \n      if (error) {\n        console.error(\"Error fetching project sub-tasks:\", error);\n        return;\n      }\n      \n      if (data) {\n        const mappedData = data.map(task => ({\n          id: task.task_id,\n          title: task.title\n        }));\n        \n        setProjectSubTasks(mappedData);\n        if (mappedData.length > 0) {\n          setSelectedSubTaskId(mappedData[0].id);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error in fetchProjectSubTasks:\", error);\n    } finally {\n      setIsLoadingSubTasks(false);\n    }\n  };\n\n  const addCustomFile = () => {\n    if (customFilePath.trim()) {\n      const newFile: RelevantCodeFile = {\n        path: customFilePath.trim(),\n        type: 'component', // Default type, could be made selectable\n        confidence: 'medium',\n        reason: 'Manually added by user'\n      };\n      \n      // Check if file already exists\n      if (!relevantFiles.find(f => f.path === newFile.path)) {\n        setRelevantFiles([...relevantFiles, newFile]);\n      }\n      \n      setCustomFilePath('');\n    }\n  };\n\n  const removeFile = (path: string) => {\n    setRelevantFiles(relevantFiles.filter(f => f.path !== path));\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      const newFiles = Array.from(e.target.files);\n      setScreenshots([...screenshots, ...newFiles]);\n      \n      newFiles.forEach(file => {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          if (e.target?.result) {\n            setScreenshotPreviews(prev => [...prev, e.target!.result as string]);\n          }\n        };\n        reader.readAsDataURL(file);\n      });\n    }\n  };\n\n  const removeScreenshot = (index: number) => {\n    setScreenshots(screenshots.filter((_, i) => i !== index));\n    setScreenshotPreviews(screenshotPreviews.filter((_, i) => i !== index));\n  };\n\n  const captureScreenshot = async () => {\n    try {\n      setIsCapturingScreenshot(true);\n      setIsOpen(false);\n      \n      await new Promise(resolve => setTimeout(resolve, 200));\n      \n      const canvas = await html2canvas(document.body);\n      const dataUrl = canvas.toDataURL('image/png');\n      \n      const blobBin = atob(dataUrl.split(',')[1]);\n      const array = [];\n      for (let i = 0; i < blobBin.length; i++) {\n        array.push(blobBin.charCodeAt(i));\n      }\n      const file = new File([new Uint8Array(array)], 'screenshot.png', {type: 'image/png'});\n      \n      setScreenshots(prev => [...prev, file]);\n      setScreenshotPreviews(prev => [...prev, dataUrl]);\n      \n      setIsOpen(true);\n      toast.success(\"Screenshot captured successfully!\");\n    } catch (error) {\n      console.error(\"Error capturing screenshot:\", error);\n      toast.error(\"Failed to capture screenshot\");\n      setIsOpen(true);\n    } finally {\n      setIsCapturingScreenshot(false);\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (!description.trim()) {\n      toast.error(\"Please describe the error you encountered\");\n      return;\n    }\n    \n    try {\n      setIsSubmitting(true);\n      \n      const { data: { user } } = await supabase.auth.getUser();\n      \n      if (!user) {\n        toast.error(\"You must be logged in to report errors\");\n        return;\n      }\n      \n      // Prepare relevant files data\n      const relevantFilesData = {\n        files: relevantFiles,\n        detectionMetadata: {\n          currentRoute: window.location.pathname,\n          detectedAt: new Date().toISOString(),\n          totalFilesDetected: relevantFiles.length,\n          highConfidenceFiles: relevantFiles.filter(f => f.confidence === 'high').length\n        }\n      };\n      \n      const { data: ticketData, error: ticketError } = await supabase\n        .from('tickets')\n        .insert({\n          title: `Beta Testing Report: ${errorLocation || 'General Issue'}`,\n          description: description,\n          reporter: user.id,\n          priority: severity,\n          status: 'new',\n          health: 'needs-review',\n          system_info: systemInfo,\n          reproduction_steps: description,\n          ticket_type: 'beta_testing',\n          notes: [],\n          replies: [],\n          task_id: selectedSubTaskId || null,\n          project_id: projectId,\n          relevant_files: relevantFilesData // Add the relevant files data\n        })\n        .select('id')\n        .single();\n      \n      if (ticketError) {\n        console.error(\"Error creating ticket:\", ticketError);\n        throw ticketError;\n      }\n      \n      if (screenshots.length > 0 && ticketData?.id) {\n        const uploadPromises = screenshots.map(async (file, index) => {\n          const fileExt = file.name.split('.').pop();\n          const fileName = `${ticketData.id}_${index}.${fileExt}`;\n          const filePath = `${user.id}/${ticketData.id}/${fileName}`;\n          \n          const { error: uploadError } = await supabase\n            .storage\n            .from('ticket-attachments')\n            .upload(filePath, file);\n            \n          if (uploadError) {\n            console.error(\"Error uploading screenshot:\", uploadError);\n            return null;\n          }\n          \n          const { data: { publicUrl } } = supabase\n            .storage\n            .from('ticket-attachments')\n            .getPublicUrl(filePath);\n            \n          return publicUrl;\n        });\n        \n        const uploadedUrls = await Promise.all(uploadPromises);\n        const validUrls = uploadedUrls.filter(url => url !== null) as string[];\n        \n        if (validUrls.length > 0) {\n          const { error: updateError } = await supabase\n            .from('tickets')\n            .update({\n              attachment_url: validUrls\n            })\n            .eq('id', ticketData.id);\n            \n          if (updateError) {\n            console.error(\"Error updating ticket with screenshots:\", updateError);\n          }\n        }\n      }\n      \n      toast.success(\"Thank you for reporting this issue! Your feedback helps us improve the platform and earns you equity.\");\n      setDescription('');\n      setErrorLocation('');\n      setSeverity('medium');\n      setScreenshots([]);\n      setScreenshotPreviews([]);\n      setSelectedSubTaskId('');\n      setRelevantFiles([]);\n      setCustomFilePath('');\n      setShowCodeSection(false);\n      setIsOpen(false);\n    } catch (error) {\n      console.error(\"Error submitting beta test feedback:\", error);\n      toast.error(\"Failed to submit your feedback. Please try again.\");\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const getTypeColor = (type: RelevantCodeFile['type']) => {\n    const colors = {\n      page: 'bg-blue-100 text-blue-800',\n      component: 'bg-green-100 text-green-800',\n      hook: 'bg-purple-100 text-purple-800',\n      api: 'bg-orange-100 text-orange-800',\n      util: 'bg-gray-100 text-gray-800'\n    };\n    return colors[type];\n  };\n\n  const getConfidenceColor = (confidence: RelevantCodeFile['confidence']) => {\n    const colors = {\n      high: 'border-green-300',\n      medium: 'border-yellow-300',\n      low: 'border-gray-300'\n    };\n    return colors[confidence];\n  };\n      \n  return (\n    <>\n      <TooltipProvider>\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"fixed bottom-4 right-4 md:top-4 md:bottom-auto z-50 bg-amber-50 text-amber-900 border-amber-300 hover:bg-amber-100\"\n              onClick={() => setIsOpen(true)}\n            >\n              <AlertTriangle className=\"mr-2 h-4 w-4\" />\n              Report Beta Issue\n            </Button>\n          </TooltipTrigger>\n          <TooltipContent className=\"max-w-xs\">\n            <p>Reporting Beta Issues earns equity in the Sweaquity project. Take a screenshot before reporting the issue.</p>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n      \n      <Dialog open={isOpen} onOpenChange={setIsOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Report Beta Testing Issue</DialogTitle>\n            <DialogDescription>\n              Reporting beta testing errors will earn you equity in Sweaquity. \n              Please attach a screenshot of the issue if possible.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4 py-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"errorLocation\">Where did you find this issue?</Label>\n                <Input \n                  id=\"errorLocation\" \n                  placeholder=\"e.g., Dashboard, Project page, etc.\"\n                  value={errorLocation}\n                  onChange={(e) => setErrorLocation(e.target.value)}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"severity\">Severity</Label>\n                <Select value={severity} onValueChange={setSeverity}>\n                  <SelectTrigger id=\"severity\">\n                    <SelectValue placeholder=\"Select severity\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"low\">Low - Minor issue</SelectItem>\n                    <SelectItem value=\"medium\">Medium - Affects functionality</SelectItem>\n                    <SelectItem value=\"high\">High - Critical issue</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"subTask\">Related Project Sub-Task</Label>\n              <Select \n                value={selectedSubTaskId} \n                onValueChange={setSelectedSubTaskId}\n                disabled={isLoadingSubTasks || projectSubTasks.length === 0}\n              >\n                <SelectTrigger id=\"subTask\">\n                  <SelectValue placeholder={isLoadingSubTasks ? \"Loading...\" : \"Select related sub-task\"} />\n                </SelectTrigger>\n                <SelectContent>\n                  {projectSubTasks.length === 0 && !isLoadingSubTasks ? (\n                    <SelectItem value=\"no-subtasks\">No sub-tasks available</SelectItem>\n                  ) : (\n                    projectSubTasks.map(task => (\n                      <SelectItem key={task.id} value={task.id}>\n                        {task.title}\n                      </SelectItem>\n                    ))\n                  )}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"errorDescription\">Describe the issue</Label>\n              <Textarea\n                id=\"errorDescription\"\n                placeholder=\"Please describe what happened and the steps to reproduce the issue...\"\n                rows={5}\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n              />\n            </div>\n            \n            {/* Relevant Code Files Section */}\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2\">\n                <Label className=\"flex items-center gap-2\">\n                  <Code className=\"h-4 w-4\" />\n                  Relevant Code Files ({relevantFiles.length} detected)\n                </Label>\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setShowCodeSection(!showCodeSection)}\n                >\n                  {showCodeSection ? 'Hide' : 'Show'}\n                </Button>\n              </div>\n              \n              {showCodeSection && (\n                <div className=\"border rounded-lg p-4 bg-gray-50 space-y-3\">\n                  <p className=\"text-sm text-gray-600\">\n                    We've automatically detected files that might be related to this issue based on your current location. \n                    You can add or remove files as needed.\n                  </p>\n                  \n                  {/* Add custom file */}\n                  <div className=\"flex gap-2\">\n                    <Input\n                      placeholder=\"Add custom file path (e.g., src/components/MyComponent.tsx)\"\n                      value={customFilePath}\n                      onChange={(e) => setCustomFilePath(e.target.value)}\n                      onKeyDown={(e) => e.key === 'Enter' && addCustomFile()}\n                    />\n                    <Button type=\"button\" variant=\"outline\" size=\"sm\" onClick={addCustomFile}>\n                      <Plus className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  \n                  {/* File list */}\n                  <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n                    {relevantFiles.map((file, index) => (\n                      <div \n                        key={index} \n                        className={`flex items-center justify-between p-2 border rounded ${getConfidenceColor(file.confidence)} bg-white`}\n                      >\n                        <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n                          <Badge variant=\"secondary\" className={getTypeColor(file.type)}>\n                            {file.type}\n                          </Badge>\n                          <code className=\"text-sm font-mono truncate flex-1\">{file.path}</code>\n                          <Tooltip>\n                            <TooltipTrigger>\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {file.confidence}\n                              </Badge>\n                            </TooltipTrigger>\n                            <TooltipContent>\n                              <p>{file.reason}</p>\n                            </TooltipContent>\n                          </Tooltip>\n                        </div>\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => removeFile(file.path)}\n                        >\n                          <X className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                  \n                  {relevantFiles.length === 0 && (\n                    <p className=\"text-sm text-gray-500 text-center py-4\">\n                      No relevant files detected. Add some manually if needed.\n                    </p>\n                  )}\n                </div>\n              )}\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label className=\"mb-2 block\">Attach Screenshots</Label>\n              <div className=\"flex gap-2 mb-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => fileInputRef.current?.click()}\n                >\n                  <Upload className=\"mr-2 h-4 w-4\" />\n                  Upload Files\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={captureScreenshot}\n                  disabled={isCapturingScreenshot}\n                >\n                  <Camera className=\"mr-2 h-4 w-4\" />\n                  {isCapturingScreenshot ? \"Capturing...\" : \"Capture Screen\"}\n                </Button>\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  accept=\"image/*\"\n                  multiple\n                  className=\"hidden\"\n                  onChange={handleFileChange}\n                />\n              </div>\n              \n              {screenshotPreviews.length > 0 && (\n                <div className=\"grid grid-cols-3 gap-2 mt-2\">\n                  {screenshotPreviews.map((preview, index) => (\n                    <div key={index} className=\"relative group\">\n                      <img \n                        src={preview} \n                        alt={`Screenshot ${index + 1}`} \n                        className=\"w-full h-24 object-cover rounded border\"\n                      />\n                      <button\n                        type=\"button\"\n                        className=\"absolute top-1 right-1 bg-red-500 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity\"\n                        onClick={() => removeScreenshot(index)}\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </button>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n            \n            <DialogFooter className=\"mt-6 mb-4\">\n              <Button variant=\"outline\" onClick={() => setIsOpen(false)} disabled={isSubmitting}>\n                Cancel\n              </Button>\n              <Button onClick={handleSubmit} disabled={isSubmitting}>\n                {isSubmitting ? (\n                  <>\n                    <span className=\"mr-2\">Submitting...</span>\n                    <span className=\"animate-spin\">⟳</span>\n                  </>\n                ) : (\n                  \"Submit Report\"\n                )}\n              </Button>\n            </DialogFooter>\n            \n            {systemInfo && (\n              <div className=\"space-y-2 bg-gray-50 p-3 rounded text-sm\">\n                <p className=\"font-medium\">System Information (Automatically Collected)</p>\n                <div className=\"grid grid-cols-2 gap-2 text-gray-600\">\n                  <p>Page: {systemInfo.url}</p>\n                  <p>Time: {new Date(systemInfo.timestamp).toLocaleString()}</p>\n                  <p>Screen: {systemInfo.viewportSize}</p>\n                  <p>Referred from: {systemInfo.referrer}</p>\n                </div>\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/shared/DeleteProfileDialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":93,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2878,2881],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2878,2881],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogDescription, \n  DialogFooter, \n  DialogHeader, \n  DialogTitle \n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { supabase } from \"@/lib/supabase\";\nimport { toast } from \"sonner\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AlertCircle, Info } from \"lucide-react\";\n\ninterface DeleteProfileDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  userType: 'business' | 'job_seeker';\n}\n\nexport const DeleteProfileDialog = ({ isOpen, onClose, userType }: DeleteProfileDialogProps) => {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const navigate = useNavigate();\n\n  const getProfileTypeLabel = () => \n    userType === 'business' ? 'business' : 'job seeker';\n\n  const handleRemoveProfile = async () => {\n    try {\n      setIsProcessing(true);\n      \n      // Get current session\n      const { data: sessionData, error: sessionError } = await supabase.auth.getSession();\n      \n      if (sessionError) {\n        toast.error(\"Authentication error: \" + sessionError.message);\n        return;\n      }\n      \n      if (!sessionData?.session) {\n        toast.error(\"No active session found. Please log in again.\");\n        navigate('/login');\n        return;\n      }\n      \n      const userId = sessionData.session.user.id;\n      \n      console.log(`Removing ${userType} profile for user ${userId}`);\n      \n      // Before attempting the delete, log some database information to help debug\n      if (userType === 'business') {\n        const { data: businessData } = await supabase\n          .from('businesses')\n          .select('*')\n          .eq('businesses_id', userId)\n          .single();\n        \n        console.log(\"Business profile check:\", businessData);\n      } else {\n        const { data: profileData } = await supabase\n          .from('profiles')\n          .select('*')\n          .eq('id', userId)\n          .single();\n        \n        console.log(\"Job seeker profile check:\", profileData);\n      }\n      \n      // Call the delete_user_profile function with the correct parameter names\n      // The column name that's failing is likely in the Supabase function, not directly in our code\n      const { error: deletionError } = await supabase.rpc(\n        'delete_user_profile',\n        { \n          user_type: userType,\n          user_id: userId\n        }\n      );\n      \n      if (deletionError) {\n        console.error(\"Error deleting profile:\", deletionError);\n        toast.error(\"Failed to delete profile: \" + deletionError.message);\n        return;\n      }\n      \n      toast.success(\"Your profile has been successfully deleted in accordance with GDPR regulations\");\n      \n      // Redirect to home page after a short delay\n      setTimeout(() => {\n        navigate('/');\n      }, 1500);\n      \n    } catch (error: any) {\n      console.error(\"Profile deletion error:\", error);\n      toast.error(`Failed to delete profile: ${error?.message || \"Unknown error\"}`);\n    } finally {\n      setIsProcessing(false);\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => !isProcessing && !open && onClose()}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Delete Account Data</DialogTitle>\n          <DialogDescription>\n            This will delete your {getProfileTypeLabel()} profile data in accordance with GDPR regulations.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"bg-amber-50 p-4 rounded-md border border-amber-200 flex gap-2\">\n          <AlertCircle className=\"text-amber-500 h-5 w-5 shrink-0 mt-0.5\" />\n          <div className=\"text-sm text-amber-800\">\n            <p className=\"font-medium mb-1\">What happens to your data:</p>\n            <ul className=\"list-disc ml-4 space-y-1\">\n              <li>Your account and personal information will be completely deleted</li>\n              <li>You will no longer be able to log in with these credentials</li>\n              <li>A backup of your data will be securely stored as required by GDPR</li>\n              {userType === 'business' && (\n                <li>Your job listings and project data will be removed</li>\n              )}\n              {userType === 'job_seeker' && (\n                <li>Your job applications and skills data will be removed</li>\n              )}\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"bg-blue-50 p-4 rounded-md border border-blue-200 flex gap-2\">\n          <Info className=\"text-blue-500 h-5 w-5 shrink-0 mt-0.5\" />\n          <div className=\"text-sm text-blue-800\">\n            <p className=\"mb-2\">\n              Your login credentials will be permanently deleted and you will not be able to log in again.\n            </p>\n            <p className=\"font-medium\">\n              Important: This deletes both your {getProfileTypeLabel()} profile data and your login credentials. If you have multiple account types, they will all be affected.\n            </p>\n          </div>\n        </div>\n        \n        <p className=\"text-destructive font-medium\">\n          Are you sure you want to proceed? This action cannot be undone.\n        </p>\n        \n        <DialogFooter>\n          <Button variant=\"outline\" onClick={onClose} disabled={isProcessing}>Cancel</Button>\n          <Button \n            variant=\"outline\"  \n            onClick={handleRemoveProfile} \n            disabled={isProcessing}\n            className=\"border border-destructive\"\n          >\n            {isProcessing ? \"Processing...\" : \"Delete My Data\"}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/shared/LinkedInImportDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/shared/MarketingPreferencesDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/shared/TermsAndConditionsLink.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/shared/beta-testing/BetaTestingTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1130,1133],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1130,1133],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchProjects'. Either include it or remove the dependency array.","line":41,"column":6,"nodeType":"ArrayExpression","endLine":41,"endColumn":24,"suggestions":[{"desc":"Update the dependencies array to be: [fetchProjects, userId, userType]","fix":{"range":[1415,1433],"text":"[fetchProjects, userId, userType]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTickets'. Either include it or remove the dependency array.","line":49,"column":6,"nodeType":"ArrayExpression","endLine":49,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [userId, selectedProject, loadTickets]","fix":{"range":[1584,1609],"text":"[userId, selectedProject, loadTickets]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":139,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4382,4385],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4382,4385],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":170,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":174,"endColumn":23,"suggestions":[{"messageId":"addBrackets","fix":{"range":[5173,6213],"text":"{ const { data: ticketData } = await supabase\n            .from('tickets')\n            .select('notes')\n            .eq('id', ticketId)\n            .single();\n          \n          const { data: profileData } = await supabase\n            .from('profiles')\n            .select('first_name, last_name')\n            .eq('id', userId)\n            .single();\n          \n          const userName = profileData ? \n            `${profileData.first_name || ''} ${profileData.last_name || ''}`.trim() : \n            'User';\n          \n          const newNote = {\n            id: Date.now().toString(),\n            user: userName,\n            timestamp: new Date().toISOString(),\n            comment: data\n          };\n          \n          const currentNotes = ticketData?.notes || [];\n          const updatedNotes = [...currentNotes, newNote];\n          \n          await supabase\n            .from('tickets')\n            .update({ notes: updatedNotes })\n            .eq('id', ticketId);\n          \n          toast.success(\"Note added\");\n          break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":176,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":180,"endColumn":23,"suggestions":[{"messageId":"addBrackets","fix":{"range":[5173,6213],"text":"{ const { data: ticketData } = await supabase\n            .from('tickets')\n            .select('notes')\n            .eq('id', ticketId)\n            .single();\n          \n          const { data: profileData } = await supabase\n            .from('profiles')\n            .select('first_name, last_name')\n            .eq('id', userId)\n            .single();\n          \n          const userName = profileData ? \n            `${profileData.first_name || ''} ${profileData.last_name || ''}`.trim() : \n            'User';\n          \n          const newNote = {\n            id: Date.now().toString(),\n            user: userName,\n            timestamp: new Date().toISOString(),\n            comment: data\n          };\n          \n          const currentNotes = ticketData?.notes || [];\n          const updatedNotes = [...currentNotes, newNote];\n          \n          await supabase\n            .from('tickets')\n            .update({ notes: updatedNotes })\n            .eq('id', ticketId);\n          \n          toast.success(\"Note added\");\n          break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":182,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":184,"endColumn":20,"suggestions":[{"messageId":"addBrackets","fix":{"range":[5173,6213],"text":"{ const { data: ticketData } = await supabase\n            .from('tickets')\n            .select('notes')\n            .eq('id', ticketId)\n            .single();\n          \n          const { data: profileData } = await supabase\n            .from('profiles')\n            .select('first_name, last_name')\n            .eq('id', userId)\n            .single();\n          \n          const userName = profileData ? \n            `${profileData.first_name || ''} ${profileData.last_name || ''}`.trim() : \n            'User';\n          \n          const newNote = {\n            id: Date.now().toString(),\n            user: userName,\n            timestamp: new Date().toISOString(),\n            comment: data\n          };\n          \n          const currentNotes = ticketData?.notes || [];\n          const updatedNotes = [...currentNotes, newNote];\n          \n          await supabase\n            .from('tickets')\n            .update({ notes: updatedNotes })\n            .eq('id', ticketId);\n          \n          toast.success(\"Note added\");\n          break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":186,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":191,"endColumn":13,"suggestions":[{"messageId":"addBrackets","fix":{"range":[5173,6213],"text":"{ const { data: ticketData } = await supabase\n            .from('tickets')\n            .select('notes')\n            .eq('id', ticketId)\n            .single();\n          \n          const { data: profileData } = await supabase\n            .from('profiles')\n            .select('first_name, last_name')\n            .eq('id', userId)\n            .single();\n          \n          const userName = profileData ? \n            `${profileData.first_name || ''} ${profileData.last_name || ''}`.trim() : \n            'User';\n          \n          const newNote = {\n            id: Date.now().toString(),\n            user: userName,\n            timestamp: new Date().toISOString(),\n            comment: data\n          };\n          \n          const currentNotes = ticketData?.notes || [];\n          const updatedNotes = [...currentNotes, newNote];\n          \n          await supabase\n            .from('tickets')\n            .update({ notes: updatedNotes })\n            .eq('id', ticketId);\n          \n          toast.success(\"Note added\");\n          break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":193,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":193,"endColumn":56,"suggestions":[{"messageId":"addBrackets","fix":{"range":[5173,6213],"text":"{ const { data: ticketData } = await supabase\n            .from('tickets')\n            .select('notes')\n            .eq('id', ticketId)\n            .single();\n          \n          const { data: profileData } = await supabase\n            .from('profiles')\n            .select('first_name, last_name')\n            .eq('id', userId)\n            .single();\n          \n          const userName = profileData ? \n            `${profileData.first_name || ''} ${profileData.last_name || ''}`.trim() : \n            'User';\n          \n          const newNote = {\n            id: Date.now().toString(),\n            user: userName,\n            timestamp: new Date().toISOString(),\n            comment: data\n          };\n          \n          const currentNotes = ticketData?.notes || [];\n          const updatedNotes = [...currentNotes, newNote];\n          \n          await supabase\n            .from('tickets')\n            .update({ notes: updatedNotes })\n            .eq('id', ticketId);\n          \n          toast.success(\"Note added\");\n          break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":194,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":194,"endColumn":59,"suggestions":[{"messageId":"addBrackets","fix":{"range":[5173,6213],"text":"{ const { data: ticketData } = await supabase\n            .from('tickets')\n            .select('notes')\n            .eq('id', ticketId)\n            .single();\n          \n          const { data: profileData } = await supabase\n            .from('profiles')\n            .select('first_name, last_name')\n            .eq('id', userId)\n            .single();\n          \n          const userName = profileData ? \n            `${profileData.first_name || ''} ${profileData.last_name || ''}`.trim() : \n            'User';\n          \n          const newNote = {\n            id: Date.now().toString(),\n            user: userName,\n            timestamp: new Date().toISOString(),\n            comment: data\n          };\n          \n          const currentNotes = ticketData?.notes || [];\n          const updatedNotes = [...currentNotes, newNote];\n          \n          await supabase\n            .from('tickets')\n            .update({ notes: updatedNotes })\n            .eq('id', ticketId);\n          \n          toast.success(\"Note added\");\n          break; }"},"desc":"Add {} brackets around the case block."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState, useEffect } from \"react\";\nimport { supabase } from \"@/lib/supabase\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { TicketDashboard } from \"@/components/ticket/TicketDashboard\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { toast } from \"sonner\";\nimport { Ticket } from \"@/types/types\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { RefreshCw, Plus } from \"lucide-react\";\n\ninterface BetaTestingTabProps {\n  userType: 'business' | 'job_seeker';\n  userId?: string;\n  includeProjectTickets?: boolean;\n}\n\nexport const BetaTestingTab = ({ \n  userType, \n  userId, \n  includeProjectTickets = false \n}: BetaTestingTabProps) => {\n  const [tickets, setTickets] = useState<Ticket[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState(\"tickets\");\n  const [expandedTickets, setExpandedTickets] = useState<Set<string>>(new Set());\n  const [projects, setProjects] = useState<any[]>([]);\n  const [selectedProject, setSelectedProject] = useState<string | null>(null);\n  const [taskStats, setTaskStats] = useState({\n    total: 0,\n    open: 0,\n    closed: 0,\n    highPriority: 0\n  });\n\n  useEffect(() => {\n    if (userId) {\n      fetchProjects(userId);\n    }\n  }, [userId, userType]);\n\n  useEffect(() => {\n    if (userId && selectedProject) {\n      loadTickets(userId);\n    } else if (userId) {\n      loadTickets(userId);\n    }\n  }, [userId, selectedProject]);\n\n  const fetchProjects = async (userId: string) => {\n    try {\n      if (userType === 'business') {\n        const { data, error } = await supabase\n          .from('business_projects')\n          .select('project_id, title')\n          .eq('business_id', userId);\n        \n        if (error) throw error;\n        setProjects(data || []);\n        \n        if (data && data.length > 0) {\n          setSelectedProject(data[0].project_id);\n        }\n      } else {\n        const { data, error } = await supabase\n          .from('jobseeker_active_projects')\n          .select('project_id, project_title')\n          .eq('user_id', userId)\n          .eq('application_status', 'accepted');\n        \n        if (error) throw error;\n        \n        const uniqueProjects = Array.from(\n          new Map(data?.map(item => [item.project_id, { \n            project_id: item.project_id, \n            title: item.project_title \n          }]) || []).values()\n        );\n        \n        setProjects(uniqueProjects);\n        \n        if (uniqueProjects.length > 0) {\n          setSelectedProject(uniqueProjects[0].project_id);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching projects:\", error);\n      toast.error(\"Failed to load projects\");\n    }\n  };\n\n  const loadTickets = async (userId: string) => {\n    try {\n      setLoading(true);\n      \n      const userField = userType === 'business' ? 'reporter' : 'assigned_to';\n      \n      let query = supabase\n        .from('tickets')\n        .select('*');\n      \n      query = query.or(`${userField}.eq.${userId},${userType === 'business' ? 'assigned_to' : 'reporter'}.eq.${userId}`);\n      \n      if (selectedProject) {\n        query = query.eq('project_id', selectedProject);\n      }\n      \n      query = query.order('created_at', { ascending: false });\n      \n      const { data, error } = await query;\n      \n      if (error) throw error;\n      \n      const processedTickets = (data || []).map(ticket => ({\n        ...ticket,\n        expanded: !!expandedTickets.has(ticket.id),\n        description: ticket.description || \"\"\n      }));\n      \n      setTickets(processedTickets);\n\n      const stats = {\n        total: processedTickets.length,\n        open: processedTickets.filter(t => t.status !== 'done' && t.status !== 'closed').length,\n        closed: processedTickets.filter(t => t.status === 'done' || t.status === 'closed').length,\n        highPriority: processedTickets.filter(t => t.priority === 'high').length\n      };\n      \n      setTaskStats(stats);\n    } catch (error) {\n      console.error(\"Error loading tickets:\", error);\n      toast.error(\"Failed to load tickets\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTicketAction = async (ticketId: string, action: string, data: any) => {\n    try {\n      switch (action) {\n        case 'updateStatus':\n          await supabase\n            .from('tickets')\n            .update({ status: data })\n            .eq('id', ticketId);\n          \n          toast.success(\"Status updated\");\n          break;\n        \n        case 'updatePriority':\n          await supabase\n            .from('tickets')\n            .update({ priority: data })\n            .eq('id', ticketId);\n          \n          toast.success(\"Priority updated\");\n          break;\n        \n        case 'updateDueDate':\n          await supabase\n            .from('tickets')\n            .update({ due_date: data })\n            .eq('id', ticketId);\n          \n          toast.success(\"Due date updated\");\n          break;\n        \n        case 'addNote':\n          const { data: ticketData } = await supabase\n            .from('tickets')\n            .select('notes')\n            .eq('id', ticketId)\n            .single();\n          \n          const { data: profileData } = await supabase\n            .from('profiles')\n            .select('first_name, last_name')\n            .eq('id', userId)\n            .single();\n          \n          const userName = profileData ? \n            `${profileData.first_name || ''} ${profileData.last_name || ''}`.trim() : \n            'User';\n          \n          const newNote = {\n            id: Date.now().toString(),\n            user: userName,\n            timestamp: new Date().toISOString(),\n            comment: data\n          };\n          \n          const currentNotes = ticketData?.notes || [];\n          const updatedNotes = [...currentNotes, newNote];\n          \n          await supabase\n            .from('tickets')\n            .update({ notes: updatedNotes })\n            .eq('id', ticketId);\n          \n          toast.success(\"Note added\");\n          break;\n        \n        default:\n          console.warn(\"Unknown action:\", action);\n      }\n      \n      if (userId) {\n        await loadTickets(userId);\n      }\n    } catch (error) {\n      console.error(\"Error handling ticket action:\", error);\n      toast.error(\"Failed to update ticket\");\n    }\n  };\n\n  const handleRefresh = () => {\n    if (userId) {\n      loadTickets(userId);\n    }\n  };\n\n  const handleToggleTicket = (ticketId: string) => {\n    setExpandedTickets(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(ticketId)) {\n        newSet.delete(ticketId);\n      } else {\n        newSet.add(ticketId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleCreateTicket = () => {\n    toast.info(\"Create ticket functionality will be implemented soon\");\n  };\n\n  if (!userId) {\n    return <div>Please log in to view tickets.</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col space-y-2\">\n        <h2 className=\"text-2xl font-bold\">My Projects</h2>\n        <p className=\"text-muted-foreground\">View and manage your project tasks</p>\n      </div>\n\n      <div className=\"flex items-center justify-between mb-4\">\n        <Select value={selectedProject || \"none\"} onValueChange={setSelectedProject}>\n          <SelectTrigger className=\"w-[180px]\">\n            <SelectValue placeholder=\"Select project\" />\n          </SelectTrigger>\n          <SelectContent>\n            {projects.length === 0 ? (\n              <SelectItem value=\"none\">No projects available</SelectItem>\n            ) : (\n              projects.map(project => (\n                <SelectItem key={project.project_id} value={project.project_id}>\n                  {project.title || project.project_title}\n                </SelectItem>\n              ))\n            )}\n          </SelectContent>\n        </Select>\n        \n        <div className=\"flex gap-2\">\n          <Button size=\"sm\" variant=\"outline\" onClick={handleRefresh}>\n            <RefreshCw className=\"h-4 w-4 mr-1\" /> Refresh\n          </Button>\n          \n          <Button size=\"sm\" onClick={handleCreateTicket}>\n            <Plus className=\"h-4 w-4 mr-1\" /> Create Ticket\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-sm font-medium text-muted-foreground\">All Tickets</div>\n            <div className=\"text-2xl font-bold mt-1\">{taskStats.total}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-sm font-medium text-muted-foreground\">Open Tasks</div>\n            <div className=\"text-2xl font-bold mt-1\">{taskStats.open}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-sm font-medium text-muted-foreground\">Closed Tasks</div>\n            <div className=\"text-2xl font-bold mt-1\">{taskStats.closed}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-sm font-medium text-muted-foreground\">High Priority</div>\n            <div className=\"text-2xl font-bold mt-1\">{taskStats.highPriority}</div>\n          </CardContent>\n        </Card>\n      </div>\n      \n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"mb-4\">\n          <TabsTrigger value=\"tickets\">All Tickets</TabsTrigger>\n          {includeProjectTickets && (\n            <>\n              <TabsTrigger value=\"project-tasks\">Project Tasks</TabsTrigger>\n              <TabsTrigger value=\"project-tickets\">Project Tickets</TabsTrigger>\n            </>\n          )}\n          <TabsTrigger value=\"beta-tickets\">Beta Testing Tickets</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"tickets\">\n          <TicketDashboard \n            initialTickets={tickets.filter(t => \n              t.ticket_type === \"beta_testing\" || \n              t.ticket_type === \"beta-test\" || \n              t.ticket_type === \"beta-testing\"\n            )}\n            onRefresh={handleRefresh}\n            onTicketAction={handleTicketAction}\n            showTimeTracking={userType === 'job_seeker'}\n            userId={userId}\n            expandedTickets={expandedTickets}\n            toggleTicketExpansion={handleToggleTicket}\n          />\n        </TabsContent>\n        \n        {includeProjectTickets && (\n          <>\n            <TabsContent value=\"project-tasks\">\n              <TicketDashboard \n                initialTickets={tickets.filter(t => t.task_id)}\n                onRefresh={handleRefresh}\n                onTicketAction={handleTicketAction}\n                showTimeTracking={userType === 'job_seeker'}\n                userId={userId}\n                expandedTickets={expandedTickets}\n                toggleTicketExpansion={handleToggleTicket}\n              />\n            </TabsContent>\n            \n            <TabsContent value=\"project-tickets\">\n              <TicketDashboard \n                initialTickets={tickets.filter(t => t.project_id && !t.task_id)}\n                onRefresh={handleRefresh}\n                onTicketAction={handleTicketAction}\n                showTimeTracking={userType === 'job_seeker'}\n                userId={userId}\n                expandedTickets={expandedTickets}\n                toggleTicketExpansion={handleToggleTicket}\n              />\n            </TabsContent>\n          </>\n        )}\n        \n        <TabsContent value=\"beta-tickets\">\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <h3 className=\"text-lg font-medium mb-2\">Beta Testing Features</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                This section will allow you to test new features before they are released.\n              </p>\n              <Button variant=\"outline\">Join Beta Program</Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport const LiveProjectsTab = BetaTestingTab;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/shared/beta-testing/KanbanBoard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1843,1846],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1843,1846],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { X } from \"lucide-react\";\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\nexport interface BetaTicket {\n  id: string;\n  title: string;\n  description: string;\n  status: string;\n  priority: string;\n  due_date?: string;\n}\n\ninterface KanbanColumn {\n  id: string;\n  title: string;\n  ticketIds: string[];\n}\n\nexport interface KanbanBoardProps {\n  tickets: BetaTicket[];\n  onStatusChange?: (ticketId: string, newStatus: string) => void;\n  onTicketClick?: (ticketId: string) => void;\n}\n\nexport function KanbanBoard({ tickets, onStatusChange = () => {}, onTicketClick = () => {} }: KanbanBoardProps) {\n  const getInitialColumns = () => {\n    const columns: Record<string, KanbanColumn> = {\n      'new': { id: 'new', title: 'New', ticketIds: [] },\n      'in-progress': { id: 'in-progress', title: 'In Progress', ticketIds: [] },\n      'blocked': { id: 'blocked', title: 'Blocked', ticketIds: [] },\n      'review': { id: 'review', title: 'Review', ticketIds: [] },\n      'done': { id: 'done', title: 'Done', ticketIds: [] },\n      'closed': { id: 'closed', title: 'Closed', ticketIds: [] }\n    };\n    \n    tickets.forEach(ticket => {\n      const status = ticket.status || 'new';\n      if (columns[status]) {\n        columns[status].ticketIds.push(ticket.id);\n      } else {\n        columns['new'].ticketIds.push(ticket.id);\n      }\n    });\n    \n    return columns;\n  };\n\n  const [columns, setColumns] = useState<Record<string, KanbanColumn>>(getInitialColumns);\n  const [ticketsMap, setTicketsMap] = useState(() => {\n    const map: Record<string, BetaTicket> = {};\n    tickets.forEach(ticket => {\n      map[ticket.id] = ticket;\n    });\n    return map;\n  });\n\n  const onDragEnd = (result: any) => {\n    const { source, destination, draggableId } = result;\n    \n    if (!destination) return;\n    if (source.droppableId === destination.droppableId && source.index === destination.index) return;\n    \n    // Remove from source column\n    const sourceColumn = columns[source.droppableId];\n    const sourceTicketIds = [...sourceColumn.ticketIds];\n    sourceTicketIds.splice(source.index, 1);\n    \n    // Add to destination column\n    const destinationColumn = columns[destination.droppableId];\n    const destinationTicketIds = [...destinationColumn.ticketIds];\n    destinationTicketIds.splice(destination.index, 0, draggableId);\n    \n    // Update columns state\n    setColumns({\n      ...columns,\n      [source.droppableId]: {\n        ...sourceColumn,\n        ticketIds: sourceTicketIds\n      },\n      [destination.droppableId]: {\n        ...destinationColumn,\n        ticketIds: destinationTicketIds\n      }\n    });\n    \n    // Update ticket status in the database\n    if (onStatusChange) {\n      onStatusChange(draggableId, destination.droppableId);\n    }\n  };\n\n  const formatDate = (dateString?: string) => {\n    if (!dateString) return '';\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <div className=\"overflow-x-auto p-4\">\n        <div className=\"flex space-x-4 min-w-fit\">\n          {Object.values(columns).map(column => (\n            <div key={column.id} className=\"w-64 bg-gray-50 rounded-md p-2\">\n              <h3 className=\"font-medium mb-2\">{column.title} ({column.ticketIds.length})</h3>\n              <Droppable droppableId={column.id}>\n                {(provided) => (\n                  <div \n                    {...provided.droppableProps}\n                    ref={provided.innerRef}\n                    className=\"space-y-2 min-h-[100px]\"\n                  >\n                    {column.ticketIds.map((ticketId, index) => {\n                      const ticket = ticketsMap[ticketId];\n                      if (!ticket) return null;\n                      \n                      return (\n                        <Draggable key={ticketId} draggableId={ticketId} index={index}>\n                          {(provided) => (\n                            <Card\n                              ref={provided.innerRef}\n                              {...provided.draggableProps}\n                              {...provided.dragHandleProps}\n                              className={`\n                                p-2 cursor-pointer\n                                ${ticket.priority === 'high' ? 'border-l-4 border-l-red-500' : \n                                  ticket.priority === 'medium' ? 'border-l-4 border-l-yellow-500' :\n                                  'border-l-4 border-l-blue-500'}`\n                              }\n                            >\n                              <div className=\"text-sm font-medium\">{ticket.title}</div>\n                              <div className=\"text-xs text-gray-500 truncate\">{ticket.description}</div>\n                              <div className=\"flex justify-between mt-1\">\n                                <div className=\"text-xs\">{formatDate(ticket.due_date)}</div>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"h-6 text-xs px-2\"\n                                  onClick={() => onTicketClick(ticket.id)}\n                                >\n                                  View\n                                </Button>\n                              </div>\n                            </Card>\n                          )}\n                        </Draggable>\n                      );\n                    })}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </div>\n          ))}\n        </div>\n      </div>\n    </DragDropContext>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/ActivityTimeline.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/CreateTicketDialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[539,542],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[539,542],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  DialogClose\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface CreateTicketDialogProps {\n  open: boolean;\n  onClose: () => void;\n  onCreateTicket: (ticket: any) => Promise<void>;\n  projects: Array<{ project_id: string; project_title?: string; title?: string }>;\n}\n\nexport const CreateTicketDialog: React.FC<CreateTicketDialogProps> = ({\n  open,\n  onClose,\n  onCreateTicket,\n  projects\n}) => {\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [priority, setPriority] = useState(\"medium\");\n  const [projectId, setProjectId] = useState(\"no-project\");\n  const [ticketType, setTicketType] = useState(\"task\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!title.trim()) {\n      return;\n    }\n    \n    try {\n      setIsSubmitting(true);\n      \n      await onCreateTicket({\n        title,\n        description,\n        priority,\n        project_id: projectId === \"no-project\" ? null : projectId,\n        health: \"good\",\n        ticket_type: ticketType\n      });\n      \n      setTitle(\"\");\n      setDescription(\"\");\n      setPriority(\"medium\");\n      setProjectId(\"no-project\");\n      setTicketType(\"task\");\n      \n    } catch (error) {\n      console.error(\"Error creating ticket:\", error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle>Create New Ticket</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <label htmlFor=\"title\" className=\"text-sm font-medium\">\n              Title *\n            </label>\n            <Input\n              id=\"title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              placeholder=\"Enter ticket title\"\n              required\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <label htmlFor=\"description\" className=\"text-sm font-medium\">\n              Description\n            </label>\n            <Textarea\n              id=\"description\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              placeholder=\"Provide additional details\"\n              rows={4}\n            />\n          </div>\n          \n          <div className=\"grid grid-cols-3 gap-4\">\n            <div className=\"space-y-2\">\n              <label htmlFor=\"priority\" className=\"text-sm font-medium\">\n                Priority\n              </label>\n              <Select value={priority} onValueChange={setPriority}>\n                <SelectTrigger id=\"priority\">\n                  <SelectValue placeholder=\"Select priority\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"low\">Low</SelectItem>\n                  <SelectItem value=\"medium\">Medium</SelectItem>\n                  <SelectItem value=\"high\">High</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <label htmlFor=\"ticketType\" className=\"text-sm font-medium\">\n                Ticket Type\n              </label>\n              <Select value={ticketType} onValueChange={setTicketType}>\n                <SelectTrigger id=\"ticketType\">\n                  <SelectValue placeholder=\"Select type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"task\">Task</SelectItem>\n                  <SelectItem value=\"bug\">Bug</SelectItem>\n                  <SelectItem value=\"feature\">Feature</SelectItem>\n                  <SelectItem value=\"beta_testing\">Beta Test</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <label htmlFor=\"project\" className=\"text-sm font-medium\">\n                Project\n              </label>\n              <Select value={projectId} onValueChange={setProjectId}>\n                <SelectTrigger id=\"project\">\n                  <SelectValue placeholder=\"Select project\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"no-project\">No project</SelectItem>\n                  {projects.map((project) => (\n                    <SelectItem key={project.project_id} value={project.project_id}>\n                      {project.project_title || project.title || 'Unnamed Project'}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <DialogFooter>\n            <DialogClose asChild>\n              <Button type=\"button\" variant=\"outline\">\n                Cancel\n              </Button>\n            </DialogClose>\n            \n            <Button type=\"submit\" disabled={isSubmitting || !title.trim()}>\n              {isSubmitting ? \"Creating...\" : \"Create Ticket\"}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/ExpandedTicketDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[994,997],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[994,997],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkForAttachments'. Either include it or remove the dependency array.","line":54,"column":6,"nodeType":"ArrayExpression","endLine":54,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [checkForAttachments, localTicket.id]","fix":{"range":[2136,2152],"text":"[checkForAttachments, localTicket.id]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2640,2643],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2640,2643],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":145,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5129,5132],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5129,5132],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Image, Trash2 } from \"lucide-react\";\nimport { Ticket } from \"@/types/types\";\nimport { supabase } from \"@/lib/supabase\";\nimport { toast } from \"sonner\";\nimport { TicketService } from \"@/components/ticket/TicketService\";\nimport { TicketAttachmentsList, checkTicketAttachments } from \"@/components/dashboard/TicketAttachmentsList\";\nimport { TicketDetailsTab } from \"./details/TicketDetailsTab\";\nimport { TicketConversationTab } from \"./details/TicketConversationTab\";\nimport { TicketActivityTab } from \"./details/TicketActivityTab\";\nimport { TicketTimeLogTab } from \"./details/TicketTimeLogTab\";\nimport { DeleteTicketDialog } from \"./details/DeleteTicketDialog\";\n\ninterface ExpandedTicketDetailsProps {\n  ticket: Ticket;\n  onClose?: () => void;\n  onTicketAction?: (ticketId: string, action: string, data: any) => Promise<void>;\n  onLogTime?: (ticketId: string) => void;\n  userCanEditStatus?: boolean;\n  userCanEditDates?: boolean;\n  onRefresh?: () => void;\n}\n\nexport const ExpandedTicketDetails: React.FC<ExpandedTicketDetailsProps> = ({\n  ticket: initialTicket,\n  onClose,\n  onTicketAction = async () => {},\n  onLogTime,\n  userCanEditStatus = true,\n  userCanEditDates = true,\n  onRefresh\n}) => {\n  // Keep local copy of ticket that we can update immediately\n  const [localTicket, setLocalTicket] = useState<Ticket>(initialTicket);\n  const [activeTab, setActiveTab] = useState(\"details\");\n  const [hasAttachments, setHasAttachments] = useState(false);\n  const [isCheckingAttachments, setIsCheckingAttachments] = useState(true);\n  const [deleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [deleteErrorMessage, setDeleteErrorMessage] = useState<string | undefined>();\n\n  // Update local ticket when props change\n  useEffect(() => {\n    setLocalTicket(initialTicket);\n  }, [initialTicket]);\n\n  useEffect(() => {\n    if (localTicket.id) {\n      checkForAttachments();\n    }\n  }, [localTicket.id]);\n\n  const checkForAttachments = async () => {\n    setIsCheckingAttachments(true);\n    const attachmentsExist = await checkTicketAttachments(localTicket.reporter, localTicket.id);\n    setHasAttachments(attachmentsExist);\n    setIsCheckingAttachments(false);\n  };\n\n  const handleAttachmentsLoaded = (hasAttachments: boolean) => {\n    setHasAttachments(hasAttachments);\n    setIsCheckingAttachments(false);\n  };\n\n  const handleTicketAction = async (ticketId: string, action: string, data: any): Promise<void> => {\n    try {\n      // Update local state immediately for better UX\n      setLocalTicket(prev => {\n        // Handle different action types\n        switch (action) {\n          case \"updateStatus\":\n            return { ...prev, status: data };\n          case \"updatePriority\":\n            return { ...prev, priority: data };\n          case \"updateDueDate\":\n            return { ...prev, due_date: data };\n          case \"updateEstimatedHours\":\n            return { ...prev, estimated_hours: data };\n          case \"updateCompletionPercentage\":\n            return { ...prev, completion_percentage: data };\n          case \"updateDescription\":\n            return { ...prev, description: data };\n          default:\n            return prev;\n        }\n      });\n\n      // Call the parent handler (API update)\n      await onTicketAction(ticketId, action, data);\n      \n      // Refresh data if onRefresh is provided\n      if (onRefresh) {\n        onRefresh();\n      }\n    } catch (error) {\n      console.error(`Error in ${action}:`, error);\n    }\n  };\n\n  // Force refresh of child components\n  const handleDataChanged = () => {\n    if (onRefresh) {\n      onRefresh();\n    }\n  };\n\n  // Check if delete button should be disabled\n  const isDeleteDisabled = localTicket.completion_percentage > 0 || \n                          (localTicket.hours_logged && localTicket.hours_logged > 0);\n\n  const handleDeleteTicket = async () => {\n    setIsDeleting(true);\n    setDeleteErrorMessage(undefined);\n    try {\n      // Get the current user ID\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        throw new Error(\"User not authenticated\");\n      }\n      \n      // Check if the ticket has time entries or completion progress\n      if (localTicket.completion_percentage > 0) {\n        throw new Error(\"Cannot delete ticket with completion progress\");\n      }\n      \n      if (localTicket.hours_logged && localTicket.hours_logged > 0) {\n        throw new Error(\"Cannot delete ticket with time entries\");\n      }\n      \n      // Use the TicketService for consistent deletion logic\n      const success = await TicketService.deleteTicket(localTicket.id, user.id);\n      \n      if (!success) {\n        throw new Error(\"Failed to delete ticket\");\n      }\n      \n      // If successful, close the dialog and refresh\n      toast.success(\"Ticket deleted successfully\");\n      if (onClose) onClose();\n      if (onRefresh) onRefresh();\n      \n    } catch (error: any) {\n      console.error(\"Error deleting ticket:\", error);\n      const errorMessage = error?.message || \"Failed to delete ticket. Please try again.\";\n      setDeleteErrorMessage(errorMessage);\n      throw error; // Re-throw the error to be caught by the DeleteTicketDialog\n    } finally {\n      setIsDeleting(false);\n    }\n  };\n\n  return (\n    <div className=\"max-h-[80vh] overflow-y-auto\">\n      <div className=\"flex justify-between items-start mb-4\">\n        <h2 className=\"text-xl font-bold\">{localTicket.title}</h2>\n        <div className=\"flex gap-2\">\n          <Button \n            variant=\"destructive\" \n            size=\"sm\" \n            onClick={() => {\n              if (isDeleteDisabled) {\n                const reason = localTicket.completion_percentage > 0 \n                  ? \"Cannot delete ticket with completion progress\" \n                  : \"Cannot delete ticket with time entries\";\n                toast.error(reason);\n                return;\n              }\n              setIsDeleteDialogOpen(true);\n            }}\n            disabled={isDeleteDisabled}\n            title={isDeleteDisabled ? \n              (localTicket.completion_percentage > 0 ? \n                \"Cannot delete ticket with completion progress\" : \n                \"Cannot delete ticket with time entries\") : \n              \"Delete ticket\"}\n          >\n            <Trash2 className=\"h-4 w-4 mr-1\" />\n            Delete\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" onClick={onClose}>\n            Close\n          </Button>\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"mb-4\">\n          <TabsTrigger value=\"details\">Details</TabsTrigger>\n          <TabsTrigger value=\"conversation\">Conversation</TabsTrigger>\n          <TabsTrigger value=\"activity-log\">Activity Log</TabsTrigger>\n          {(hasAttachments || isCheckingAttachments) && (\n            <TabsTrigger value=\"attachments\">\n              <div className=\"flex items-center\">\n                <Image className=\"h-4 w-4 mr-1\" />\n                Attachments\n                {isCheckingAttachments && (\n                  <span className=\"ml-1 h-3 w-3 rounded-full bg-gray-200 animate-pulse\"></span>\n                )}\n              </div>\n            </TabsTrigger>\n          )}\n          <TabsTrigger value=\"time-log\">Time Log</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"details\">\n          <TicketDetailsTab \n            ticket={localTicket}\n            onTicketAction={handleTicketAction}\n            onLogTime={onLogTime}\n            userCanEditStatus={userCanEditStatus}\n            userCanEditDates={userCanEditDates}\n          />\n        </TabsContent>\n        \n        <TabsContent value=\"conversation\">\n          <TicketConversationTab \n            ticket={localTicket}\n            onTicketAction={handleTicketAction}\n            onDataChanged={handleDataChanged}\n          />\n        </TabsContent>\n        \n        <TabsContent value=\"activity-log\">\n          <TicketActivityTab \n            ticket={localTicket}\n            onTicketAction={handleTicketAction}\n            onDataChanged={handleDataChanged}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"attachments\" className=\"mt-0\">\n          <TicketAttachmentsList \n            reporterId={localTicket.reporter} \n            ticketId={localTicket.id}\n            onAttachmentsLoaded={handleAttachmentsLoaded}\n          />\n        </TabsContent>\n        \n        <TabsContent value=\"time-log\">\n          <TicketTimeLogTab \n            ticketId={localTicket.id}\n            onLogTime={onLogTime}\n            onDataChanged={handleDataChanged}\n          />\n        </TabsContent>\n      </Tabs>\n      \n      <DeleteTicketDialog\n        open={deleteDialogOpen}\n        onOpenChange={setIsDeleteDialogOpen}\n        onConfirm={handleDeleteTicket}\n        isDeleting={isDeleting}\n        ticketTitle={localTicket.title}\n        errorMessage={deleteErrorMessage}\n      />\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/FilterBar.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[728,731],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[728,731],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\n\ninterface FilterBarProps {\n  statusFilter?: string;\n  setStatusFilter?: (status: string) => void;\n  priorityFilter?: string;\n  setPriorityFilter?: (priority: string) => void;\n  dueDateFilter?: string;\n  setDueDateFilter?: (date: string) => void;\n  searchQuery?: string;\n  setSearchQuery?: (query: string) => void;\n  onClearFilters?: () => void;\n  // Add the new prop for compatibility with LiveProjectsTab\n  onFilterChange?: (newFilters: any) => void;\n  // Add the arrays for statuses and priorities\n  statuses?: string[];\n  priorities?: string[];\n}\n\nexport const FilterBar: React.FC<FilterBarProps> = ({\n  statusFilter = \"all\",\n  setStatusFilter = () => {},\n  priorityFilter = \"all\",\n  setPriorityFilter = () => {},\n  dueDateFilter = \"\",\n  setDueDateFilter = () => {},\n  searchQuery = \"\",\n  setSearchQuery = () => {},\n  onClearFilters = () => {},\n  onFilterChange,\n  statuses = ['all', 'new', 'in-progress', 'blocked', 'review', 'done', 'closed'],\n  priorities = ['all', 'low', 'medium', 'high']\n}) => {\n  const [filters, setFilters] = useState({\n    status: statusFilter,\n    priority: priorityFilter\n  });\n\n  const handleStatusChange = (status: string) => {\n    setStatusFilter(status);\n    const newFilters = { ...filters, status };\n    setFilters(newFilters);\n    // Call the new onFilterChange prop if it exists\n    if (onFilterChange) {\n      onFilterChange(newFilters);\n    }\n  };\n\n  const handlePriorityChange = (priority: string) => {\n    setPriorityFilter(priority);\n    const newFilters = { ...filters, priority };\n    setFilters(newFilters);\n    // Call the new onFilterChange prop if it exists\n    if (onFilterChange) {\n      onFilterChange(newFilters);\n    }\n  };\n\n  const handleClearFilters = () => {\n    setStatusFilter(\"all\");\n    setPriorityFilter(\"all\");\n    setDueDateFilter(\"\");\n    setSearchQuery(\"\");\n    onClearFilters();\n    \n    const newFilters = { status: \"all\", priority: \"all\" };\n    setFilters(newFilters);\n    // Call the new onFilterChange prop if it exists\n    if (onFilterChange) {\n      onFilterChange(newFilters);\n    }\n  };\n\n  return (\n    <div className=\"bg-gray-50 p-4 rounded-lg mb-6\">\n      <h3 className=\"text-sm font-medium mb-3\">Filter Tickets</h3>\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div>\n          <Label htmlFor=\"status-filter\" className=\"text-xs block mb-1\">Status</Label>\n          <Select value={statusFilter} onValueChange={handleStatusChange}>\n            <SelectTrigger id=\"status-filter\" className=\"w-full\">\n              <SelectValue placeholder=\"All Statuses\" />\n            </SelectTrigger>\n            <SelectContent>\n              {statuses.map((status) => (\n                <SelectItem key={status} value={status}>{status === 'all' ? 'All Statuses' : status}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        \n        <div>\n          <Label htmlFor=\"priority-filter\" className=\"text-xs block mb-1\">Priority</Label>\n          <Select value={priorityFilter} onValueChange={handlePriorityChange}>\n            <SelectTrigger id=\"priority-filter\" className=\"w-full\">\n              <SelectValue placeholder=\"All Priorities\" />\n            </SelectTrigger>\n            <SelectContent>\n              {priorities.map((priority) => (\n                <SelectItem key={priority} value={priority}>{priority === 'all' ? 'All Priorities' : priority}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        \n        <div>\n          <Label htmlFor=\"due-date-filter\" className=\"text-xs block mb-1\">Due Date</Label>\n          <Input\n            id=\"due-date-filter\"\n            type=\"date\"\n            value={dueDateFilter}\n            onChange={(e) => setDueDateFilter(e.target.value)}\n            className=\"w-full\"\n          />\n        </div>\n        \n        <div>\n          <Label htmlFor=\"search-query\" className=\"text-xs block mb-1\">Search</Label>\n          <div className=\"flex gap-2\">\n            <Input\n              id=\"search-query\"\n              placeholder=\"Search tickets...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"w-full\"\n            />\n            <Button variant=\"outline\" size=\"sm\" onClick={handleClearFilters} className=\"whitespace-nowrap\">\n              Clear Filters\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/GanttChart.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":24,"column":13,"nodeType":"Identifier","messageId":"namedExport","endLine":24,"endColumn":26},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":45,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":45,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1174,1177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1174,1177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from \"react\";\nimport { Task } from \"@/types/types\";\n\n// Types\nexport interface GanttTask {\n  id: string;\n  name: string;\n  start: Date;\n  end: Date;\n  type: GanttTaskType;\n  progress: number;\n  isDisabled: boolean;\n  styles?: {\n    progressColor?: string;\n    backgroundColor?: string;\n  };\n}\n\nexport interface GanttChartProps {\n  tasks: GanttTask[];\n}\n\nexport enum GanttTaskType {\n  Task = 'task',\n  Milestone = 'milestone'\n  // Add other task types as needed\n}\n\n// Note: This is a wrapper component that will use the GanttChartView component\n// from your original code. You'll need to implement or import that component.\nexport const GanttChart: React.FC<GanttChartProps> = ({ tasks }) => {\n  return (\n    <div className=\"border rounded-lg overflow-hidden p-4\">\n      {/* Placeholder implementation for reference */}\n      <div className=\"text-center p-4 bg-gray-50\">\n        <p>Gantt Chart View - Import your GanttChartView component here</p>\n        <p className=\"text-sm text-gray-500\">Tasks: {tasks.length}</p>\n      </div>\n    </div>\n  );\n};\n\n// Helper function to convert ticket/item data to Gantt tasks\nexport const convertItemsToGanttTasks = (items: any[]): GanttTask[] => {\n  return items.map((item) => {\n    const startDate = new Date(item.created_at || item.createdAt);\n    let endDate = item.due_date || item.dueDate ? new Date(item.due_date || item.dueDate) : new Date();\n    \n    if (!item.due_date && !item.dueDate || endDate < new Date()) {\n      endDate = new Date();\n      endDate.setDate(endDate.getDate() + 7);\n    }\n    \n    const getProgressFromStatus = (status: string): number => {\n      switch (status) {\n        case 'done':\n        case 'closed':\n          return 100;\n        case 'in-progress':\n          return 50;\n        case 'review':\n          return 75;\n        default:\n          return 25;\n      }\n    };\n\n    const getColorFromPriority = (priority: string): string => {\n      switch (priority) {\n        case 'high':\n          return '#ef4444';\n        case 'medium':\n          return '#f59e0b';\n        default:\n          return '#3b82f6';\n      }\n    };\n    \n    // Use the renamed GanttTaskType to avoid conflicts\n    const taskType: GanttTaskType = \n      (item.type === GanttTaskType.Task || item.type === GanttTaskType.Milestone) \n        ? item.type as GanttTaskType \n        : GanttTaskType.Task;\n    \n    return {\n      id: item.id,\n      name: item.title,\n      start: startDate,\n      end: endDate,\n      type: taskType,\n      progress: getProgressFromStatus(item.status),\n      isDisabled: false,\n      styles: { \n        progressColor: getColorFromPriority(item.priority)\n      }\n    };\n  });\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/KanbanBoard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1979,1982],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1979,1982],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'columnTickets' is never reassigned. Use 'const' instead.","line":111,"column":15,"nodeType":"Identifier","messageId":"useConst","endLine":111,"endColumn":28,"fix":{"range":[3525,4013],"text":"const columnTickets = tickets.filter(ticket => {\n            if (ticket.status === column.id) return true;\n            \n            // Handle alternative status formats\n            if (column.id === 'in-progress' && (ticket.status === 'in_progress' || ticket.status === 'in progress')) return true;\n            if (column.id === 'todo' && (ticket.status === 'new' || ticket.status === 'open' || ticket.status === 'backlog')) return true;\n            \n            return false;\n          });"}},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":213,"column":33,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":213,"endColumn":72}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"\nimport React from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Ticket } from \"@/types/types\";\nimport { Button } from \"@/components/ui/button\";\nimport { Clock, MoreHorizontal, CheckCircle, Trash } from \"lucide-react\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\n\nexport interface KanbanBoardProps {\n  tickets: Ticket[];\n  onStatusChange: (ticketId: string, newStatus: string) => void;\n  onTicketClick?: (ticket: Ticket) => void;  \n  onTicketDelete?: (ticket: Ticket) => void;\n}\n\nexport const KanbanBoard: React.FC<KanbanBoardProps> = ({ \n  tickets, \n  onStatusChange, \n  onTicketClick,\n  onTicketDelete\n}) => {\n  const columns = [\n    { id: 'todo', title: 'To Do' },\n    { id: 'in-progress', title: 'In Progress' },\n    { id: 'review', title: 'Review' },\n    { id: 'done', title: 'Done' },\n    { id: 'closed', title: 'Closed' }\n  ];\n\n  const formatDate = (dateString?: string) => {\n    if (!dateString) return 'No due date';\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  // Function to get ticket count for a specific status\n  const getTicketCount = (status: string) => {\n    return tickets.filter(ticket => ticket.status === status).length;\n  };\n\n  // Function to determine priority badge color\n  const getPriorityColor = (priority: string) => {\n    if (priority === 'high') return 'bg-red-100 text-red-800';\n    if (priority === 'medium') return 'bg-yellow-100 text-yellow-800';\n    return 'bg-green-100 text-green-800';\n  };\n\n  // Determine if a ticket is overdue\n  const isOverdue = (ticket: Ticket) => {\n    if (!ticket.due_date) return false;\n    const dueDate = new Date(ticket.due_date);\n    const today = new Date();\n    return dueDate < today;\n  };\n\n  // Handle drag end event\n  const handleDragEnd = (result: any) => {\n    if (!result.destination) return;\n    \n    const { draggableId, destination } = result;\n    const newStatus = destination.droppableId;\n    \n    // Call the onStatusChange callback to update the ticket status\n    onStatusChange(draggableId, newStatus);\n  };\n\n  // Sort tickets based on priority and due date\n  const sortTickets = (tickets: Ticket[]) => {\n    return [...tickets].sort((a, b) => {\n      // First sort by priority\n      const priorityOrder = { high: 0, medium: 1, low: 2 };\n      const aPriority = priorityOrder[a.priority as keyof typeof priorityOrder] || 999;\n      const bPriority = priorityOrder[b.priority as keyof typeof priorityOrder] || 999;\n      \n      if (aPriority !== bPriority) {\n        return aPriority - bPriority;\n      }\n      \n      // Then sort by due date if available\n      if (a.due_date && b.due_date) {\n        return new Date(a.due_date).getTime() - new Date(b.due_date).getTime();\n      }\n      \n      // If no due date, tickets with due dates come first\n      if (a.due_date && !b.due_date) return -1;\n      if (!a.due_date && b.due_date) return 1;\n      \n      // Finally sort by creation date\n      if (a.created_at && b.created_at) {\n        return new Date(b.created_at).getTime() - new Date(a.created_at).getTime();\n      }\n      \n      return 0;\n    });\n  };\n\n  return (\n    <DragDropContext onDragEnd={handleDragEnd}>\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n        {columns.map(column => {\n          // Map statuses that might be in different formats\n          let columnTickets = tickets.filter(ticket => {\n            if (ticket.status === column.id) return true;\n            \n            // Handle alternative status formats\n            if (column.id === 'in-progress' && (ticket.status === 'in_progress' || ticket.status === 'in progress')) return true;\n            if (column.id === 'todo' && (ticket.status === 'new' || ticket.status === 'open' || ticket.status === 'backlog')) return true;\n            \n            return false;\n          });\n          \n          return (\n            <Droppable key={column.id} droppableId={column.id}>\n              {(provided) => (\n                <div \n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                  className=\"bg-gray-50 p-3 rounded-lg min-h-[300px]\"\n                >\n                  <h3 className=\"font-medium text-sm mb-3\">{column.title} ({columnTickets.length})</h3>\n                  \n                  {sortTickets(columnTickets).map((ticket, index) => (\n                    <Draggable key={ticket.id} draggableId={ticket.id} index={index}>\n                      {(provided) => (\n                        <div\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          className=\"bg-white mb-2 p-3 rounded-md shadow-sm border border-gray-100\"\n                        >\n                          <div className=\"flex justify-between items-start\">\n                            <h4 \n                              className=\"font-medium cursor-pointer hover:text-blue-600\"\n                              onClick={() => onTicketClick && onTicketClick(ticket)}\n                            >\n                              {ticket.title}\n                            </h4>\n                            <div className={`text-xs font-medium px-2 py-1 rounded-full ${\n                              getPriorityColor(ticket.priority)\n                            }`}>\n                              {ticket.priority}\n                            </div>\n                          </div>\n                          \n                          <p className=\"text-xs text-gray-500 line-clamp-2 mt-1\">{ticket.description}</p>\n                          \n                          {ticket.ticket_type && (\n                            <div className=\"mt-2 flex items-center text-xs text-blue-600\">\n                              <CheckCircle className=\"h-3 w-3 mr-1\" />\n                              <span>{ticket.ticket_type}</span>\n                              {ticket.equity_points !== undefined && ticket.equity_points > 0 && (\n                                <span className=\"ml-1\">(Equity: {ticket.equity_points}%)</span>\n                              )}\n                            </div>\n                          )}\n                          \n                          {ticket.due_date && (\n                            <div className=\"mt-2 flex items-center text-xs text-gray-500\">\n                              <Clock className=\"h-3 w-3 mr-1\" />\n                              <span>Due: {formatDate(ticket.due_date)}</span>\n                            </div>\n                          )}\n                          \n                          <div className=\"mt-2 flex justify-end gap-1\">\n                            {onTicketDelete && (\n                              <AlertDialog>\n                                <AlertDialogTrigger asChild>\n                                  <Button \n                                    variant=\"ghost\" \n                                    size=\"sm\" \n                                    className=\"h-5 w-5 p-0 text-red-500 hover:text-red-700 hover:bg-red-50\" \n                                    onClick={(e) => e.stopPropagation()}\n                                  >\n                                    <Trash className=\"h-3 w-3\" />\n                                  </Button>\n                                </AlertDialogTrigger>\n                                <AlertDialogContent>\n                                  <AlertDialogHeader>\n                                    <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                                    <AlertDialogDescription>\n                                      This action cannot be undone. This will permanently delete the ticket\n                                      and all associated data.\n                                    </AlertDialogDescription>\n                                  </AlertDialogHeader>\n                                  <AlertDialogFooter>\n                                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                    <AlertDialogAction \n                                      onClick={() => onTicketDelete(ticket)} \n                                      className=\"bg-red-500 hover:bg-red-600\"\n                                    >\n                                      Delete\n                                    </AlertDialogAction>\n                                  </AlertDialogFooter>\n                                </AlertDialogContent>\n                              </AlertDialog>\n                            )}\n                            \n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\" \n                              className=\"h-5 w-5 p-0\" \n                              onClick={(e) => {\n                                e.stopPropagation();\n                                onTicketClick && onTicketClick(ticket);\n                              }}\n                            >\n                              <MoreHorizontal className=\"h-3 w-3\" />\n                            </Button>\n                          </div>\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          );\n        })}\n      </div>\n    </DragDropContext>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/ReplyDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/TicketActionBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/TicketAttachment.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/TicketCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1352,1355],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1352,1355],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1426,1429],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1426,1429],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1482,1485],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1482,1485],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1778,1781],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1778,1781],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { Card, CardHeader, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChevronDown, ChevronRight, MessageSquare, Calendar, CheckCircle, Trash2 } from \"lucide-react\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { formatDistance } from \"date-fns\";\nimport { toast } from \"sonner\";\nimport { supabase } from \"@/lib/supabase\";\n\ninterface TicketCardProps {\n  ticket: {\n    id: string;\n    title: string;\n    description: string;\n    status: string;\n    priority: string;\n    health: string;\n    assigned_to?: string;\n    reporter?: string;\n    due_date?: string;\n    created_at: string;\n    updated_at: string;\n    estimated_hours?: number;\n    equity_points?: number;\n    equity_agreed?: number;\n    equity_allocated?: number;\n    completion_percentage?: number;\n    assigned_user?: {\n      email?: string;\n    };\n    reporter_user?: {\n      email?: string;\n    };\n    project?: {\n      title?: string;\n    };\n    accepted_jobs?: {\n      equity_agreed?: number;\n      jobs_equity_allocated?: number;\n    };\n  };\n  onTicketUpdated?: (updates: any) => void;\n  onTicketAction?: (ticketId: string, action: string, data: any) => Promise<void>;\n  renderTicketActions?: (ticket: any) => React.ReactNode;\n}\n\nexport const TicketCard = ({ ticket, onTicketUpdated, onTicketAction, renderTicketActions }: TicketCardProps) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [comments, setComments] = useState<any[]>([]);\n  const [newComment, setNewComment] = useState(\"\");\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n\n  const toggleExpand = async () => {\n    setIsExpanded(!isExpanded);\n    \n    if (!isExpanded && comments.length === 0) {\n      await loadComments();\n    }\n  };\n  \n  const loadComments = async () => {\n    setIsLoadingComments(true);\n    try {\n      const { data, error } = await supabase\n        .from('ticket_comments')\n        .select(`\n          id,\n          content,\n          created_at,\n          user_id,\n          profiles:user_id(first_name, last_name, email)\n        `)\n        .eq('ticket_id', ticket.id)\n        .order('created_at', { ascending: false });\n        \n      if (error) throw error;\n      setComments(data || []);\n    } catch (error) {\n      console.error('Error loading comments:', error);\n      toast.error(\"Failed to load comments\");\n    } finally {\n      setIsLoadingComments(false);\n    }\n  };\n  \n  const handleStatusChange = async (newValue: string) => {\n    setIsUpdating(true);\n    try {\n      const { error } = await supabase\n        .from('tickets')\n        .update({ status: newValue })\n        .eq('id', ticket.id);\n        \n      if (error) throw error;\n      toast.success(\"Ticket status updated\");\n      if (onTicketUpdated) onTicketUpdated({ status: newValue });\n    } catch (error) {\n      console.error('Error updating ticket status:', error);\n      toast.error(\"Failed to update ticket status\");\n    } finally {\n      setIsUpdating(false);\n    }\n  };\n  \n  const handlePriorityChange = async (newValue: string) => {\n    setIsUpdating(true);\n    try {\n      const { error } = await supabase\n        .from('tickets')\n        .update({ priority: newValue })\n        .eq('id', ticket.id);\n        \n      if (error) throw error;\n      toast.success(\"Ticket priority updated\");\n      if (onTicketUpdated) onTicketUpdated({ priority: newValue });\n    } catch (error) {\n      console.error('Error updating ticket priority:', error);\n      toast.error(\"Failed to update ticket priority\");\n    } finally {\n      setIsUpdating(false);\n    }\n  };\n  \n  const handleHealthChange = async (newValue: string) => {\n    setIsUpdating(true);\n    try {\n      const { error } = await supabase\n        .from('tickets')\n        .update({ health: newValue })\n        .eq('id', ticket.id);\n        \n      if (error) throw error;\n      toast.success(\"Ticket health updated\");\n      if (onTicketUpdated) onTicketUpdated({ health: newValue });\n    } catch (error) {\n      console.error('Error updating ticket health:', error);\n      toast.error(\"Failed to update ticket health\");\n    } finally {\n      setIsUpdating(false);\n    }\n  };\n  \n  const handleAddComment = async () => {\n    if (!newComment.trim()) return;\n    \n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) {\n        toast.error(\"You must be logged in to add comments\");\n        return;\n      }\n      \n      const { error } = await supabase\n        .from('ticket_comments')\n        .insert({\n          ticket_id: ticket.id,\n          content: newComment,\n          user_id: session.user.id\n        });\n        \n      if (error) throw error;\n      \n      setNewComment(\"\");\n      toast.success(\"Comment added\");\n      await loadComments();\n    } catch (error) {\n      console.error('Error adding comment:', error);\n      toast.error(\"Failed to add comment\");\n    }\n  };\n\n  const handleDeleteTicket = async () => {\n    if (window.confirm('Are you sure you want to delete this ticket?')) {\n      try {\n        if (onTicketAction) {\n          await onTicketAction(ticket.id, 'delete', null);\n        } else {\n          // Fallback delete logic\n          const { error } = await supabase\n            .from('tickets')\n            .delete()\n            .eq('id', ticket.id);\n          \n          if (error) throw error;\n          toast.success('Ticket deleted successfully');\n        }\n      } catch (error) {\n        console.error('Error deleting ticket:', error);\n        toast.error('Failed to delete ticket');\n      }\n    }\n  };\n\n  const getHealthBadgeClass = (health: string) => {\n    switch (health.toLowerCase()) {\n      case 'green': return 'bg-green-100 text-green-800 hover:bg-green-200';\n      case 'amber': return 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200';\n      case 'red': return 'bg-red-100 text-red-800 hover:bg-red-200';\n      default: return 'bg-slate-100 text-slate-800 hover:bg-slate-200';\n    }\n  };\n  \n  const getPriorityBadgeClass = (priority: string) => {\n    switch (priority.toLowerCase()) {\n      case 'critical': return 'bg-red-100 text-red-800 hover:bg-red-200';\n      case 'high': return 'bg-orange-100 text-orange-800 hover:bg-orange-200';\n      case 'medium': return 'bg-blue-100 text-blue-800 hover:bg-blue-200';\n      case 'low': return 'bg-green-100 text-green-800 hover:bg-green-200';\n      default: return 'bg-slate-100 text-slate-800 hover:bg-slate-200';\n    }\n  };\n  \n  const getStatusBadgeClass = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'backlog': return 'bg-slate-100 text-slate-800 hover:bg-slate-200';\n      case 'todo': return 'bg-blue-100 text-blue-800 hover:bg-blue-200';\n      case 'in_progress': return 'bg-purple-100 text-purple-800 hover:bg-purple-200';\n      case 'review': return 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200';\n      case 'done': return 'bg-green-100 text-green-800 hover:bg-green-200';\n      default: return 'bg-slate-100 text-slate-800 hover:bg-slate-200';\n    }\n  };\n  \n  const formatDate = (dateString?: string) => {\n    if (!dateString) return 'Not set';\n    return new Date(dateString).toLocaleDateString();\n  };\n  \n  const timeAgo = (dateString: string) => {\n    try {\n      return formatDistance(new Date(dateString), new Date(), { addSuffix: true });\n    } catch (error) {\n      return 'Unknown';\n    }\n  };\n\n  // Ensure we have valid values for the select components\n  const safeStatus = ticket.status || \"backlog\";\n  const safePriority = ticket.priority || \"medium\";\n  const safeHealth = ticket.health || \"green\";\n\n  return (\n    <Collapsible\n      open={isExpanded}\n      onOpenChange={setIsExpanded}\n      className=\"border rounded-lg shadow-sm mb-4 bg-white\"\n    >\n      <div className=\"p-4 flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <CollapsibleTrigger asChild>\n            <Button variant=\"ghost\" size=\"sm\" className=\"p-1 h-auto\">\n              {isExpanded ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n            </Button>\n          </CollapsibleTrigger>\n          <span className=\"font-medium truncate max-w-[300px]\">{ticket.title}</span>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <div>\n            <Badge className={getHealthBadgeClass(ticket.health)}>\n              {ticket.health || \"N/A\"}\n            </Badge>\n          </div>\n          \n          <div>\n            <Badge className={getPriorityBadgeClass(ticket.priority)}>\n              {ticket.priority || \"N/A\"}\n            </Badge>\n          </div>\n          \n          <div>\n            <Badge className={getStatusBadgeClass(ticket.status)}>\n              {ticket.status ? ticket.status.replace('_', ' ') : \"N/A\"}\n            </Badge>\n          </div>\n          \n          {ticket.due_date && (\n            <div className=\"flex items-center text-xs text-gray-500\">\n              <Calendar className=\"h-3 w-3 mr-1\" />\n              {formatDate(ticket.due_date)}\n            </div>\n          )}\n          \n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={(e) => {\n              e.stopPropagation();\n              handleDeleteTicket();\n            }}\n            className=\"p-1 h-6 w-6 text-gray-400 hover:text-red-500\"\n          >\n            <Trash2 className=\"h-3 w-3\" />\n          </Button>\n\n          {renderTicketActions && renderTicketActions(ticket)}\n        </div>\n      </div>\n      \n      <CollapsibleContent>\n        <div className=\"border-t p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n            <div>\n              <h3 className=\"text-sm font-medium mb-2\">Description</h3>\n              <div className=\"bg-slate-50 rounded p-3 text-sm whitespace-pre-wrap\">\n                {ticket.description || \"No description provided.\"}\n              </div>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"text-sm font-medium mb-2\">Details</h3>\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div>\n                    <p className=\"text-xs text-gray-500\">Status</p>\n                    <Select\n                      value={safeStatus}\n                      onValueChange={handleStatusChange}\n                      disabled={isUpdating}\n                    >\n                      <SelectTrigger className=\"w-full h-8 text-xs\">\n                        <SelectValue placeholder=\"Select status\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"backlog\">Backlog</SelectItem>\n                        <SelectItem value=\"todo\">To Do</SelectItem>\n                        <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                        <SelectItem value=\"review\">Review</SelectItem>\n                        <SelectItem value=\"done\">Done</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <p className=\"text-xs text-gray-500\">Priority</p>\n                    <Select\n                      value={safePriority}\n                      onValueChange={handlePriorityChange}\n                      disabled={isUpdating}\n                    >\n                      <SelectTrigger className=\"w-full h-8 text-xs\">\n                        <SelectValue placeholder=\"Select priority\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"critical\">Critical</SelectItem>\n                        <SelectItem value=\"high\">High</SelectItem>\n                        <SelectItem value=\"medium\">Medium</SelectItem>\n                        <SelectItem value=\"low\">Low</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <p className=\"text-xs text-gray-500\">Health</p>\n                    <Select\n                      value={safeHealth}\n                      onValueChange={handleHealthChange}\n                      disabled={isUpdating}\n                    >\n                      <SelectTrigger className=\"w-full h-8 text-xs\">\n                        <SelectValue placeholder=\"Select health\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"green\">Green</SelectItem>\n                        <SelectItem value=\"amber\">Amber</SelectItem>\n                        <SelectItem value=\"red\">Red</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <p className=\"text-xs text-gray-500\">Assignee</p>\n                    <p className=\"text-sm truncate\">{ticket.assigned_user?.email || \"Unassigned\"}</p>\n                  </div>\n                  \n                  <div>\n                    <p className=\"text-xs text-gray-500\">Reporter</p>\n                    <p className=\"text-sm truncate\">{ticket.reporter_user?.email || \"Unknown\"}</p>\n                  </div>\n                  \n                  <div>\n                    <p className=\"text-xs text-gray-500\">Project</p>\n                    <p className=\"text-sm truncate\">{ticket.project?.title || \"None\"}</p>\n                  </div>\n\n                  <div>\n                    <p className=\"text-xs text-gray-500\">Completion</p>\n                    <p className=\"text-sm\">{ticket.completion_percentage || 0}%</p>\n                  </div>\n\n                  <div>\n                    <p className=\"text-xs text-gray-500\">Equity</p>\n                    <p className=\"text-sm\">\n                      {(ticket.equity_agreed || ticket.accepted_jobs?.equity_agreed || ticket.equity_points || 0)}% \n                      {ticket.accepted_jobs?.jobs_equity_allocated && ` (${ticket.accepted_jobs.jobs_equity_allocated}% allocated)`}\n                    </p>\n                  </div>\n                  \n                  <div>\n                    <p className=\"text-xs text-gray-500\">Created</p>\n                    <p className=\"text-sm\">{timeAgo(ticket.created_at)}</p>\n                  </div>\n                  \n                  <div>\n                    <p className=\"text-xs text-gray-500\">Due Date</p>\n                    <p className=\"text-sm\">{formatDate(ticket.due_date)}</p>\n                  </div>\n                </div>\n              </div>\n              \n              <div>\n                <h3 className=\"text-sm font-medium mb-2\">Comments</h3>\n                <div className=\"bg-slate-50 rounded p-3 max-h-60 overflow-y-auto space-y-3\">\n                  {isLoadingComments ? (\n                    <p className=\"text-center text-sm py-2\">Loading comments...</p>\n                  ) : comments.length > 0 ? (\n                    comments.map(comment => (\n                      <div key={comment.id} className=\"border-b pb-2 last:border-b-0 last:pb-0\">\n                        <div className=\"flex justify-between items-center mb-1\">\n                          <p className=\"text-xs font-medium\">\n                            {comment.profiles?.first_name || comment.profiles?.email || \"User\"}\n                          </p>\n                          <p className=\"text-xs text-gray-500\">{timeAgo(comment.created_at)}</p>\n                        </div>\n                        <p className=\"text-sm\">{comment.content}</p>\n                      </div>\n                    ))\n                  ) : (\n                    <p className=\"text-center text-sm py-2 text-gray-500\">No comments yet</p>\n                  )}\n                </div>\n                \n                <div className=\"mt-3 flex gap-2\">\n                  <input\n                    type=\"text\"\n                    value={newComment}\n                    onChange={(e) => setNewComment(e.target.value)}\n                    placeholder=\"Add a comment...\"\n                    className=\"flex-1 px-3 py-1 text-sm border rounded\"\n                  />\n                  <Button \n                    size=\"sm\" \n                    onClick={handleAddComment}\n                    className=\"h-8\"\n                    disabled={!newComment.trim()}\n                  >\n                    <MessageSquare className=\"h-4 w-4 mr-1\" />\n                    Add\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CollapsibleContent>\n    </Collapsible>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/TicketDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[738,741],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[738,741],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'updateTicketsWithTimeEntries'. Either include it or remove the dependency array.","line":74,"column":6,"nodeType":"ArrayExpression","endLine":74,"endColumn":40,"suggestions":[{"desc":"Update the dependencies array to be: [showTimeTracking, tickets.length, updateTicketsWithTimeEntries]","fix":{"range":[2157,2191],"text":"[showTimeTracking, tickets.length, updateTicketsWithTimeEntries]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3508,3511],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3508,3511],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":126,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4046,4049],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4046,4049],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":181,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6203,6206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6203,6206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":244,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8439,8442],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8439,8442],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Ticket } from '@/types/types';\nimport { Pagination } from \"@/components/ui/pagination\";\nimport { useTicketDashboard } from './hooks/useTicketDashboard';\nimport { TicketFilters } from './filters/TicketFilters';\nimport { EmptyTicketState } from './empty/EmptyTicketState';\nimport { TicketTable } from './table/TicketTable';\nimport { TicketDetailDialog } from './dialogs/TicketDetailDialog';\nimport { DeleteTicketDialog } from './dialogs/DeleteTicketDialog';\nimport { toast } from \"sonner\";\nimport { supabase } from \"@/lib/supabase\";\n\ninterface TicketDashboardProps {\n  initialTickets: Ticket[];\n  onRefresh: () => void;\n  onTicketAction: (ticketId: string, action: string, data: any) => Promise<void>;\n  showTimeTracking?: boolean;\n  userId: string;\n  onLogTime?: (ticketId: string) => void;\n  renderTicketActions?: (ticket: Ticket) => React.ReactNode;\n  expandedTickets: Set<string>;\n  toggleTicketExpansion: (ticketId: string) => void;\n  userCanEditDates?: boolean;\n  userCanEditStatus?: boolean;\n  loading?: boolean;\n}\n\nexport const TicketDashboard: React.FC<TicketDashboardProps> = ({\n  initialTickets,\n  onRefresh,\n  onTicketAction,\n  showTimeTracking = false,\n  userId,\n  onLogTime,\n  renderTicketActions,\n  expandedTickets = new Set<string>(),\n  toggleTicketExpansion = () => {},\n  userCanEditDates = false,\n  userCanEditStatus = false,\n  loading = false\n}) => {\n  const [isDeleting, setIsDeleting] = useState(false);\n  \n  const {\n    tickets,\n    setTickets,\n    displayedTickets,\n    searchTerm,\n    setSearchTerm,\n    statusFilter,\n    setStatusFilter,\n    priorityFilter,\n    setPriorityFilter,\n    typeFilter,\n    setTypeFilter,\n    currentPage,\n    setCurrentPage,\n    totalPages,\n    selectedTicket,\n    isDialogOpen,\n    openTicketDetails,\n    closeTicketDetails,\n    ticketToDelete,\n    isDeleteDialogOpen,\n    showDeleteConfirmation,\n    cancelDelete\n  } = useTicketDashboard(initialTickets);\n\n  // Add useEffect to fetch and update time entries for all tickets\n  useEffect(() => {\n    if (showTimeTracking && tickets.length > 0) {\n      updateTicketsWithTimeEntries();\n    }\n  }, [showTimeTracking, tickets.length]);\n\n  // Function to fetch time entries from Supabase and update ticket hours\n  const updateTicketsWithTimeEntries = async () => {\n    try {\n      // Get all unique ticket IDs\n      const ticketIds = tickets.map(ticket => ticket.id);\n      \n      // Fetch time entries for all tickets in one query\n      const { data: timeEntries, error } = await supabase\n        .from('time_entries')\n        .select('ticket_id, hours_logged')\n        .in('ticket_id', ticketIds);\n        \n      if (error) throw error;\n      \n      // Calculate total hours for each ticket\n      const ticketHours = {};\n      timeEntries?.forEach(entry => {\n        if (!ticketHours[entry.ticket_id]) {\n          ticketHours[entry.ticket_id] = 0;\n        }\n        ticketHours[entry.ticket_id] += entry.hours_logged;\n      });\n      \n      // Update tickets with the calculated hours\n      const updatedTickets = tickets.map(ticket => {\n        return {\n          ...ticket,\n          hours_logged: ticketHours[ticket.id] || 0\n        };\n      });\n      \n      setTickets(updatedTickets);\n    } catch (error) {\n      console.error('Error fetching time entries for tickets:', error);\n    }\n  };\n\n  // Update the existing handleTicketAction function to handle soft deletion\n  const handleTicketAction = async (ticketId: string, action: string, data: any) => {\n    try {\n      if (action === 'deleteTicket') {\n        // Special handling for deletion\n        try {\n          // Pass the userId to the deleteTicket function\n          await onTicketAction(ticketId, action, userId);\n          \n          // Filter out deleted tickets (those with status 'deleted') from the UI\n          setTickets(tickets.filter(ticket => ticket.id !== ticketId || ticket.status !== 'deleted'));\n          closeTicketDetails();\n          toast.success(\"Ticket deleted successfully\");\n        } catch (error: any) {\n          console.error(\"Error deleting ticket:\", error);\n          // Show specific error message\n          if (error.message) {\n            toast.error(error.message);\n          } else if (error.code === 'P0001') {\n            const msg = error.message || \"Cannot delete this ticket\";\n            toast.error(msg);\n          } else {\n            toast.error(\"Failed to delete ticket\");\n          }\n          throw error; // Re-throw to prevent further processing\n        }\n        return;\n      }\n      \n      // For all other actions\n      await onTicketAction(ticketId, action, data);\n      \n      // Update the local ticket state\n      const ticketIndex = tickets.findIndex(t => t.id === ticketId);\n      if (ticketIndex !== -1) {\n        const updatedTickets = [...tickets];\n        \n        switch (action) {\n          case 'updateStatus':\n            updatedTickets[ticketIndex] = { ...updatedTickets[ticketIndex], status: data };\n            break;\n          case 'updatePriority':\n            updatedTickets[ticketIndex] = { ...updatedTickets[ticketIndex], priority: data };\n            break;\n          case 'updateCompletionPercentage':\n            updatedTickets[ticketIndex] = { ...updatedTickets[ticketIndex], completion_percentage: data };\n            break;\n          case 'updateEstimatedHours':\n            updatedTickets[ticketIndex] = { ...updatedTickets[ticketIndex], estimated_hours: data };\n            break;\n          case 'updateDueDate':\n            updatedTickets[ticketIndex] = { ...updatedTickets[ticketIndex], due_date: data };\n            break;\n          case 'logTime':\n            // After logging time, update the time entries\n            if (showTimeTracking) {\n              setTimeout(() => updateTicketsWithTimeEntries(), 500);\n            }\n            break;\n          default:\n            break;\n        }\n        \n        setTickets(updatedTickets);\n        const actionName = action.replace('update', '');\n        const formattedAction = actionName.charAt(0).toUpperCase() + actionName.slice(1).toLowerCase();\n        toast.success(`${formattedAction} updated successfully`);\n      }\n    } catch (error: any) {\n      // Only show error if it wasn't already handled in the deleteTicket block\n      if (action !== 'deleteTicket') {\n        console.error(`Error with ticket action ${action}:`, error);\n        toast.error(`Failed to ${action.replace('update', '').toLowerCase()} ticket`);\n      }\n    }\n  };\n\n  // Custom onLogTime handler that updates time entries after logging\n  const handleLogTime = (ticketId: string) => {\n    if (onLogTime) {\n      onLogTime(ticketId);\n      // Update time entries after a slight delay to allow for the time entry to be saved\n      setTimeout(() => updateTicketsWithTimeEntries(), 1000);\n    }\n  };\n\n  const handleUpdateStatus = async (ticketId: string, status: string) => {\n    try {\n      await onTicketAction(ticketId, \"updateStatus\", status);\n      setTickets(\n        tickets.map((ticket) =>\n          ticket.id === ticketId ? { ...ticket, status } : ticket\n        )\n      );\n      toast.success(\"Status updated successfully\");\n    } catch (error) {\n      console.error(\"Error updating status:\", error);\n      toast.error(\"Failed to update status\");\n    }\n  };\n\n  const handleUpdatePriority = async (ticketId: string, priority: string) => {\n    try {\n      await onTicketAction(ticketId, \"updatePriority\", priority);\n      setTickets(\n        tickets.map((ticket) =>\n          ticket.id === ticketId ? { ...ticket, priority } : ticket\n        )\n      );\n      toast.success(\"Priority updated successfully\");\n    } catch (error) {\n      console.error(\"Error updating priority:\", error);\n      toast.error(\"Failed to update priority\");\n    }\n  };\n\n  const handleDeleteTicket = async () => {\n    if (!ticketToDelete || isDeleting) return;\n    \n    setIsDeleting(true);\n    try {\n      // Call the onTicketAction function which should connect to TicketService.deleteTicket\n      await onTicketAction(ticketToDelete.id, \"deleteTicket\", userId);\n      \n      // Only update local state after confirming successful DB operation\n      setTickets(tickets.filter(ticket => ticket.id !== ticketToDelete.id || ticket.status === 'deleted'));\n      toast.success(\"Ticket deleted successfully\");\n      cancelDelete();\n      \n      // Refresh to ensure UI is in sync with DB\n      onRefresh();\n    } catch (error: any) {\n      console.error(\"Error deleting ticket:\", error);\n      \n      // Show the specific error message from the backend if available\n      if (error.message) {\n        toast.error(error.message);\n      } else if (error.code === 'P0001' && error.message?.includes('time entries')) {\n        toast.error(\"Cannot delete ticket with time entries\");\n      } else if (error.code === 'P0001' && error.message?.includes('completion progress')) {\n        toast.error(\"Cannot delete ticket with completion progress\");\n      } else {\n        toast.error(\"Failed to delete ticket\");\n      }\n    } finally {\n      setIsDeleting(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <TicketFilters\n        searchTerm={searchTerm}\n        statusFilter={statusFilter}\n        priorityFilter={priorityFilter}\n        typeFilter={typeFilter}\n        setSearchTerm={setSearchTerm}\n        setStatusFilter={setStatusFilter}\n        setPriorityFilter={setPriorityFilter}\n        setTypeFilter={setTypeFilter}\n        onRefresh={onRefresh}\n      />\n\n      {displayedTickets.length === 0 ? (\n        <EmptyTicketState />\n      ) : (\n        <>\n          <TicketTable\n            tickets={displayedTickets}\n            showTimeTracking={showTimeTracking}\n            userCanEditStatus={userCanEditStatus}\n            openTicketDetails={openTicketDetails}\n            handleUpdateStatus={handleUpdateStatus}\n            handleUpdatePriority={handleUpdatePriority}\n            showDeleteConfirmation={showDeleteConfirmation}\n            onLogTime={handleLogTime}\n            renderTicketActions={renderTicketActions}\n          />\n\n          {totalPages > 1 && (\n            <Pagination\n              currentPage={currentPage}\n              totalPages={totalPages}\n              onPageChange={setCurrentPage}\n            />\n          )}\n        </>\n      )}\n\n      <TicketDetailDialog\n        isOpen={isDialogOpen}\n        selectedTicket={selectedTicket}\n        onClose={closeTicketDetails}\n        onTicketAction={handleTicketAction}\n        onLogTime={handleLogTime}\n        showTimeTracking={showTimeTracking}\n        userCanEditStatus={userCanEditStatus}\n        userCanEditDates={userCanEditDates}\n      />\n\n      <DeleteTicketDialog\n        isOpen={isDeleteDialogOpen}\n        ticketToDelete={ticketToDelete}\n        onCancel={cancelDelete}\n        onConfirm={handleDeleteTicket}\n        isDeleting={isDeleting}\n      />\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/TicketDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/TicketForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/TicketList.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchTickets'. Either include it or remove the dependency array.","line":69,"column":6,"nodeType":"ArrayExpression","endLine":69,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [fetchTickets, filter, projectId]","fix":{"range":[1695,1714],"text":"[fetchTickets, filter, projectId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { supabase } from '@/lib/supabase';\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader,\n  TableRow \n} from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { \n  ChevronDown, \n  ChevronUp, \n  Clock, \n  Filter, \n  MoreHorizontal, \n  User \n} from 'lucide-react';\nimport { toast } from 'sonner';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\n\nexport const TicketList = ({ projectId }) => {\n  const [tickets, setTickets] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [filter, setFilter] = useState('all');\n  const [expandedTicketId, setExpandedTicketId] = useState(null);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [currentTicket, setCurrentTicket] = useState(null);\n  const [users, setUsers] = useState([]);\n  const [projects, setProjects] = useState([]);\n  const [tasks, setTasks] = useState([]);\n\n  useEffect(() => {\n    fetchTickets();\n    fetchUsers();\n    fetchProjects();\n  }, [filter, projectId]);\n\n  useEffect(() => {\n    if (projectId) {\n      fetchTasks(projectId);\n    }\n  }, [projectId]);\n\n  const fetchTickets = async () => {\n    setLoading(true);\n    try {\n      let query = supabase\n        .from('tickets')\n        .select(`\n          *,\n          project:project_id(title, project_id),\n          task:task_id(title, task_id),\n          assigned_user:assigned_to(first_name, last_name, email, id)\n        `)\n        .order('created_at', { ascending: false });\n      \n      if (projectId) {\n        query = query.eq('project_id', projectId);\n      }\n      \n      // Apply filters\n      if (filter === 'mine') {\n        const { data: { session } } = await supabase.auth.getSession();\n        if (session) {\n          query = query.eq('assigned_to', session.user.id);\n        }\n      } else if (filter === 'open') {\n        query = query.not('status', 'eq', 'done');\n      } else if (filter === 'done') {\n        query = query.eq('status', 'done');\n      }\n      \n      const { data, error } = await query;\n      \n      if (error) throw error;\n      \n      console.log(\"Tickets data:\", data);\n      setTickets(data || []);\n    } catch (error) {\n      console.error('Error fetching tickets:', error);\n      toast.error(\"Failed to load tickets\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchUsers = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('id, first_name, last_name, email');\n      \n      if (error) throw error;\n      setUsers(data || []);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n    }\n  };\n\n  const fetchProjects = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('business_projects')\n        .select('project_id, title');\n      \n      if (error) throw error;\n      setProjects(data || []);\n    } catch (error) {\n      console.error('Error fetching projects:', error);\n    }\n  };\n\n  const fetchTasks = async (projectId) => {\n    try {\n      const { data, error } = await supabase\n        .from('project_sub_tasks')\n        .select('task_id, title')\n        .eq('project_id', projectId);\n      \n      if (error) throw error;\n      setTasks(data || []);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  const handleUpdateTicket = async (ticketData) => {\n    try {\n      const { data: oldTicket, error: fetchError } = await supabase\n        .from('tickets')\n        .select('*')\n        .eq('id', ticketData.id)\n        .single();\n        \n      if (fetchError) throw fetchError;\n      \n      // Track changes for notes\n      const changes = [];\n      \n      if (oldTicket.status !== ticketData.status) {\n        changes.push({\n          type: 'status_change',\n          from: oldTicket.status,\n          to: ticketData.status,\n          timestamp: new Date().toISOString()\n        });\n      }\n      \n      if (oldTicket.priority !== ticketData.priority) {\n        changes.push({\n          type: 'priority_change',\n          from: oldTicket.priority,\n          to: ticketData.priority,\n          timestamp: new Date().toISOString()\n        });\n      }\n      \n      if (oldTicket.assigned_to !== ticketData.assigned_to) {\n        changes.push({\n          type: 'assignee_change',\n          from: oldTicket.assigned_to,\n          to: ticketData.assigned_to,\n          timestamp: new Date().toISOString()\n        });\n      }\n      \n      // Prepare notes\n      let notes = oldTicket.notes || [];\n      if (typeof notes === 'string') {\n        try {\n          notes = JSON.parse(notes);\n        } catch (e) {\n          notes = [];\n        }\n      }\n      if (!Array.isArray(notes)) {\n        notes = [];\n      }\n      \n      const updatedNotes = [...notes, ...changes];\n      \n      // Update the ticket\n      const { error: updateError } = await supabase\n        .from('tickets')\n        .update({\n          ...ticketData,\n          notes: updatedNotes,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', ticketData.id);\n        \n      if (updateError) throw updateError;\n      \n      toast.success(\"Ticket updated successfully\");\n      fetchTickets();\n      setEditDialogOpen(false);\n    } catch (error) {\n      console.error('Error updating ticket:', error);\n      toast.error(\"Failed to update ticket\");\n    }\n  };\n\n  const handleDeleteTicket = async (ticketId) => {\n    try {\n      const { error } = await supabase\n        .from('tickets')\n        .delete()\n        .eq('id', ticketId);\n        \n      if (error) throw error;\n      \n      toast.success(\"Ticket deleted successfully\");\n      fetchTickets();\n    } catch (error) {\n      console.error('Error deleting ticket:', error);\n      toast.error(\"Failed to delete ticket\");\n    }\n  };\n\n  const toggleExpandTicket = (ticketId) => {\n    setExpandedTicketId(expandedTicketId === ticketId ? null : ticketId);\n  };\n\n  const openEditDialog = (ticket) => {\n    setCurrentTicket(ticket);\n    setEditDialogOpen(true);\n    \n    // If ticket is associated with a project, load its tasks\n    if (ticket.project_id) {\n      fetchTasks(ticket.project_id);\n    }\n  };\n\n  const renderHealthIndicator = (health) => {\n    const colors = {\n      red: 'bg-red-500',\n      amber: 'bg-yellow-500',\n      green: 'bg-green-500'\n    };\n    \n    return (\n      <span \n        className={`inline-block w-3 h-3 rounded-full ${colors[health] || 'bg-gray-500'}`} \n        title={`Health: ${health}`}\n      />\n    );\n  };\n\n  const renderStatusBadge = (status) => {\n    const badges = {\n      backlog: 'bg-gray-100 text-gray-800',\n      todo: 'bg-blue-100 text-blue-800',\n      in_progress: 'bg-yellow-100 text-yellow-800',\n      review: 'bg-purple-100 text-purple-800',\n      done: 'bg-green-100 text-green-800'\n    };\n    \n    return (\n      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${badges[status] || 'bg-gray-100 text-gray-800'}`}>\n        {status}\n      </span>\n    );\n  };\n\n  if (loading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex justify-center\">\n            <p>Loading tickets...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex justify-between items-center\">\n          <CardTitle>Tickets</CardTitle>\n          <div className=\"flex items-center gap-2\">\n            <Select defaultValue={filter} onValueChange={setFilter}>\n              <SelectTrigger className=\"w-[180px]\">\n                <SelectValue placeholder=\"Filter tickets\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Tickets</SelectItem>\n                <SelectItem value=\"mine\">My Tickets</SelectItem>\n                <SelectItem value=\"open\">Open Tickets</SelectItem>\n                <SelectItem value=\"done\">Completed Tickets</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {tickets.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No tickets found.</p>\n          </div>\n        ) : (\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead className=\"w-8\"></TableHead>\n                <TableHead>Title</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Priority</TableHead>\n                <TableHead>Project</TableHead>\n                <TableHead>Task</TableHead>\n                <TableHead>Assigned To</TableHead>\n                <TableHead>Created</TableHead>\n                <TableHead className=\"w-8\"></TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {tickets.map(ticket => (\n                <React.Fragment key={ticket.id}>\n                  <TableRow className={expandedTicketId === ticket.id ? 'bg-gray-50' : ''}>\n                    <TableCell>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => toggleExpandTicket(ticket.id)}\n                      >\n                        {expandedTicketId === ticket.id ? \n                          <ChevronUp className=\"h-4 w-4\" /> : \n                          <ChevronDown className=\"h-4 w-4\" />\n                        }\n                      </Button>\n                    </TableCell>\n                    <TableCell className=\"font-medium flex items-center gap-2\">\n                      {ticket.health && renderHealthIndicator(ticket.health)}\n                      {ticket.title}\n                    </TableCell>\n                    <TableCell>\n                      {renderStatusBadge(ticket.status)}\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant={\n                        ticket.priority === 'high' ? 'destructive' :\n                        ticket.priority === 'medium' ? 'secondary' :\n                        'outline'\n                      }>\n                        {ticket.priority}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {ticket.project?.title || 'N/A'}\n                    </TableCell>\n                    <TableCell>\n                      {ticket.task?.title || 'N/A'}\n                    </TableCell>\n                    <TableCell>\n                      {ticket.assigned_user ? \n                        `${ticket.assigned_user.first_name} ${ticket.assigned_user.last_name}` : \n                        'Unassigned'\n                      }\n                    </TableCell>\n                    <TableCell>\n                      {new Date(ticket.created_at).toLocaleDateString()}\n                    </TableCell>\n                    <TableCell>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem onClick={() => openEditDialog(ticket)}>\n                            Edit\n                          </DropdownMenuItem>\n                          <DropdownMenuSeparator />\n                          <DropdownMenuItem \n                            className=\"text-red-600\" \n                            onClick={() => handleDeleteTicket(ticket.id)}\n                          >\n                            Delete\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                  \n                  {expandedTicketId === ticket.id && (\n                    <TableRow className=\"bg-gray-50\">\n                      <TableCell colSpan={9} className=\"p-4\">\n                        <div className=\"space-y-4\">\n                          <div>\n                            <h4 className=\"font-medium mb-1\">Description</h4>\n                            <p className=\"text-sm text-muted-foreground whitespace-pre-wrap\">\n                              {ticket.description || 'No description provided.'}\n                            </p>\n                          </div>\n                          \n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <div>\n                              <h4 className=\"font-medium mb-1\">Details</h4>\n                              <dl className=\"grid grid-cols-2 gap-2 text-sm\">\n                                {ticket.due_date && (\n                                  <>\n                                    <dt className=\"text-muted-foreground\">Due Date:</dt>\n                                    <dd>{new Date(ticket.due_date).toLocaleDateString()}</dd>\n                                  </>\n                                )}\n                                {ticket.estimated_hours !== null && (\n                                  <>\n                                    <dt className=\"text-muted-foreground\">Estimated Hours:</dt>\n                                    <dd>{ticket.estimated_hours}h</dd>\n                                  </>\n                                )}\n                                {ticket.ticket_type && (\n                                  <>\n                                    <dt className=\"text-muted-foreground\">Type:</dt>\n                                    <dd>{ticket.ticket_type}</dd>\n                                  </>\n                                )}\n                                {ticket.equity_points !== null && (\n                                  <>\n                                    <dt className=\"text-muted-foreground\">Equity Points:</dt>\n                                    <dd>{ticket.equity_points}</dd>\n                                  </>\n                                )}\n                              </dl>\n                            </div>\n                            \n                            <div>\n                              <h4 className=\"font-medium mb-1\">Activity</h4>\n                              <div className=\"text-sm space-y-2 max-h-[200px] overflow-y-auto\">\n                                {ticket.notes && Array.isArray(ticket.notes) && ticket.notes.length > 0 ? (\n                                  ticket.notes.map((note, index) => (\n                                    <div key={index} className=\"py-1 border-b border-gray-100\">\n                                      <div className=\"flex justify-between\">\n                                        <span className=\"font-medium\">\n                                          {note.type === 'status_change' ? 'Status changed' :\n                                           note.type === 'priority_change' ? 'Priority changed' :\n                                           note.type === 'assignee_change' ? 'Assignee changed' :\n                                           note.type}\n                                        </span>\n                                        <span className=\"text-xs text-muted-foreground\">\n                                          {new Date(note.timestamp).toLocaleString()}\n                                        </span>\n                                      </div>\n                                      {note.from !== undefined && note.to !== undefined && (\n                                        <div className=\"text-xs text-muted-foreground mt-1\">\n                                          From <span className=\"font-medium\">{note.from || 'none'}</span> to <span className=\"font-medium\">{note.to || 'none'}</span>\n                                        </div>\n                                      )}\n                                      {note.message && (\n                                        <p className=\"mt-1\">{note.message}</p>\n                                      )}\n                                    </div>\n                                  ))\n                                ) : (\n                                  <p className=\"text-muted-foreground\">No activity recorded.</p>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </React.Fragment>\n              ))}\n            </TableBody>\n          </Table>\n        )}\n      </CardContent>\n      \n      <Dialog open={editDialogOpen} onOpenChange={setEditDialogOpen}>\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>Edit Ticket</DialogTitle>\n            <DialogDescription>\n              Make changes to the ticket details below.\n            </DialogDescription>\n          </DialogHeader>\n          \n          {currentTicket && (\n            <form onSubmit={(e) => {\n              e.preventDefault();\n              handleUpdateTicket(currentTicket);\n            }}>\n              <div className=\"grid gap-4 py-4\">\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"title\">Title</Label>\n                  <Input\n                    id=\"title\"\n                    value={currentTicket.title || ''}\n                    onChange={(e) => setCurrentTicket({...currentTicket, title: e.target.value})}\n                    required\n                  />\n                </div>\n                \n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={currentTicket.description || ''}\n                    onChange={(e) => setCurrentTicket({...currentTicket, description: e.target.value})}\n                    rows={4}\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"status\">Status</Label>\n                    <Select\n                      value={currentTicket.status || undefined}\n                      onValueChange={(value) => setCurrentTicket({...currentTicket, status: value})}\n                    >\n                      <SelectTrigger id=\"status\">\n                        <SelectValue placeholder=\"Select status\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"backlog\">Backlog</SelectItem>\n                        <SelectItem value=\"todo\">To Do</SelectItem>\n                        <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                        <SelectItem value=\"review\">Review</SelectItem>\n                        <SelectItem value=\"done\">Done</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"priority\">Priority</Label>\n                    <Select\n                      value={currentTicket.priority || undefined}\n                      onValueChange={(value) => setCurrentTicket({...currentTicket, priority: value})}\n                    >\n                      <SelectTrigger id=\"priority\">\n                        <SelectValue placeholder=\"Select priority\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"low\">Low</SelectItem>\n                        <SelectItem value=\"medium\">Medium</SelectItem>\n                        <SelectItem value=\"high\">High</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"project\">Project</Label>\n                    <Select\n                      value={currentTicket.project_id || undefined}\n                      onValueChange={(value) => {\n                        setCurrentTicket({...currentTicket, project_id: value});\n                        fetchTasks(value);\n                      }}\n                    >\n                      <SelectTrigger id=\"project\">\n                        <SelectValue placeholder=\"Select project\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {projects.map(project => (\n                          <SelectItem key={project.project_id} value={project.project_id}>\n                            {project.title}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"task\">Task</Label>\n                    <Select\n                      value={currentTicket.task_id || undefined}\n                      onValueChange={(value) => setCurrentTicket({...currentTicket, task_id: value})}\n                      disabled={!currentTicket.project_id || tasks.length === 0}\n                    >\n                      <SelectTrigger id=\"task\">\n                        <SelectValue placeholder=\"Select task\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {tasks.map(task => (\n                          <SelectItem key={task.task_id} value={task.task_id}>\n                            {task.title}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"assignee\">Assigned To</Label>\n                    <Select\n                      value={currentTicket.assigned_to || undefined}\n                      onValueChange={(value) => setCurrentTicket({...currentTicket, assigned_to: value || null})}\n                    >\n                      <SelectTrigger id=\"assignee\">\n                        <SelectValue placeholder=\"Select assignee\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"unassigned\">Unassigned</SelectItem>\n                        {users.map(user => (\n                          <SelectItem key={user.id} value={user.id}>\n                            {user.first_name} {user.last_name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"health\">Health</Label>\n                    <Select\n                      value={currentTicket.health || undefined}\n                      onValueChange={(value) => setCurrentTicket({...currentTicket, health: value})}\n                    >\n                      <SelectTrigger id=\"health\">\n                        <SelectValue placeholder=\"Select health\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"green\">Green</SelectItem>\n                        <SelectItem value=\"amber\">Amber</SelectItem>\n                        <SelectItem value=\"red\">Red</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"due_date\">Due Date</Label>\n                    <Input\n                      id=\"due_date\"\n                      type=\"date\"\n                      value={currentTicket.due_date ? new Date(currentTicket.due_date).toISOString().split('T')[0] : ''}\n                      onChange={(e) => setCurrentTicket({...currentTicket, due_date: e.target.value ? new Date(e.target.value).toISOString() : null})}\n                    />\n                  </div>\n                  \n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"estimated_hours\">Estimated Hours</Label>\n                    <Input\n                      id=\"estimated_hours\"\n                      type=\"number\"\n                      min=\"0\"\n                      step=\"0.5\"\n                      value={currentTicket.estimated_hours || ''}\n                      onChange={(e) => setCurrentTicket({...currentTicket, estimated_hours: e.target.value ? parseFloat(e.target.value) : null})}\n                    />\n                  </div>\n                </div>\n              </div>\n              \n              <DialogFooter>\n                <Button type=\"submit\">Save Changes</Button>\n              </DialogFooter>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </Card>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/TicketManagement.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'calculateTicketStats'. Either include it or remove the dependency array.","line":18,"column":6,"nodeType":"ArrayExpression","endLine":18,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [calculateTicketStats, tickets]","fix":{"range":[569,578],"text":"[calculateTicketStats, tickets]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { supabase } from \"@/lib/supabase\";\nimport { Ticket, TicketStatistics } from \"@/types/types\";\n\nexport const useTicketManagement = (initialTickets: Ticket[] = []) => {\n  const [tickets, setTickets] = useState<Ticket[]>(initialTickets);\n  const [stats, setStats] = useState<TicketStatistics>({\n    totalTickets: 0,\n    openTickets: 0,\n    inProgressTickets: 0,\n    completedTickets: 0,\n    overdueTickets: 0,\n    total: 0, // Added to match updated interface\n  });\n\n  useEffect(() => {\n    calculateTicketStats();\n  }, [tickets]);\n\n  const calculateTicketStats = () => {\n    const totalTickets = tickets.length;\n    const openTickets = tickets.filter(t => t.status === 'new').length;\n    const inProgressTickets = tickets.filter(t => t.status === 'in-progress').length;\n    const completedTickets = tickets.filter(t => ['done', 'closed'].includes(t.status)).length;\n    const overdueTickets = tickets.filter(t => {\n      if (!t.due_date) return false;\n      return new Date(t.due_date) < new Date() && !['done', 'closed'].includes(t.status);\n    }).length;\n\n    setStats({\n      totalTickets,\n      openTickets,\n      inProgressTickets,\n      completedTickets,\n      overdueTickets,\n      total: totalTickets, // Added to match updated interface\n      open: openTickets, // Added to match updated interface\n    });\n  };\n\n  const addTicket = (newTicket: Ticket) => {\n    setTickets(prevTickets => [...prevTickets, newTicket]);\n    calculateTicketStats();\n  };\n\n  const updateTicket = (updatedTicket: Ticket) => {\n    setTickets(prevTickets =>\n      prevTickets.map(ticket =>\n        ticket.id === updatedTicket.id ? updatedTicket : ticket\n      )\n    );\n    calculateTicketStats();\n  };\n\n  const deleteTicket = (ticketId: string) => {\n    setTickets(prevTickets => prevTickets.filter(ticket => ticket.id !== ticketId));\n    calculateTicketStats();\n  };\n  \n  return {\n    tickets,\n    stats,\n    addTicket,\n    updateTicket,\n    deleteTicket,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/TicketManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1858,1861],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1858,1861],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchTickets'. Either include it or remove the dependency array.","line":99,"column":6,"nodeType":"ArrayExpression","endLine":99,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [fetchTickets, initialTickets]","fix":{"range":[3134,3150],"text":"[fetchTickets, initialTickets]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":118,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3671,3674],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3671,3674],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'notes' is never reassigned. Use 'const' instead.","line":207,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":207,"endColumn":16,"fix":{"range":[6286,6321],"text":"const notes = ticketData.notes || [];"}},{"ruleId":"prefer-const","severity":2,"message":"'notes' is never reassigned. Use 'const' instead.","line":397,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":397,"endColumn":16,"fix":{"range":[12297,12332],"text":"const notes = ticketData.notes || [];"}}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"// TicketManagement.tsx\nimport React, { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Users, FileText, AlertTriangle, CheckCircle, Clock } from \"lucide-react\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { TicketKanbanBoard } from \"./KanbanBoard\";\nimport { TicketGanttChart } from \"./GanttChart\";\nimport { TicketStatistics } from \"./TicketStats\";\nimport { toast } from \"sonner\";\n\nexport interface Ticket {\n  id: string;\n  title: string;\n  description: string;\n  status: string;\n  priority: string;\n  health?: string;\n  due_date?: string;\n  created_at: string;\n  updated_at: string;\n  reporter_email?: string;\n  reporter?: string;\n  expanded?: boolean;\n  newNote?: string;\n  notes?: Array<{\n    action: string;\n    user: string;\n    timestamp: string;\n    comment?: string;\n  }> | null;\n  system_info?: {\n    url: string;\n    userAgent: string;\n    timestamp: string;\n    viewportSize: string;\n    referrer: string;\n  };\n  reported_url?: string;\n  attachments?: string[];\n  reproduction_steps?: string;\n}\n\nexport interface StatisticsData {\n  totalTickets: number;\n  openTickets: number;\n  closedTickets: number;\n  highPriorityTickets: number;\n  byStatus: { [key: string]: number };\n  byPriority: { [key: string]: number };\n}\n\ninterface TicketManagementProps {\n  supabase: any;\n  initialTickets?: Ticket[];\n  fetchTicketsQuery?: string;\n  title?: string;\n  description?: string;\n  onRefreshData?: () => Promise<void>;\n}\n\nconst TicketManagement: React.FC<TicketManagementProps> = ({\n  supabase,\n  initialTickets = [],\n  fetchTicketsQuery = \"title.ilike.%Beta%,description.ilike.%Beta%,title.ilike.%Testing%\",\n  title = \"Ticket Management\",\n  description = \"Manage tickets and issues\",\n  onRefreshData\n}) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [tickets, setTickets] = useState<Ticket[]>(initialTickets);\n  const [replyDialogOpen, setReplyDialogOpen] = useState(false);\n  const [activeTicketId, setActiveTicketId] = useState<string | null>(null);\n  const [replyMessage, setReplyMessage] = useState('');\n  const [showKanban, setShowKanban] = useState(true);\n  const [showGantt, setShowGantt] = useState(true);\n  const [ticketStats, setTicketStats] = useState<StatisticsData>({\n    totalTickets: 0,\n    openTickets: 0,\n    closedTickets: 0,\n    highPriorityTickets: 0,\n    byStatus: {},\n    byPriority: {}\n  });\n\n  useEffect(() => {\n    if (initialTickets.length === 0) {\n      fetchTickets();\n    } else {\n      setTickets(initialTickets);\n      calculateTicketStatistics(initialTickets);\n      setIsLoading(false);\n    }\n  }, [initialTickets]);\n\n  const fetchTickets = async () => {\n    try {\n      setIsLoading(true);\n      const { data, error } = await supabase\n        .from('tickets')\n        .select('*')\n        .or(fetchTicketsQuery)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        console.error(\"Error fetching tickets:\", error);\n        toast.error(\"Failed to load tickets\");\n        setIsLoading(false);\n        return;\n      }\n\n      const processedTickets: Ticket[] = await Promise.all(\n        data.map(async (ticket: any) => {\n          let reporterEmail = null;\n          \n          if (ticket.reporter) {\n            const { data: profileData } = await supabase\n              .from('profiles')\n              .select('email')\n              .eq('id', ticket.reporter)\n              .maybeSingle();\n              \n            reporterEmail = profileData?.email;\n          }\n          \n          return {\n            ...ticket,\n            reporter_email: reporterEmail,\n            expanded: false,\n            newNote: ''\n          };\n        })\n      );\n\n      setTickets(processedTickets);\n      calculateTicketStatistics(processedTickets);\n      setIsLoading(false);\n    } catch (err) {\n      console.error(\"Error in fetchTickets:\", err);\n      toast.error(\"Failed to load tickets data\");\n      setIsLoading(false);\n    }\n  };\n\n  const calculateTicketStatistics = (tickets: Ticket[]) => {\n    const totalTickets = tickets.length;\n    const openTickets = tickets.filter(ticket => ticket.status !== 'done' && ticket.status !== 'closed').length;\n    const closedTickets = totalTickets - openTickets;\n    const highPriorityTickets = tickets.filter(ticket => ticket.priority === 'high').length;\n\n    const byStatus: { [key: string]: number } = {};\n    const byPriority: { [key: string]: number } = {};\n\n    tickets.forEach(ticket => {\n      byStatus[ticket.status] = (byStatus[ticket.status] || 0) + 1;\n      byPriority[ticket.priority] = (byPriority[ticket.priority] || 0) + 1;\n    });\n\n    setTicketStats({\n      totalTickets,\n      openTickets,\n      closedTickets,\n      highPriorityTickets,\n      byStatus,\n      byPriority,\n    });\n  };\n\n  const handleAddTicketNote = async (ticketId: string, note: string) => {\n    if (!note.trim()) return;\n    \n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      \n      if (!user) {\n        toast.error(\"You must be logged in to add notes\");\n        return;\n      }\n      \n      const { data: userData } = await supabase\n        .from('profiles')\n        .select('email, first_name, last_name')\n        .eq('id', user.id)\n        .single();\n        \n      const userName = userData?.first_name \n        ? `${userData.first_name} ${userData.last_name || ''}`\n        : userData?.email || user.email || 'Unknown User';\n      \n      const { data: ticketData, error: fetchError } = await supabase\n        .from('tickets')\n        .select('notes')\n        .eq('id', ticketId)\n        .single();\n        \n      if (fetchError) {\n        console.error(\"Error fetching ticket:\", fetchError);\n        toast.error(\"Failed to add note\");\n        return;\n      }\n      \n      let notes = ticketData.notes || [];\n      \n      notes.push({\n        action: 'Note added',\n        user: userName,\n        timestamp: new Date().toISOString(),\n        comment: note\n      });\n      \n      const { error: updateError } = await supabase\n        .from('tickets')\n        .update({\n          notes: notes,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', ticketId);\n        \n      if (updateError) {\n        console.error(\"Error updating ticket:\", updateError);\n        toast.error(\"Failed to add note\");\n        return;\n      }\n      \n      setTickets(prev => prev.map(t => \n        t.id === ticketId ? {...t, newNote: ''} : t\n      ));\n      \n      await fetchTickets();\n      toast.success(\"Note added successfully\");\n      \n    } catch (err) {\n      console.error(\"Error in handleAddTicketNote:\", err);\n      toast.error(\"Failed to add note\");\n    }\n  };\n\n  const handleUpdateTicketStatus = async (ticketId: string, newStatus: string) => {\n    try {\n      const { error } = await supabase\n        .from('tickets')\n        .update({ status: newStatus })\n        .eq('id', ticketId);\n\n      if (error) {\n        console.error(\"Error updating ticket status:\", error);\n        toast.error(\"Failed to update ticket status\");\n        return;\n      }\n\n      setTickets(prev => prev.map(ticket =>\n        ticket.id === ticketId ? { ...ticket, status: newStatus } : ticket\n      ));\n      calculateTicketStatistics(tickets.map(ticket =>\n        ticket.id === ticketId ? { ...ticket, status: newStatus } : ticket\n      ));\n      toast.success(\"Ticket status updated successfully\");\n    } catch (error) {\n      console.error(\"Error updating ticket status:\", error);\n      toast.error(\"Failed to update ticket status\");\n    }\n  };\n\n  const handleUpdateTicketPriority = async (ticketId: string, newPriority: string) => {\n    try {\n      const { error } = await supabase\n        .from('tickets')\n        .update({ priority: newPriority })\n        .eq('id', ticketId);\n\n      if (error) {\n        console.error(\"Error updating ticket priority:\", error);\n        toast.error(\"Failed to update ticket priority\");\n        return;\n      }\n\n      setTickets(prev => prev.map(ticket =>\n        ticket.id === ticketId ? { ...ticket, priority: newPriority } : ticket\n      ));\n      calculateTicketStatistics(tickets.map(ticket =>\n        ticket.id === ticketId ? { ...ticket, priority: newPriority } : ticket\n      ));\n      toast.success(\"Ticket priority updated successfully\");\n    } catch (error) {\n      console.error(\"Error updating ticket priority:\", error);\n      toast.error(\"Failed to update ticket priority\");\n    }\n  };\n\n  const handleSetDueDate = async (ticketId: string, newDueDate: string) => {\n    try {\n      const { error } = await supabase\n        .from('tickets')\n        .update({ due_date: newDueDate })\n        .eq('id', ticketId);\n\n      if (error) {\n        console.error(\"Error setting due date:\", error);\n        toast.error(\"Failed to set due date\");\n        return;\n      }\n\n      setTickets(prev => prev.map(ticket =>\n        ticket.id === ticketId ? { ...ticket, due_date: newDueDate } : ticket\n      ));\n      toast.success(\"Due date updated successfully\");\n    } catch (error) {\n      console.error(\"Error setting due date:\", error);\n      toast.error(\"Failed to set due date\");\n    }\n  };\n\n  const handleReplyToReporter = (ticketId: string) => {\n    setActiveTicketId(ticketId);\n    setReplyDialogOpen(true);\n  };\n\n  const sendReplyToReporter = async () => {\n    if (!activeTicketId || !replyMessage.trim()) return;\n    \n    try {\n      const ticket = tickets.find(t => t.id === activeTicketId);\n      if (!ticket || !ticket.reporter) {\n        toast.error(\"Cannot find reporter information\");\n        return;\n      }\n      \n      const { data: { user } } = await supabase.auth.getUser();\n      \n      if (!user) {\n        toast.error(\"You must be logged in to reply\");\n        return;\n      }\n      \n      const { data: userData } = await supabase\n        .from('profiles')\n        .select('email, first_name, last_name')\n        .eq('id', user.id)\n        .single();\n        \n      const userName = userData?.first_name \n        ? `${userData.first_name} ${userData.last_name || ''}`\n        : userData?.email || user.email || 'Unknown User';\n      \n      // Create the user_messages table if it doesn't exist\n      const { error: tableCheckError } = await supabase\n        .from('user_messages')\n        .select('id', { count: 'exact', head: true });\n      \n      if (tableCheckError) {\n        // Create the user_messages table if it doesn't exist\n        const { error: createTableError } = await supabase.rpc('create_messages_table_if_not_exists');\n        if (createTableError) {\n          console.error(\"Error creating messages table:\", createTableError);\n          toast.error(\"Failed to send reply: messaging system not available\");\n          return;\n        }\n      }\n      \n      // Send a message to the reporter\n      const { error: messageError } = await supabase\n        .from('user_messages')\n        .insert({\n          sender_id: user.id,\n          recipient_id: ticket.reporter,\n          subject: `Re: ${ticket.title}`,\n          message: replyMessage,\n          related_ticket: activeTicketId,\n          read: false\n        });\n        \n      if (messageError) {\n        console.error(\"Error sending message:\", messageError);\n        toast.error(\"Failed to send reply to user dashboard, but message recorded in ticket notes\");\n      } else {\n        toast.success(\"Reply sent to reporter's dashboard\");\n      }\n      \n      // Also update the ticket notes for history tracking\n      const { data: ticketData, error: fetchError } = await supabase\n        .from('tickets')\n        .select('notes')\n        .eq('id', activeTicketId)\n        .single();\n        \n      if (fetchError) {\n        console.error(\"Error fetching ticket:\", fetchError);\n        toast.error(\"Failed to update ticket notes\");\n        return;\n      }\n      \n      let notes = ticketData.notes || [];\n      \n      notes.push({\n        action: 'Reply sent to reporter',\n        user: userName,\n        timestamp: new Date().toISOString(),\n        comment: replyMessage\n      });\n      \n      const { error: updateError } = await supabase\n        .from('tickets')\n        .update({\n          notes: notes,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', activeTicketId);\n        \n      if (updateError) {\n        console.error(\"Error updating ticket notes:\", updateError);\n        toast.error(\"Failed to record reply in ticket history\");\n        return;\n      }\n      \n      setReplyDialogOpen(false);\n      setActiveTicketId(null);\n      setReplyMessage('');\n      await fetchTickets();\n      toast.success(\"Reply recorded in ticket history\");\n      \n    } catch (err) {\n      console.error(\"Error in sendReplyToReporter:\", err);\n      toast.error(\"Failed to send reply\");\n    }\n  };\n\n  const handleRefreshData = async () => {\n    setIsLoading(true);\n    if (onRefreshData) {\n      await onRefreshData();\n    } else {\n      await fetchTickets();\n    }\n    setIsLoading(false);\n  };\n\n  const toggleTicketExpanded = (ticketId: string) => {\n    setTickets(prev => prev.map(ticket =>\n      ticket.id === ticketId ? { ...ticket, expanded: !ticket.expanded } : ticket\n    ));\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  return (\n    <Card className=\"mb-6\">\n      <CardHeader>\n        <div className=\"flex justify-between items-center\">\n          <CardTitle>{title}</CardTitle>\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setShowKanban(!showKanban)}\n            >\n              {showKanban ? \"Hide\" : \"Show\"} Kanban Board\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setShowGantt(!showGantt)}\n            >\n              {showGantt ? \"Hide\" : \"Show\"} Gantt Chart\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleRefreshData}\n              disabled={isLoading}\n            >\n              {isLoading ? \"Refreshing...\" : \"Refresh\"}\n            </Button>\n          </div>\n        </div>\n        <CardDescription>{description}</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <TicketStatistics stats={ticketStats} isLoading={isLoading} />\n        \n        {showKanban && (\n          <div className=\"mb-8\">\n            <h3 className=\"text-lg font-medium mb-4\">Ticket Board</h3>\n            <div className=\"border rounded-lg overflow-hidden\">\n              <TicketKanbanBoard \n                tickets={tickets} \n                onStatusUpdate={handleUpdateTicketStatus} \n                onToggleExpand={toggleTicketExpanded}\n                formatDate={formatDate}\n              />\n            </div>\n          </div>\n        )}\n        \n        {showGantt && (\n          <div className=\"mb-8\">\n            <h3 className=\"text-lg font-medium mb-4\">Timeline</h3>\n            <div className=\"border rounded-lg overflow-hidden p-4\">\n              <TicketGanttChart tickets={tickets} />\n            </div>\n          </div>\n        )}\n        \n        <div>\n          <h3 className=\"text-lg font-medium mb-4\">All Tickets</h3>\n          <Table className=\"w-full\">\n            <TableHeader>\n              <TableRow>\n                <TableHead className=\"w-[250px]\">Title</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Priority</TableHead>\n                <TableHead>Created</TableHead>\n                <TableHead>Due Date</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {tickets.map(ticket => (\n                <React.Fragment key={ticket.id}>\n                  <TableRow className=\"group\">\n                    <TableCell className=\"font-medium\">{ticket.title}</TableCell>\n                    <TableCell>\n                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                        ticket.status === 'new' ? 'bg-blue-100 text-blue-800' :\n                        ticket.status === 'in-progress' ? 'bg-purple-100 text-purple-800' :\n                        ticket.status === 'blocked' ? 'bg-red-100 text-red-800' :\n                        ticket.status === 'review' ? 'bg-yellow-100 text-yellow-800' :\n                        ticket.status === 'done' ? 'bg-green-100 text-green-800' :\n                        'bg-gray-100 text-gray-800'\n                      }`}>\n                        {ticket.status}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                        ticket.priority === 'high' ? 'bg-red-100 text-red-800' :\n                        ticket.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :\n                        'bg-green-100 text-green-800'\n                      }`}>\n                        {ticket.priority}\n                      </span>\n                    </TableCell>\n                    <TableCell>{formatDate(ticket.created_at)}</TableCell>\n                    <TableCell>{ticket.due_date ? formatDate(ticket.due_date) : '-'}</TableCell>\n                    <TableCell className=\"text-right\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => toggleTicketExpanded(ticket.id)}\n                      >\n                        {ticket.expanded ? 'Collapse' : 'Expand'}\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                  {ticket.expanded && (\n                    <TableRow>\n                      <TableCell colSpan={6} className=\"p-0 border-t-0\">\n                        <ExpandedTicketDetails \n                          ticket={ticket}\n                          onAddNote={handleAddTicketNote}\n                          onUpdateStatus={handleUpdateTicketStatus}\n                          onUpdatePriority={handleUpdateTicketPriority}\n                          onSetDueDate={handleSetDueDate}\n                          onReplyToReporter={handleReplyToReporter}\n                          formatDate={formatDate}\n                        />\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </React.Fragment>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n      </CardContent>\n\n      <Dialog open={replyDialogOpen} onOpenChange={setReplyDialogOpen}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Reply to Reporter</DialogTitle>\n            <DialogDescription>\n              Your message will be sent to the user who reported this issue.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <Textarea\n              placeholder=\"Write your reply here...\"\n              value={replyMessage}\n              onChange={(e) => setReplyMessage(e.target.value)}\n              className=\"min-h-[150px]\"\n            />\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setReplyDialogOpen(false)}>Cancel</Button>\n            <Button onClick={sendReplyToReporter}>Send Reply</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </Card>\n  );\n};\n\ninterface ExpandedTicketDetailsProps {\n  ticket: Ticket;\n  onAddNote: (ticketId: string, note: string) => Promise<void>;\n  onUpdateStatus: (ticketId: string, newStatus: string) => Promise<void>;\n  onUpdatePriority: (ticketId: string, newPriority: string) => Promise<void>;\n  onSetDueDate: (ticketId: string, newDueDate: string) => Promise<void>;\n  onReplyToReporter: (ticketId: string) => void;\n  formatDate: (dateString: string) => string;\n}\n\nexport const ExpandedTicketDetails: React.FC<ExpandedTicketDetailsProps> = ({\n  ticket,\n  onAddNote,\n  onUpdateStatus,\n  onUpdatePriority,\n  onSetDueDate,\n  onReplyToReporter,\n  formatDate\n}) => {\n  return (\n    <div className=\"p-4 border-t\">\n      <div className=\"grid md:grid-cols-2 gap-4 mb-4\">\n        <div>\n          <p className=\"text-sm text-gray-600 mb-2\">{ticket.description}</p>\n          \n          <div className=\"grid grid-cols-2 gap-2 text-sm\">\n            <div>\n              <span className=\"text-gray-500\">Created: </span>\n              {formatDate(ticket.created_at)}\n            </div>\n            {ticket.due_date && (\n              <div>\n                <span className=\"text-gray-500\">Due: </span>\n                {formatDate(ticket.due_date)}\n              </div>\n            )}\n            {ticket.reporter_email && (\n              <div>\n                <span className=\"text-gray-500\">Reporter: </span>\n                {ticket.reporter_email}\n              </div>\n            )}\n            {ticket.reported_url && (\n              <div>\n                <span className=\"text-gray-500\">URL: </span>\n                <span className=\"text-blue-500 underline\">{ticket.reported_url}</span>\n              </div>\n            )}\n          </div>\n          \n          {ticket.system_info && (\n            <div className=\"mt-3 p-2 bg-gray-50 rounded text-xs\">\n              <p className=\"font-medium mb-1\">System Info:</p>\n              <div className=\"grid grid-cols-2 gap-1\">\n                <div><span className=\"text-gray-500\">Browser: </span>{ticket.system_info.userAgent}</div>\n                <div><span className=\"text-gray-500\">Screen: </span>{ticket.system_info.viewportSize}</div>\n                <div><span className=\"text-gray-500\">Time: </span>{new Date(ticket.system_info.timestamp).toLocaleString()}</div>\n                <div><span className=\"text-gray-500\">Referrer: </span>{ticket.system_info.referrer}</div>\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {ticket.attachments && ticket.attachments.length > 0 && (\n          <div>\n            <p className=\"text-sm font-medium mb-2\">Screenshots ({ticket.attachments.length})</p>\n            <div className=\"grid grid-cols-2 gap-2\">\n              {ticket.attachments.map((url, i) => (\n                <div key={i} className=\"relative group border rounded overflow-hidden h-36\">\n                  <img \n                    src={url} \n                    alt={`Screenshot ${i+1}`} \n                    className=\"w-full h-full object-cover\"\n                  />\n                  <div className=\"absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 flex items-center justify-center transition-opacity\">\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\" \n                      className=\"text-white\"\n                      onClick={() => window.open(url, '_blank')}\n                    >\n                      View Full\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n      \n      <div className=\"mb-4\">\n        <h4 className=\"text-sm font-medium mb-2\">Activity Timeline</h4>\n        <div className=\"space-y-2 text-sm pl-4 border-l-2 border-gray-200\">\n          {ticket.notes ? (\n            ticket.notes.map((activity, index) => (\n              <div key={index} className=\"relative pl-4 pb-2\">\n                <div className=\"absolute w-2 h-2 rounded-full bg-blue-500 -left-[5px]\"></div>\n                <p className=\"font-medium\">{activity.action}</p>\n                <p className=\"text-xs text-gray-500\">\n                  {new Date(activity.timestamp).toLocaleString()} by {activity.user}\n                </p>\n                {activity.comment && (\n                  <p className=\"mt-1 bg-gray-50 p-2 rounded border border-gray-100\">\n                    {activity.comment}\n                  </p>\n                )}\n              </div>\n            ))\n          ) : (\n            <p className=\"text-gray-500 italic\">No activity recorded yet</p>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"border-t pt-4 flex flex-wrap gap-4\">\n        <div>\n          <Label htmlFor={`status-${ticket.id}`} className=\"text-xs block mb-1\">Update Status</Label>\n          <Select\n            defaultValue={ticket.status}\n            onValueChange={(value) => onUpdateStatus(ticket.id, value)}\n          >\n            <SelectTrigger id={`status-${ticket.id}`} className=\"w-[140px]\">\n              <SelectValue placeholder=\"Status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"new\">New</SelectItem>\n              <SelectItem value=\"in-progress\">In Progress</SelectItem>\n              <SelectItem value=\"blocked\">Blocked</SelectItem>\n              <SelectItem value=\"review\">Review</SelectItem>\n              <SelectItem value=\"done\">Done</SelectItem>\n              <SelectItem value=\"closed\">Closed</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        \n        <div>\n          <Label htmlFor={`priority-${ticket.id}`} className=\"text-xs block mb-1\">Update Priority</Label>\n          <Select\n            defaultValue={ticket.priority}\n            onValueChange={(value) => onUpdatePriority(ticket.id, value)}\n          >\n            <SelectTrigger id={`priority-${ticket.id}`} className=\"w-[140px]\">\n              <SelectValue placeholder=\"Priority\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"low\">Low</SelectItem>\n              <SelectItem value=\"medium\">Medium</SelectItem>\n              <SelectItem value=\"high\">High</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        \n        <div>\n          <Label htmlFor={`due-date-${ticket.id}`} className=\"text-xs block mb-1\">Set Due Date</Label>\n          <Input\n            id={`due-date-${ticket.id}`}\n            type=\"date\"\n            className=\"w-[180px]\"\n            value={ticket.due_date ? new Date(ticket.due_date).toISOString().split('T')[0] : ''}\n            onChange={(e) => onSetDueDate(ticket.id, e.target.value)}\n          />\n        </div>\n        \n        {ticket.reporter && (\n          <div className=\"ml-auto\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => onReplyToReporter(ticket.id)}\n            >\n              Reply to Reporter\n            </Button>\n          </div>\n        )}\n      </div>\n      \n      <div className=\"mt-4 border-t pt-4\">\n        <Label htmlFor={`note-${ticket.id}`} className=\"text-sm font-medium mb-1 block\">Add Note</Label>\n        <div className=\"flex gap-2\">\n          <Textarea \n            id={`note-${ticket.id}`}\n            placeholder=\"Add a note about this ticket...\"\n            className=\"min-h-[80px]\"\n            value={ticket.newNote || ''}\n            onChange={(e) => {\n              // This is handled internally in the parent component\n            }}\n          />\n          <Button \n            className=\"self-end\" \n            onClick={() => onAddNote(ticket.id, ticket.newNote || '')}\n          >\n            Add Note\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TicketManagement;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/TicketService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1742,1745],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1742,1745],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4400,4403],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4400,4403],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":154,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4913,4916],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4913,4916],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { supabase } from \"@/lib/supabase\";\nimport { Ticket } from \"@/types/types\";\nimport { toast } from \"sonner\";\n\nexport class TicketService {\n  // Method to check if a ticket can be deleted\n  static async canDeleteTicket(ticketId: string): Promise<boolean> {\n    try {\n      // Check for time entries\n      const { data: timeEntries, error: timeError } = await supabase\n        .from(\"time_entries\")\n        .select(\"id\")\n        .eq(\"ticket_id\", ticketId)\n        .limit(1);\n\n      if (timeError) {\n        throw timeError;\n      }\n\n      // If there are any time entries, ticket cannot be deleted\n      if (timeEntries && timeEntries.length > 0) {\n        return false;\n      }\n\n      // Check ticket completion percentage\n      const { data: ticket, error: ticketError } = await supabase\n        .from(\"tickets\")\n        .select(\"completion_percentage, job_app_id\")\n        .eq(\"id\", ticketId)\n        .single();\n\n      if (ticketError) {\n        throw ticketError;\n      }\n\n      // If completion percentage is greater than 0, ticket cannot be deleted\n      if (ticket && ticket.completion_percentage > 0) {\n        return false;\n      }\n\n      // Check for related documents\n      if (ticket?.job_app_id) {\n        const { data: documents, error: docError } = await supabase\n          .from(\"legal_documents\")\n          .select(\"id\")\n          .eq(\"job_application_id\", ticket.job_app_id)\n          .limit(1);\n        \n        if (docError) {\n          console.error(\"Error checking for related documents:\", docError);\n        } else if (documents && documents.length > 0) {\n          // If there are related legal documents, ticket cannot be deleted\n          return false;\n        }\n      }\n\n      return true;\n    } catch (error: any) {\n      console.error(\"Error checking if ticket can be deleted:\", error);\n      return false;\n    }\n  }\n\n  // Method to delete a ticket\n  static async deleteTicket(ticketId: string, userId: string): Promise<boolean> {\n    try {\n      // First check if the ticket can be deleted\n      const canDelete = await this.canDeleteTicket(ticketId);\n      if (!canDelete) {\n        // Check specifically what prevents deletion to give a more specific error message\n        // Check for time entries\n        const { data: timeEntries, error: timeError } = await supabase\n          .from(\"time_entries\")\n          .select(\"id\")\n          .eq(\"ticket_id\", ticketId)\n          .limit(1);\n\n        if (timeEntries && timeEntries.length > 0) {\n          throw new Error(\"Cannot delete ticket with logged time entries\");\n        }\n\n        // Check ticket completion percentage\n        const { data: ticket, error: ticketError } = await supabase\n          .from(\"tickets\")\n          .select(\"completion_percentage, job_app_id\")\n          .eq(\"id\", ticketId)\n          .single();\n\n        if (ticket && ticket.completion_percentage > 0) {\n          throw new Error(\"Cannot delete ticket with completion progress\");\n        }\n        \n        // Check for related documents\n        if (ticket?.job_app_id) {\n          const { data: documents } = await supabase\n            .from(\"legal_documents\")\n            .select(\"id\")\n            .eq(\"job_application_id\", ticket.job_app_id)\n            .limit(1);\n            \n          if (documents && documents.length > 0) {\n            throw new Error(\"Cannot delete ticket with associated legal documents\");\n          }\n        }\n\n        // Generic fallback error\n        throw new Error(\"This ticket cannot be deleted\");\n      }\n\n      // Use the database function for soft deletion\n      const { data, error } = await supabase.rpc(\"soft_delete_ticket\", {\n        ticket_id: ticketId,\n        user_id: userId,\n      });\n\n      if (error) {\n        console.error(\"Error in soft_delete_ticket:\", error);\n        // Create a user-friendly error message\n        let errorMessage = \"Failed to delete ticket\";\n        if (error.message.includes(\"time entries\")) {\n          errorMessage = \"Cannot delete ticket with logged time entries\";\n        } else if (error.message.includes(\"completion progress\")) {\n          errorMessage = \"Cannot delete ticket with completion progress\";\n        } else if (error.message.includes(\"legal documents\")) {\n          errorMessage = \"Cannot delete ticket with associated legal documents\";\n        }\n        \n        throw new Error(errorMessage);\n      }\n\n      return true;\n    } catch (error: any) {\n      console.error(\"Error deleting ticket:\", error);\n      // Don't show toast here, let the calling component handle it\n      throw error;\n    }\n  }\n\n  // Method to get a single ticket by ID\n  static async getTicketById(ticketId: string): Promise<Ticket> {\n    try {\n      const { data, error } = await supabase\n        .from(\"tickets\")\n        .select(\"*\")\n        .eq(\"id\", ticketId)\n        .single();\n\n      if (error) {\n        throw error;\n      }\n\n      return data as Ticket;\n    } catch (error: any) {\n      console.error(\"Error fetching ticket:\", error);\n      toast.error(\"Failed to fetch ticket details\");\n      throw error;\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/TicketStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/details/DeleteTicketDialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[813,816],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[813,816],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from \"react\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\ninterface DeleteTicketDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onConfirm: () => Promise<void>;\n  isDeleting?: boolean;\n  ticketTitle: string;\n  errorMessage?: string;\n}\n\nexport const DeleteTicketDialog: React.FC<DeleteTicketDialogProps> = ({\n  open,\n  onOpenChange,\n  onConfirm,\n  isDeleting = false,\n  ticketTitle,\n  errorMessage,\n}) => {\n  const handleConfirm = async (e: React.MouseEvent) => {\n    e.preventDefault();\n    try {\n      await onConfirm();\n      // The parent component will handle the success toast\n    } catch (error: any) {\n      // Don't display a toast here, as the parent component already handles error notifications\n      // This prevents duplicate toast messages\n      console.error(\"Error in DeleteTicketDialog:\", error);\n      // Keep the dialog open if there was an error\n      return;\n    }\n  };\n\n  return (\n    <AlertDialog open={open} onOpenChange={onOpenChange}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n          <AlertDialogDescription>\n            You are about to delete ticket: <strong>{ticketTitle}</strong>\n            <br />\n            This action cannot be undone. The ticket will be archived and removed from view.\n            <br /><br />\n            <strong>Note:</strong> Tickets with time entries, completion progress, or associated legal documents cannot be deleted.\n            \n            {errorMessage && (\n              <div className=\"mt-2 p-2 bg-red-100 border border-red-200 rounded text-red-800\">\n                {errorMessage}\n              </div>\n            )}\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel disabled={isDeleting}>Cancel</AlertDialogCancel>\n          <AlertDialogAction\n            onClick={handleConfirm}\n            disabled={isDeleting}\n            className=\"bg-red-500 hover:bg-red-600 focus:ring-red-500\"\n          >\n            {isDeleting ? \"Deleting...\" : \"Delete\"}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/details/TicketActivityTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[402,405],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[402,405],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Send } from \"lucide-react\";\nimport { Ticket } from \"@/types/types\";\nimport { formatDateTime } from \"../utils/dateFormatters\";\n\ninterface TicketActivityTabProps {\n  ticket: Ticket;\n  onTicketAction: (ticketId: string, action: string, data: any) => Promise<void>;\n  onDataChanged?: () => void; // Add callback for parent notification\n}\n\nexport const TicketActivityTab: React.FC<TicketActivityTabProps> = ({\n  ticket,\n  onTicketAction,\n  onDataChanged\n}) => {\n  const [activityComment, setActivityComment] = useState(\"\");\n  const [isSubmittingComment, setIsSubmittingComment] = useState(false);\n  \n  // Create a unique key that changes whenever notes change\n  const notesKey = Array.isArray(ticket.notes) \n    ? ticket.notes.map(note => `${note.timestamp}-${note.comment}`).join('|')\n    : 'no-notes';\n\n  const handleAddActivityComment = async () => {\n    if (!activityComment.trim()) return;\n    \n    setIsSubmittingComment(true);\n    try {\n      await onTicketAction(ticket.id, \"addComment\", activityComment);\n      setActivityComment(\"\");\n      // Notify parent component about the data change\n      if (onDataChanged) {\n        onDataChanged();\n      }\n    } finally {\n      setIsSubmittingComment(false);\n    }\n  };\n\n  // Handle key press (Enter) to submit\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleAddActivityComment();\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\" key={notesKey}>\n      <div className=\"bg-gray-50 p-4 rounded-md border mb-4\">\n        <p className=\"text-sm text-gray-500\">\n          The activity log shows all actions taken on this ticket.\n        </p>\n      </div>\n      \n      <div className=\"border rounded-md p-2 max-h-[300px] overflow-y-auto space-y-3\">\n        {Array.isArray(ticket.notes) && ticket.notes.length > 0 ? (\n          ticket.notes.map((note, index) => (\n            <div key={`${note.timestamp}-${index}`} className=\"p-3 bg-white border rounded-md shadow-sm\">\n              <div className=\"flex justify-between items-center mb-1\">\n                <span className=\"font-medium text-sm\">{note.user}</span>\n                <span className=\"text-xs text-gray-500\">\n                  {formatDateTime(note.timestamp)}\n                </span>\n              </div>\n              <p className=\"text-sm whitespace-pre-wrap\">\n                {note.action ? (\n                  <span className=\"font-medium\">{note.action}: </span>\n                ) : null}\n                {note.comment || note.content}\n              </p>\n            </div>\n          ))\n        ) : (\n          <div className=\"p-4 text-center text-gray-500\">\n            No activity yet.\n          </div>\n        )}\n      </div>\n      \n      <div className=\"flex items-end gap-2 mt-4\">\n        <div className=\"flex-1\">\n          <Textarea\n            placeholder=\"Add a comment to the activity log...\"\n            value={activityComment}\n            onChange={(e) => setActivityComment(e.target.value)}\n            onKeyDown={handleKeyPress}\n            className=\"min-h-[80px] resize-none\"\n          />\n        </div>\n        <Button \n          onClick={handleAddActivityComment}\n          disabled={!activityComment.trim() || isSubmittingComment}\n          size=\"sm\"\n          className=\"h-10\"\n        >\n          <Send className=\"h-4 w-4 mr-2\" />\n          Add\n        </Button>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/details/TicketCompletion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/details/TicketConversationTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[406,409],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[406,409],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Send } from \"lucide-react\";\nimport { Ticket } from \"@/types/types\";\nimport { formatDateTime } from \"../utils/dateFormatters\";\n\ninterface TicketConversationTabProps {\n  ticket: Ticket;\n  onTicketAction: (ticketId: string, action: string, data: any) => Promise<void>;\n  onDataChanged?: () => void; // Add callback for parent notification\n}\n\nexport const TicketConversationTab: React.FC<TicketConversationTabProps> = ({\n  ticket,\n  onTicketAction,\n  onDataChanged\n}) => {\n  const [conversationMessage, setConversationMessage] = useState(\"\");\n  const [isSubmittingComment, setIsSubmittingComment] = useState(false);\n  \n  // Create a unique key that changes whenever replies change\n  const repliesKey = Array.isArray(ticket.replies) \n    ? ticket.replies.map(reply => `${reply.timestamp}-${reply.comment}`).join('|')\n    : 'no-replies';\n\n  const handleAddConversationMessage = async () => {\n    if (!conversationMessage.trim()) return;\n    \n    setIsSubmittingComment(true);\n    try {\n      await onTicketAction(ticket.id, \"addReply\", conversationMessage);\n      setConversationMessage(\"\");\n      // Notify parent component about the data change\n      if (onDataChanged) {\n        onDataChanged();\n      }\n    } finally {\n      setIsSubmittingComment(false);\n    }\n  };\n\n  // Handle key press (Enter) to submit\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleAddConversationMessage();\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\" key={repliesKey}>\n      <div className=\"bg-gray-50 p-4 rounded-md border mb-4\">\n        <p className=\"text-sm text-gray-500\">\n          Use this tab to communicate with others about this ticket.\n        </p>\n      </div>\n      \n      <div className=\"border rounded-md p-2 max-h-[300px] overflow-y-auto space-y-3\">\n        {Array.isArray(ticket.replies) && ticket.replies.length > 0 ? (\n          ticket.replies.map((reply, index) => (\n            <div key={`${reply.timestamp}-${index}`} className=\"p-3 bg-white border rounded-md shadow-sm\">\n              <div className=\"flex justify-between items-center mb-1\">\n                <span className=\"font-medium text-sm\">{reply.user}</span>\n                <span className=\"text-xs text-gray-500\">\n                  {formatDateTime(reply.timestamp)}\n                </span>\n              </div>\n              <p className=\"text-sm whitespace-pre-wrap\">{reply.comment}</p>\n            </div>\n          ))\n        ) : (\n          <div className=\"p-4 text-center text-gray-500\">\n            No conversation messages yet.\n          </div>\n        )}\n      </div>\n      \n      <div className=\"flex items-end gap-2 mt-4\">\n        <div className=\"flex-1\">\n          <Textarea\n            placeholder=\"Type your message here...\"\n            value={conversationMessage}\n            onChange={(e) => setConversationMessage(e.target.value)}\n            onKeyDown={handleKeyPress}\n            className=\"min-h-[80px] resize-none\"\n          />\n        </div>\n        <Button \n          onClick={handleAddConversationMessage}\n          disabled={!conversationMessage.trim() || isSubmittingComment}\n          size=\"sm\"\n          className=\"h-10\"\n        >\n          <Send className=\"h-4 w-4 mr-2\" />\n          Send\n        </Button>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/details/TicketDescription.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/details/TicketDetailsTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[713,716],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[713,716],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Clock } from \"lucide-react\";\nimport { Ticket } from \"@/types/types\";\nimport { TicketStatus } from \"./TicketStatus\";\nimport { TicketPriority } from \"./TicketPriority\";\nimport { TicketDueDate } from \"./TicketDueDate\";\nimport { TicketEstimatedHours } from \"./TicketEstimatedHours\";\nimport { TicketCompletion } from \"./TicketCompletion\";\nimport { TicketDescription } from \"./TicketDescription\";\nimport { toast } from \"sonner\"; // Assuming you're using the same toast as in ExpandedTicketDetails\n\ninterface TicketDetailsTabProps {\n  ticket: Ticket;\n  onTicketAction: (ticketId: string, action: string, data: any) => Promise<void>;\n  onLogTime?: (ticketId: string) => void;\n  userCanEditStatus?: boolean;\n  userCanEditDates?: boolean;\n}\n\nexport const TicketDetailsTab: React.FC<TicketDetailsTabProps> = ({\n  ticket,\n  onTicketAction,\n  onLogTime,\n  userCanEditStatus = true,\n  userCanEditDates = true\n}) => {\n  // Local state to immediately reflect changes in the UI\n  const [localTicket, setLocalTicket] = useState<Ticket>(ticket);\n  const [isUpdating, setIsUpdating] = useState<{\n    status: boolean;\n    priority: boolean;\n    dueDate: boolean;\n    estimatedHours: boolean;\n    completion: boolean;\n    description: boolean;\n  }>({\n    status: false,\n    priority: false,\n    dueDate: false,\n    estimatedHours: false,\n    completion: false,\n    description: false\n  });\n\n  // Update local state when ticket prop changes\n  useEffect(() => {\n    setLocalTicket(ticket);\n  }, [ticket]);\n\n  const handleStatusChange = async (value: string) => {\n    setIsUpdating(prev => ({ ...prev, status: true }));\n    // Update local state immediately for instant feedback\n    setLocalTicket(prev => ({ ...prev, status: value }));\n    \n    try {\n      await onTicketAction(ticket.id, \"updateStatus\", value);\n      toast.success(\"Status updated successfully\");\n    } catch (error) {\n      // Revert local state on error\n      setLocalTicket(prev => ({ ...prev, status: ticket.status }));\n      toast.error(\"Failed to update status\");\n      console.error(\"Error updating status:\", error);\n    } finally {\n      setIsUpdating(prev => ({ ...prev, status: false }));\n    }\n  };\n\n  const handlePriorityChange = async (value: string) => {\n    setIsUpdating(prev => ({ ...prev, priority: true }));\n    // Update local state immediately\n    setLocalTicket(prev => ({ ...prev, priority: value }));\n    \n    try {\n      await onTicketAction(ticket.id, \"updatePriority\", value);\n      toast.success(\"Priority updated successfully\");\n    } catch (error) {\n      // Revert local state on error\n      setLocalTicket(prev => ({ ...prev, priority: ticket.priority }));\n      toast.error(\"Failed to update priority\");\n      console.error(\"Error updating priority:\", error);\n    } finally {\n      setIsUpdating(prev => ({ ...prev, priority: false }));\n    }\n  };\n\n  const handleDueDateChange = async (selectedDate: Date | undefined) => {\n    setIsUpdating(prev => ({ ...prev, dueDate: true }));\n    const formattedDate = selectedDate ? selectedDate.toISOString().split('T')[0] : null;\n    \n    // Update local state immediately\n    setLocalTicket(prev => ({ ...prev, due_date: formattedDate }));\n    \n    try {\n      await onTicketAction(ticket.id, \"updateDueDate\", formattedDate);\n      toast.success(\"Due date updated successfully\");\n    } catch (error) {\n      // Revert local state on error\n      setLocalTicket(prev => ({ ...prev, due_date: ticket.due_date }));\n      toast.error(\"Failed to update due date\");\n      console.error(\"Error updating due date:\", error);\n    } finally {\n      setIsUpdating(prev => ({ ...prev, dueDate: false }));\n    }\n  };\n\n  const handleCompletionChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = Number(e.target.value);\n    setIsUpdating(prev => ({ ...prev, completion: true }));\n    \n    // Update local state immediately\n    setLocalTicket(prev => ({ ...prev, completion_percentage: value }));\n    \n    try {\n      await onTicketAction(ticket.id, \"updateCompletionPercentage\", value);\n      toast.success(\"Completion percentage updated successfully\");\n    } catch (error) {\n      // Revert local state on error\n      setLocalTicket(prev => ({ ...prev, completion_percentage: ticket.completion_percentage }));\n      toast.error(\"Failed to update completion percentage\");\n      console.error(\"Error updating completion percentage:\", error);\n    } finally {\n      setIsUpdating(prev => ({ ...prev, completion: false }));\n    }\n  };\n\n  const handleEstimatedHoursChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = Number(e.target.value);\n    setIsUpdating(prev => ({ ...prev, estimatedHours: true }));\n    \n    // Update local state immediately\n    setLocalTicket(prev => ({ ...prev, estimated_hours: value }));\n    \n    try {\n      await onTicketAction(ticket.id, \"updateEstimatedHours\", value);\n      toast.success(\"Estimated hours updated successfully\");\n    } catch (error) {\n      // Revert local state on error\n      setLocalTicket(prev => ({ ...prev, estimated_hours: ticket.estimated_hours }));\n      toast.error(\"Failed to update estimated hours\");\n      console.error(\"Error updating estimated hours:\", error);\n    } finally {\n      setIsUpdating(prev => ({ ...prev, estimatedHours: false }));\n    }\n  };\n\n  const handleDescriptionChange = async (value: string) => {\n    setIsUpdating(prev => ({ ...prev, description: true }));\n    \n    // Update local state immediately\n    setLocalTicket(prev => ({ ...prev, description: value }));\n    \n    try {\n      await onTicketAction(ticket.id, \"updateDescription\", value);\n      toast.success(\"Description updated successfully\");\n    } catch (error) {\n      // Revert local state on error\n      setLocalTicket(prev => ({ ...prev, description: ticket.description }));\n      toast.error(\"Failed to update description\");\n      console.error(\"Error updating description:\", error);\n    } finally {\n      setIsUpdating(prev => ({ ...prev, description: false }));\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <TicketStatus \n          status={localTicket.status} \n          disabled={!userCanEditStatus || isUpdating.status}\n          onChange={handleStatusChange}\n        />\n        <TicketPriority \n          priority={localTicket.priority} \n          disabled={!userCanEditStatus || isUpdating.priority}\n          onChange={handlePriorityChange}\n        />\n        <TicketDueDate \n          date={localTicket.due_date ? new Date(localTicket.due_date) : undefined}\n          disabled={!userCanEditDates || isUpdating.dueDate}\n          onChange={handleDueDateChange}\n        />\n        <TicketEstimatedHours \n          hours={localTicket.estimated_hours || 0}\n          disabled={!userCanEditDates || isUpdating.estimatedHours}\n          onChange={handleEstimatedHoursChange}\n        />\n        <TicketCompletion \n          percentage={localTicket.completion_percentage || 0}\n          disabled={!userCanEditStatus || isUpdating.completion}\n          onChange={handleCompletionChange}\n        />\n      </div>\n\n      <TicketDescription \n        description={localTicket.description} \n        disabled={isUpdating.description}\n        onSave={handleDescriptionChange}\n      />\n\n      {onLogTime && (\n        <div className=\"pt-4\">\n          <Button onClick={() => onLogTime(ticket.id)}>\n            <Clock className=\"h-4 w-4 mr-2\" /> Log Time\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/details/TicketDueDate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/details/TicketEstimatedHours.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/details/TicketPriority.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":23,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":23,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from \"react\";\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from \"@/components/ui/select\";\n\ninterface TicketPriorityProps {\n  priority: string;\n  disabled?: boolean;\n  onChange: (value: string) => void;\n}\n\nconst priorityOptions = [\n  { value: \"low\", label: \"Low\" },\n  { value: \"medium\", label: \"Medium\" },\n  { value: \"high\", label: \"High\" },\n];\n\nexport const getPriorityColor = (priority: string) => {\n  switch (priority) {\n    case \"low\":\n      return \"bg-blue-100 text-blue-800\";\n    case \"medium\":\n      return \"bg-yellow-100 text-yellow-800\";\n    case \"high\":\n      return \"bg-red-100 text-red-800\";\n    default:\n      return \"bg-gray-100 text-gray-800\";\n  }\n};\n\nexport const TicketPriority: React.FC<TicketPriorityProps> = ({ \n  priority, \n  disabled = false, \n  onChange \n}) => {\n  return (\n    <div>\n      <label className=\"block text-sm font-medium mb-1\">Priority</label>\n      <Select\n        value={priority}\n        disabled={disabled}\n        onValueChange={onChange}\n      >\n        <SelectTrigger className={getPriorityColor(priority)}>\n          <SelectValue />\n        </SelectTrigger>\n        <SelectContent>\n          {priorityOptions.map((option) => (\n            <SelectItem key={option.value} value={option.value}>\n              {option.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/details/TicketStatus.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":26,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":26,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from \"react\";\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from \"@/components/ui/select\";\n\ninterface TicketStatusProps {\n  status: string;\n  disabled?: boolean;\n  onChange: (value: string) => void;\n}\n\nconst statusOptions = [\n  { value: \"new\", label: \"New\" },\n  { value: \"in-progress\", label: \"In Progress\" },\n  { value: \"blocked\", label: \"Blocked\" },\n  { value: \"review\", label: \"Review\" },\n  { value: \"done\", label: \"Done\" },\n  { value: \"closed\", label: \"Closed\" },\n];\n\nexport const getStatusColor = (status: string) => {\n  switch (status) {\n    case \"new\":\n      return \"bg-blue-100 text-blue-800\";\n    case \"in-progress\":\n      return \"bg-yellow-100 text-yellow-800\";\n    case \"blocked\":\n      return \"bg-red-100 text-red-800\";\n    case \"review\":\n      return \"bg-purple-100 text-purple-800\";\n    case \"done\":\n      return \"bg-green-100 text-green-800\";\n    case \"closed\":\n      return \"bg-gray-100 text-gray-800\";\n    default:\n      return \"bg-gray-100 text-gray-800\";\n  }\n};\n\nexport const TicketStatus: React.FC<TicketStatusProps> = ({ \n  status, \n  disabled = false, \n  onChange \n}) => {\n  return (\n    <div>\n      <label className=\"block text-sm font-medium mb-1\">Status</label>\n      <Select\n        value={status}\n        disabled={disabled}\n        onValueChange={onChange}\n      >\n        <SelectTrigger className={getStatusColor(status)}>\n          <SelectValue />\n        </SelectTrigger>\n        <SelectContent>\n          {statusOptions.map((option) => (\n            <SelectItem key={option.value} value={option.value}>\n              {option.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/details/TicketTimeLogTab.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchTimeEntries'. Either include it or remove the dependency array.","line":77,"column":6,"nodeType":"ArrayExpression","endLine":77,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [fetchTimeEntries, ticketId]","fix":{"range":[2474,2484],"text":"[fetchTimeEntries, ticketId]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":201,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6474,6477],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6474,6477],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Clock, AlertCircle, Trash2 } from \"lucide-react\";\nimport { supabase } from \"@/lib/supabase\";\nimport { formatDate } from \"../utils/dateFormatters\";\nimport { toast } from \"sonner\";\n\ninterface TimeEntry {\n  id: string;\n  ticket_id: string;\n  hours_logged: number;\n  description?: string;\n  created_at: string;\n  user_id?: string;\n  profiles?: {\n    first_name?: string;\n    last_name?: string;\n    email?: string;\n    id?: string;\n    auth_id?: string;\n  };\n}\n\ninterface TicketTimeLogTabProps {\n  ticketId: string;\n  onLogTime?: (ticketId: string) => void;\n  onDataChanged?: () => void; // Callback for parent notification\n}\n\nexport const TicketTimeLogTab: React.FC<TicketTimeLogTabProps> = ({\n  ticketId,\n  onLogTime,\n  onDataChanged\n}) => {\n  const [timeEntries, setTimeEntries] = useState<TimeEntry[]>([]);\n  const [totalHoursLogged, setTotalHoursLogged] = useState<number>(0);\n  const [isLoadingTimeEntries, setIsLoadingTimeEntries] = useState(false);\n  const [timeEntriesError, setTimeEntriesError] = useState<string | null>(null);\n  const [currentUserId, setCurrentUserId] = useState<string | null>(null);\n  const [isDeletingEntry, setIsDeletingEntry] = useState<string | null>(null);\n  \n  // Create a unique key that captures both the ticket ID and the state of time entries\n  const entriesKey = timeEntries.map(entry => entry.id).join(',');\n  const ticketKey = `ticket-${ticketId}-${entriesKey}`;\n\n  useEffect(() => {\n    // Get current user ID\n    const getCurrentUser = async () => {\n      const { data: authData } = await supabase.auth.getUser();\n      if (authData?.user) {\n        console.log(\"Current auth user ID:\", authData.user.id);\n        \n        // Also check the profiles table to get any alternate user ID\n        const { data: profileData, error } = await supabase\n          .from('profiles')\n          .select('id')\n          .eq('auth_id', authData.user.id)\n          .single();\n          \n        if (error) {\n          console.error(\"Error fetching profile:\", error);\n          setCurrentUserId(authData.user.id);\n        } else if (profileData) {\n          console.log(\"Current profile ID:\", profileData.id);\n          setCurrentUserId(profileData.id);\n        } else {\n          setCurrentUserId(authData.user.id);\n        }\n      }\n    };\n    \n    getCurrentUser();\n    \n    if (ticketId) {\n      fetchTimeEntries(ticketId);\n    }\n  }, [ticketId]);\n\n  const fetchTimeEntries = async (ticketId: string) => {\n    setIsLoadingTimeEntries(true);\n    setTimeEntriesError(null);\n    try {\n      const { data, error } = await supabase\n        .from('time_entries')\n        .select('*')\n        .eq('ticket_id', ticketId)\n        .order('created_at', { ascending: false });\n        \n      if (error) throw error;\n      \n      // Log all user_ids to debug\n      console.log(\"Time entries user_ids:\", data?.map(entry => entry.user_id));\n      \n      const entriesWithUserDetails = await Promise.all((data || []).map(async (entry) => {\n        if (entry.user_id) {\n          const { data: profileData } = await supabase\n            .from('profiles')\n            .select('first_name, last_name, email, id, auth_id')\n            .eq('id', entry.user_id)\n            .single();\n            \n          return {\n            ...entry,\n            profiles: profileData\n          };\n        }\n        return entry;\n      }));\n      \n      setTimeEntries(entriesWithUserDetails);\n      \n      // Calculate and set total hours logged\n      const total = entriesWithUserDetails.reduce((sum, entry) => sum + (entry.hours_logged || 0), 0);\n      setTotalHoursLogged(total);\n      \n      // Update the ticket's hours_logged in the database\n      await updateTicketHoursLogged(ticketId, total);\n      \n      // Notify parent component that data has changed\n      if (onDataChanged) {\n        onDataChanged();\n      }\n    } catch (error) {\n      console.error('Error fetching time entries:', error);\n      setTimeEntriesError('Failed to load time entries. Please try again.');\n    } finally {\n      setIsLoadingTimeEntries(false);\n    }\n  };\n\n  // Update the ticket's hours_logged field in the database\n  const updateTicketHoursLogged = async (ticketId: string, hoursLogged: number) => {\n    try {\n      const { error } = await supabase\n        .from('tickets')\n        .update({ hours_logged: hoursLogged })\n        .eq('id', ticketId);\n        \n      if (error) throw error;\n    } catch (error) {\n      console.error('Error updating ticket hours logged:', error);\n    }\n  };\n\n  // Handle log time action\n  const handleLogTimeClick = () => {\n    if (onLogTime) {\n      onLogTime(ticketId);\n      // Fetch time entries again after a delay to ensure the new entry is included\n      setTimeout(() => fetchTimeEntries(ticketId), 1000);\n    }\n  };\n\n  // Handle delete time entry\n  const handleDeleteTimeEntry = async (entryId: string) => {\n    setIsDeletingEntry(entryId);\n    try {\n      // Get the entry first to confirm user_id matches\n      const { data: entryData, error: fetchError } = await supabase\n        .from('time_entries')\n        .select('user_id')\n        .eq('id', entryId)\n        .single();\n        \n      if (fetchError) throw fetchError;\n      \n      // Log for debugging\n      console.log(\"Entry to delete - user_id:\", entryData?.user_id);\n      console.log(\"Current user ID:\", currentUserId);\n      \n      // Check if user can delete this entry\n      // This is a backup check in addition to UI hiding - security best practice\n      if (entryData?.user_id !== currentUserId) {\n        throw new Error(\"You can only delete your own time entries\");\n      }\n      \n      const { error } = await supabase\n        .from('time_entries')\n        .delete()\n        .eq('id', entryId);\n        \n      if (error) throw error;\n      \n      // Remove the entry from local state\n      const updatedEntries = timeEntries.filter(entry => entry.id !== entryId);\n      setTimeEntries(updatedEntries);\n      \n      // Recalculate total hours\n      const newTotal = updatedEntries.reduce((sum, entry) => sum + (entry.hours_logged || 0), 0);\n      setTotalHoursLogged(newTotal);\n      \n      // Update ticket's total hours\n      await updateTicketHoursLogged(ticketId, newTotal);\n      \n      toast.success(\"Time entry deleted successfully\");\n      \n      // Notify parent component\n      if (onDataChanged) {\n        onDataChanged();\n      }\n    } catch (error: any) {\n      console.error('Error deleting time entry:', error);\n      toast.error(error?.message || \"Failed to delete time entry\");\n    } finally {\n      setIsDeletingEntry(null);\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\" key={ticketKey}>\n      <div className=\"bg-gray-50 p-4 rounded-md border mb-4\">\n        <p className=\"text-sm text-gray-500 mb-2\">\n          Time Log shows all time entries recorded for this ticket.\n        </p>\n        <p className=\"text-sm font-medium\">\n          Total Hours Logged: {totalHoursLogged.toFixed(2)} hours\n        </p>\n      </div>\n      \n      {isLoadingTimeEntries ? (\n        <div className=\"flex justify-center p-8\">\n          <p>Loading time entries...</p>\n        </div>\n      ) : timeEntriesError ? (\n        <div className=\"flex items-center justify-center p-8 bg-red-50 rounded-md border border-red-200\">\n          <AlertCircle className=\"h-6 w-6 text-red-500 mr-2\" />\n          <p className=\"text-red-700\">{timeEntriesError}</p>\n        </div>\n      ) : (\n        <div>\n          {timeEntries.length === 0 ? (\n            <div className=\"text-center text-gray-500 py-8 border rounded-md\">\n              <p>No time entries found for this ticket.</p>\n            </div>\n          ) : (\n            <div className=\"border rounded-md overflow-hidden\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      User\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Hours\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Date\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Description\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Actions\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {timeEntries.map((entry) => (\n                    <tr key={entry.id}>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                        {entry.profiles ? \n                          `${entry.profiles.first_name || ''} ${entry.profiles.last_name || ''}`.trim() || entry.profiles.email : \n                          'Unknown user'}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                        {entry.hours_logged.toFixed(2)} hrs\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                        {formatDate(entry.created_at)}\n                      </td>\n                      <td className=\"px-6 py-4 text-sm\">\n                        {entry.description || 'No description'}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                        {/* \n                          Add debugging info in a comment \n                          entry.user_id: {entry.user_id} \n                          currentUserId: {currentUserId}\n                        */}\n                        <div className=\"flex items-center justify-start gap-1\">\n                          {/* Show delete button either if the IDs match exactly OR user_id is in profiles.id OR profiles.auth_id */}\n                          {(currentUserId === entry.user_id || \n                            entry.profiles?.id === currentUserId || \n                            entry.profiles?.auth_id === currentUserId) && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDeleteTimeEntry(entry.id)}\n                              disabled={isDeletingEntry === entry.id}\n                              className=\"text-red-500 hover:text-red-700 hover:bg-red-50\"\n                              title=\"Delete this time entry\"\n                            >\n                              {isDeletingEntry === entry.id ? \n                                <span className=\"text-xs\">Deleting...</span> : \n                                <Trash2 className=\"h-4 w-4\" />\n                              }\n                            </Button>\n                          )}\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n          \n          {onLogTime && (\n            <div className=\"mt-4 flex gap-2\">\n              <Button onClick={handleLogTimeClick}>\n                <Clock className=\"h-4 w-4 mr-2\" /> Log Time\n              </Button>\n              {process.env.NODE_ENV === 'development' && (\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={() => {\n                    console.log({\n                      currentUserId,\n                      timeEntries: timeEntries.map(entry => ({\n                        id: entry.id,\n                        user_id: entry.user_id,\n                        profile: entry.profiles ? {\n                          id: entry.profiles.id,\n                          auth_id: entry.profiles.auth_id\n                        } : null\n                      }))\n                    });\n                    toast.info(\"User ID debug info logged to console\");\n                  }}\n                >\n                  Debug User IDs\n                </Button>\n              )}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/dialogs/DeleteTicketDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/dialogs/TicketDetailDialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[389,392],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[389,392],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Ticket } from \"@/types/types\";\nimport { ExpandedTicketDetails } from \"../ExpandedTicketDetails\";\n\ninterface TicketDetailDialogProps {\n  isOpen: boolean;\n  selectedTicket: Ticket | null;\n  onClose: () => void;\n  onTicketAction: (ticketId: string, action: string, data: any) => Promise<void>;\n  onLogTime?: (ticketId: string) => void;\n  showTimeTracking: boolean;\n  userCanEditStatus: boolean;\n  userCanEditDates: boolean;\n}\n\nexport const TicketDetailDialog: React.FC<TicketDetailDialogProps> = ({\n  isOpen,\n  selectedTicket,\n  onClose,\n  onTicketAction,\n  onLogTime,\n  showTimeTracking,\n  userCanEditStatus,\n  userCanEditDates,\n}) => {\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl\">\n        <DialogTitle>Ticket Details</DialogTitle>\n        {selectedTicket && (\n          <ExpandedTicketDetails\n            ticket={selectedTicket}\n            onClose={onClose}\n            onTicketAction={onTicketAction}\n            onLogTime={showTimeTracking && onLogTime ? onLogTime : undefined}\n            userCanEditStatus={userCanEditStatus}\n            userCanEditDates={userCanEditDates}\n          />\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/empty/EmptyTicketState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/filters/TicketFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/hooks/useTicketDashboard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/table/TicketTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/table/TicketTableHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/table/TicketTableRow.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":134,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4497,4500],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4497,4500],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState } from \"react\";\nimport { Ticket } from \"@/types/types\";\nimport { TableCell, TableRow } from \"@/components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Trash } from \"lucide-react\";\nimport { formatDate } from \"../utils/dateFormatters\";\nimport { toast } from \"sonner\";\nimport { TicketService } from \"../TicketService\";\nimport { supabase } from \"@/lib/supabase\";\n\ninterface TicketTableRowProps {\n  ticket: Ticket;\n  showTimeTracking: boolean;\n  userCanEditStatus: boolean;\n  openTicketDetails: (ticket: Ticket) => void;\n  handleUpdateStatus: (ticketId: string, status: string) => void;\n  handleUpdatePriority: (ticketId: string, priority: string) => void;\n  showDeleteConfirmation: (ticket: Ticket) => void;\n  onLogTime?: (ticketId: string) => void;\n  renderTicketActions?: (ticket: Ticket) => React.ReactNode;\n}\n\nexport const TicketTableRow: React.FC<TicketTableRowProps> = ({\n  ticket,\n  showTimeTracking,\n  userCanEditStatus,\n  openTicketDetails,\n  handleUpdateStatus,\n  handleUpdatePriority,\n  showDeleteConfirmation,\n  onLogTime,\n  renderTicketActions\n}) => {\n  const [isCheckingDeletability, setIsCheckingDeletability] = useState(false);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"new\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"in-progress\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"blocked\":\n        return \"bg-red-100 text-red-800\";\n      case \"review\":\n        return \"bg-purple-100 text-purple-800\";\n      case \"done\":\n        return \"bg-green-100 text-green-800\";\n      case \"closed\":\n        return \"bg-gray-100 text-gray-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"low\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"medium\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"high\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"new\":\n        return <span className=\"h-4 w-4 mr-1 text-blue-500\">🔵</span>;\n      case \"in-progress\":\n        return <span className=\"h-4 w-4 mr-1 text-yellow-500\">🟡</span>;\n      case \"blocked\":\n        return <span className=\"h-4 w-4 mr-1 text-red-500\">🔴</span>;\n      case \"done\":\n      case \"closed\":\n        return <span className=\"h-4 w-4 mr-1 text-green-500\">✅</span>;\n      default:\n        return <span className=\"h-4 w-4 mr-1 text-gray-500\">⚪</span>;\n    }\n  };\n\n  const getTicketTypeLabel = (type: string) => {\n    switch (type) {\n      case \"task\":\n        return \"Task\";\n      case \"ticket\":\n        return \"Ticket\";\n      case \"beta_testing\":\n      case \"beta-test\":\n      case \"beta-testing\":\n        return \"Beta Test\";\n      default:\n        return type.charAt(0).toUpperCase() + type.slice(1);\n    }\n  };\n\n  // Check if ticket can be deleted before showing confirmation\n  const checkAndShowDeleteConfirmation = async () => {\n    // Block deletion if we can see the ticket has completion progress or time entries\n    if ((ticket.completion_percentage && ticket.completion_percentage > 0) || \n        (ticket.hours_logged && ticket.hours_logged > 0)) {\n      let message = \"\";\n      if (ticket.completion_percentage && ticket.completion_percentage > 0) {\n        message = \"Cannot delete ticket with completion progress\";\n      } else if (ticket.hours_logged && ticket.hours_logged > 0) {\n        message = \"Cannot delete ticket with time entries\";\n      }\n      toast.error(message);\n      return;\n    }\n\n    // For data we might not have cached, check with the server\n    setIsCheckingDeletability(true);\n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session?.user) {\n        toast.error(\"You must be logged in to delete tickets\");\n        return;\n      }\n\n      const canDelete = await TicketService.canDeleteTicket(ticket.id);\n      if (canDelete) {\n        showDeleteConfirmation(ticket);\n      } else {\n        // If canDeleteTicket method returned false, it should have displayed a toast\n        // with the specific reason already\n        console.log(\"Cannot delete ticket - server check failed\");\n      }\n    } catch (error: any) {\n      console.error(\"Error checking if ticket can be deleted:\", error);\n      let errorMessage = \"Error checking if ticket can be deleted\";\n      if (error?.message) {\n        errorMessage = error.message;\n      }\n      toast.error(errorMessage);\n    } finally {\n      setIsCheckingDeletability(false);\n    }\n  };\n\n  // Immediately determine if the delete button should be disabled\n  const isDeleteDisabled = (ticket.completion_percentage && ticket.completion_percentage > 0) || \n                          (ticket.hours_logged && ticket.hours_logged > 0);\n  \n  const deleteButtonTooltip = isDeleteDisabled ? \n    (ticket.completion_percentage && ticket.completion_percentage > 0) ? \n      \"Cannot delete ticket with completion progress\" : \n      \"Cannot delete ticket with time entries\" : \n    \"Delete ticket\";\n\n  return (\n    <TableRow key={ticket.id}>\n      <TableCell\n        className=\"font-medium cursor-pointer hover:text-blue-600\"\n        onClick={() => openTicketDetails(ticket)}\n      >\n        {ticket.title}\n      </TableCell>\n      <TableCell>\n        <Select\n          value={ticket.status}\n          onValueChange={(value) => handleUpdateStatus(ticket.id, value)}\n          disabled={!userCanEditStatus}\n        >\n          <SelectTrigger className={`w-[130px] ${getStatusColor(ticket.status)}`}>\n            <SelectValue>\n              <div className=\"flex items-center\">\n                {getStatusIcon(ticket.status)}\n                <span>\n                  {ticket.status === \"in-progress\"\n                    ? \"In Progress\"\n                    : ticket.status.charAt(0).toUpperCase() +\n                      ticket.status.slice(1)}\n                </span>\n              </div>\n            </SelectValue>\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"new\">New</SelectItem>\n            <SelectItem value=\"in-progress\">In Progress</SelectItem>\n            <SelectItem value=\"blocked\">Blocked</SelectItem>\n            <SelectItem value=\"review\">Review</SelectItem>\n            <SelectItem value=\"done\">Done</SelectItem>\n            <SelectItem value=\"closed\">Closed</SelectItem>\n          </SelectContent>\n        </Select>\n      </TableCell>\n      <TableCell>\n        <Select\n          value={ticket.priority}\n          onValueChange={(value) => handleUpdatePriority(ticket.id, value)}\n        >\n          <SelectTrigger className={`w-[100px] ${getPriorityColor(ticket.priority)}`}>\n            <SelectValue>\n              {ticket.priority.charAt(0).toUpperCase() +\n                ticket.priority.slice(1)}\n            </SelectValue>\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"low\">Low</SelectItem>\n            <SelectItem value=\"medium\">Medium</SelectItem>\n            <SelectItem value=\"high\">High</SelectItem>\n          </SelectContent>\n        </Select>\n      </TableCell>\n      <TableCell>\n        <Badge variant=\"outline\">\n          {getTicketTypeLabel(ticket.type || \"task\")}\n        </Badge>\n      </TableCell>\n      {showTimeTracking && (\n        <TableCell>\n          {ticket.hours_logged || 0} / {ticket.estimated_hours || 0} hrs\n        </TableCell>\n      )}\n      <TableCell>{formatDate(ticket.due_date)}</TableCell>\n      <TableCell>{ticket.completion_percentage || 0}%</TableCell>\n      <TableCell>\n        <div className=\"flex space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => openTicketDetails(ticket)}\n          >\n            View\n          </Button>\n          {showTimeTracking && onLogTime && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => onLogTime(ticket.id)}\n            >\n              Log Time\n            </Button>\n          )}\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            className={`${isDeleteDisabled ? \"text-gray-400\" : \"text-red-500 hover:bg-red-50\"}`}\n            onClick={isDeleteDisabled ? () => toast.error(deleteButtonTooltip) : checkAndShowDeleteConfirmation}\n            disabled={isCheckingDeletability || isDeleteDisabled}\n            title={deleteButtonTooltip}\n          >\n            <Trash className=\"h-4 w-4\" />\n          </Button>\n          {renderTicketActions && renderTicketActions(ticket)}\n        </div>\n      </TableCell>\n    </TableRow>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ticket/utils/dateFormatters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/badge.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":39,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":39,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n        success:\n          \"border-transparent bg-green-500 text-white hover:bg-green-600\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":59,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":59,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        warning: \"bg-yellow-500 text-white hover:bg-yellow-600\",\n        success: \"bg-green-500 text-white hover:bg-green-600\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/chart.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[199,202],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[199,202],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1004,1007],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1004,1007],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer,\n  Legend,\n  PieChart,\n  Pie,\n  Cell,\n} from \"recharts\";\n\ninterface BarChartProps {\n  data: any[];\n  xKey: string;\n  yKey: string;\n  color?: string;\n  height?: number;\n  width?: number;\n  title?: string;\n  legend?: boolean;\n}\n\nexport const SimpleBarChart = ({\n  data,\n  xKey,\n  yKey,\n  color = \"#3b82f6\",\n  height = 300,\n  width = 500,\n  title,\n  legend = false,\n}: BarChartProps) => {\n  return (\n    <div className=\"w-full\">\n      {title && <h3 className=\"text-sm font-medium mb-2\">{title}</h3>}\n      <ResponsiveContainer width=\"100%\" height={height}>\n        <BarChart data={data} margin={{ top: 10, right: 30, left: 0, bottom: 20 }}>\n          <XAxis dataKey={xKey} />\n          <YAxis />\n          <Tooltip />\n          {legend && <Legend />}\n          <Bar dataKey={yKey} fill={color} />\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\ninterface PieChartProps {\n  data: any[];\n  nameKey: string;\n  valueKey: string;\n  colors?: string[];\n  height?: number;\n  width?: number;\n  title?: string;\n}\n\nconst DEFAULT_COLORS = [\"#3b82f6\", \"#10b981\", \"#f59e0b\", \"#ef4444\", \"#8b5cf6\", \"#ec4899\"];\n\nexport const SimplePieChart = ({\n  data,\n  nameKey,\n  valueKey,\n  colors = DEFAULT_COLORS,\n  height = 300,\n  width = 500,\n  title,\n}: PieChartProps) => {\n  return (\n    <div className=\"w-full\">\n      {title && <h3 className=\"text-sm font-medium mb-2\">{title}</h3>}\n      <ResponsiveContainer width=\"100%\" height={height}>\n        <PieChart>\n          <Pie\n            data={data}\n            cx=\"50%\"\n            cy=\"50%\"\n            labelLine={true}\n            label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n            outerRadius={80}\n            fill=\"#8884d8\"\n            dataKey={valueKey}\n            nameKey={nameKey}\n          >\n            {data.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />\n            ))}\n          </Pie>\n          <Tooltip />\n          <Legend />\n        </PieChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/command.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":24,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":24,"endColumn":29,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[701,752],"text":"type CommandDialogProps = DialogProps"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/form.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":168,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":168,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/kanban-board.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/navigation-menu.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":119,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":119,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/progress-circle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/sidebar.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":760,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":760,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/textarea.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[73,159],"text":"type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/toggle.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":43,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":43,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/components/ui/use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/contexts/JobApplicationContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":304,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":304,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { createContext, useContext, useEffect, useState, useRef, ReactNode } from 'react';\nimport { supabase } from '@/lib/supabase';\nimport { Application, Project } from '@/types/business';\nimport { toast } from 'sonner';\n\ninterface JobApplicationContextType {\n  applications: Application[];\n  pendingApplications: Application[];\n  activeApplications: Application[];\n  withdrawnApplications: Application[];\n  rejectedApplications: Application[];\n  isLoading: boolean;\n  refreshApplications: () => Promise<void>;\n  newApplicationsCount: number;\n  newMessagesCount: number;\n}\n\nconst JobApplicationContext = createContext<JobApplicationContextType | undefined>(undefined);\n\nexport const JobApplicationProvider = ({ children }: { children: ReactNode }) => {\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [newApplicationsCount, setNewApplicationsCount] = useState(0);\n  const [newMessagesCount, setNewMessagesCount] = useState(0);\n  const channelRef = useRef<ReturnType<typeof supabase.channel> | null>(null);\n  \n  const loadProjectsWithApplications = async () => {\n    try {\n      setIsLoading(true);\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) return;\n\n      console.log(\"Loading projects for business ID:\", session.user.id);\n\n      const { data: projectsData, error: projectsError } = await supabase\n        .from('business_projects')\n        .select('*')\n        .eq('business_id', session.user.id);\n\n      if (projectsError) {\n        console.error(\"Error fetching projects:\", projectsError);\n        throw projectsError;\n      }\n\n      if (!projectsData || projectsData.length === 0) {\n        setProjects([]);\n        return;\n      }\n\n      const projectsWithApplications: Project[] = [];\n\n      for (const project of projectsData) {\n        const { data: tasksData, error: tasksError } = await supabase\n          .from('project_sub_tasks')\n          .select('task_id, skill_requirements, equity_allocation, timeframe')\n          .eq('project_id', project.project_id);\n\n        if (tasksError) {\n          console.error('Error fetching tasks for project:', project.project_id, tasksError);\n          continue;\n        }\n        \n        const taskIds = tasksData.map(task => task.task_id);\n\n        if (taskIds.length === 0) {\n          projectsWithApplications.push({\n            ...project,\n            applications: []\n          });\n          continue;\n        }\n\n        const { data: applicationsData, error: applicationsError } = await supabase\n          .from('job_applications')\n          .select('*')\n          .in('task_id', taskIds);\n\n        if (applicationsError) {\n          console.error('Error fetching applications:', applicationsError);\n          continue;\n        }\n\n        if (!applicationsData || applicationsData.length === 0) {\n          projectsWithApplications.push({\n            ...project,\n            applications: []\n          });\n          continue;\n        }\n\n        const applicationsWithProfiles = [];\n\n        for (const app of applicationsData) {\n          const { data: profileData, error: profileError } = await supabase\n            .from('profiles')\n            .select('first_name, last_name, title, location, employment_preference, skills')\n            .eq('id', app.user_id)\n            .maybeSingle();\n\n          if (profileError) {\n            console.error('Error fetching profile for user:', app.user_id, profileError);\n            continue;\n          }\n\n          const { data: taskData, error: taskError } = await supabase\n            .from('project_sub_tasks')\n            .select('title, description, skills_required, skill_requirements, equity_allocation, timeframe')\n            .eq('task_id', app.task_id)\n            .maybeSingle();\n\n          if (taskError) {\n            console.error('Error fetching task details:', taskError);\n            continue;\n          }\n\n          let userSkills = [];\n          if (profileData?.skills) {\n            try {\n              if (typeof profileData.skills === 'string') {\n                const parsedSkills = JSON.parse(profileData.skills);\n                if (Array.isArray(parsedSkills)) {\n                  userSkills = parsedSkills.map(s => \n                    typeof s === 'string' ? { skill: s, level: \"Intermediate\" } : s\n                  );\n                }\n              } else if (Array.isArray(profileData.skills)) {\n                userSkills = profileData.skills.map(s => \n                  typeof s === 'string' ? { skill: s, level: \"Intermediate\" } : s\n                );\n              }\n            } catch (e) {\n              console.error(\"Error parsing skills:\", e);\n            }\n          }\n\n          const userSkillNames = userSkills.map(s => s.skill.toLowerCase());\n          const taskRequiredSkills = taskData?.skill_requirements || [];\n          \n          let matchedSkills = 0;\n          if (Array.isArray(taskRequiredSkills)) {\n            taskRequiredSkills.forEach(skillObj => {\n              const skillName = typeof skillObj === 'string' ? \n                skillObj.toLowerCase() : \n                (skillObj.skill ? skillObj.skill.toLowerCase() : '');\n                \n              if (skillName && userSkillNames.includes(skillName)) {\n                matchedSkills++;\n              }\n            });\n          }\n          \n          const skillMatch = taskRequiredSkills.length > 0 \n            ? Math.round((matchedSkills / taskRequiredSkills.length) * 100) \n            : 0;\n\n          applicationsWithProfiles.push({\n            ...app,\n            profile: {\n              ...profileData,\n              skills: userSkills\n            },\n            business_roles: {\n              ...(taskData || {}),\n              project: {\n                title: project.title\n              }\n            },\n            skillMatch\n          });\n        }\n\n        projectsWithApplications.push({\n          ...project,\n          applications: applicationsWithProfiles\n        });\n      }\n\n      setProjects(projectsWithApplications);\n      \n      const oneDayAgo = new Date();\n      oneDayAgo.setDate(oneDayAgo.getDate() - 1);\n      \n      let newApps = 0;\n      let newMsgs = 0;\n      \n      projectsWithApplications.forEach(project => {\n        project.applications.forEach(app => {\n          const appDate = new Date(app.applied_at);\n          if (appDate > oneDayAgo && app.status === 'pending') {\n            newApps++;\n          }\n          \n          if (app.task_discourse) {\n            const lastMessageMatch = app.task_discourse.match(/\\[([^\\]]+)\\]/);\n            if (lastMessageMatch) {\n              try {\n                const msgDate = new Date(lastMessageMatch[1]);\n                if (msgDate > oneDayAgo) {\n                  newMsgs++;\n                }\n              } catch (e) {\n                console.error(\"Error parsing message date:\", e);\n              }\n            }\n          }\n        });\n      });\n      \n      setNewApplicationsCount(newApps);\n      setNewMessagesCount(newMsgs);\n    } catch (error) {\n      console.error('Error loading projects with applications:', error);\n      toast.error(\"Failed to load applications data\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  useEffect(() => {\n    loadProjectsWithApplications();\n    \n    // Only set up the channel once\n    if (!channelRef.current) {\n      const channel = supabase\n        .channel('application-updates')\n        .on(\n          'postgres_changes',\n          {\n            event: 'INSERT',\n            schema: 'public',\n            table: 'job_applications'\n          },\n          () => {\n            setNewApplicationsCount(prev => prev + 1);\n            toast.info(\"New application received!\");\n            loadProjectsWithApplications();\n          }\n        )\n        .on(\n          'postgres_changes',\n          {\n            event: 'UPDATE',\n            schema: 'public',\n            table: 'job_applications',\n            filter: 'task_discourse=neq.null'\n          },\n          () => {\n            setNewMessagesCount(prev => prev + 1);\n            toast.info(\"New message received!\");\n            loadProjectsWithApplications();\n          }\n        )\n        .subscribe();\n\n      channelRef.current = channel;\n    }\n\n    return () => {\n      if (channelRef.current) {\n        supabase.removeChannel(channelRef.current);\n        channelRef.current = null;\n      }\n    };\n  }, []);\n  \n  // Get applications across all projects\n  const getAllApplications = (): Application[] => {\n    return projects.flatMap(project => project.applications);\n  };\n  \n  // Get applications by status\n  const getApplicationsByStatus = (statuses: string[]): Application[] => {\n    return getAllApplications().filter(app => \n      statuses.includes(app.status.toLowerCase())\n    );\n  };\n  \n  // Computed properties\n  const pendingApplications = getApplicationsByStatus(['pending', 'in review']);\n  const activeApplications = getApplicationsByStatus(['negotiation', 'accepted']);\n  const withdrawnApplications = getApplicationsByStatus(['withdrawn']);\n  const rejectedApplications = getApplicationsByStatus(['rejected']);\n  \n  const value = {\n    applications: getAllApplications(),\n    pendingApplications,\n    activeApplications,\n    withdrawnApplications,\n    rejectedApplications,\n    isLoading,\n    refreshApplications: loadProjectsWithApplications,\n    newApplicationsCount,\n    newMessagesCount\n  };\n  \n  return (\n    <JobApplicationContext.Provider value={value}>\n      {children}\n    </JobApplicationContext.Provider>\n  );\n};\n\nexport const useJobApplications = () => {\n  const context = useContext(JobApplicationContext);\n  if (context === undefined) {\n    throw new Error('useJobApplications must be used within a JobApplicationProvider');\n  }\n  return context;\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/hooks/job-seeker/dashboard/useJobSeekerDashboardCore.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setEquityProjects'. Either include it or remove the dependency array.","line":88,"column":6,"nodeType":"ArrayExpression","endLine":101,"endColumn":4,"suggestions":[{"desc":"Update the dependencies array to be: [checkSession, checkProfileCompletion, checkBusinessProfile, loadProfile, loadApplications, loadCVData, loadUserTickets, skills, loadOpportunities, transformToEquityProjects, applications, setEquityProjects, navigate]","fix":{"range":[3458,3719],"text":"[checkSession, checkProfileCompletion, checkBusinessProfile, loadProfile, loadApplications, loadCVData, loadUserTickets, skills, loadOpportunities, transformToEquityProjects, applications, setEquityProjects, navigate]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { supabase } from \"@/lib/supabase\";\nimport { toast } from \"sonner\";\nimport { useProfile } from \"../useProfile\";\nimport { useApplications } from \"../useApplications\";\nimport { useEquityProjects } from \"../useEquityProjects\";\nimport { useCVData } from \"../useCVData\";\nimport { useSessionCheck } from \"./useSessionCheck\";\nimport { useOpportunitiesLoader } from \"./useOpportunitiesLoader\";\nimport { useTicketsAndMessages } from \"./useTicketsAndMessages\";\nimport { EquityProject } from \"@/types/jobSeeker\";\n\nexport const useJobSeekerDashboardCore = (refreshTrigger = 0) => {\n  const navigate = useNavigate();\n  const [isLoading, setIsLoading] = useState(true);\n  const [availableOpportunities, setAvailableOpportunities] = useState<EquityProject[]>([]);\n  const [isSessionChecked, setIsSessionChecked] = useState(false);\n  const [isProfileComplete, setIsProfileComplete] = useState(false);\n  const [hasBusinessProfile, setHasBusinessProfile] = useState(false);\n  const loadingRef = useRef(false);\n  const logsDisabledRef = useRef(true);\n\n  const { profile, skills, loadProfile, handleSkillsUpdate } = useProfile();\n  const { applications, loadApplications } = useApplications();\n  const { equityProjects, setEquityProjects, logEffort, setLogEffort, transformToEquityProjects } = useEquityProjects();\n  const { cvUrl, setCvUrl, parsedCvData, setParsedCvData, loadCVData, userCVs, setUserCVs } = useCVData();\n  const { checkSession, checkProfileCompletion, checkBusinessProfile, handleSignOut } = useSessionCheck();\n  const { loadOpportunities } = useOpportunitiesLoader();\n  const { userTickets, ticketMessages, loadUserTickets, handleTicketAction } = useTicketsAndMessages();\n\n  const loadDashboardData = useCallback(async () => {\n    if (loadingRef.current) return;\n    \n    loadingRef.current = true;\n    \n    try {\n      setIsLoading(true);\n      \n      const session = await checkSession();\n      if (!session) {\n        loadingRef.current = false;\n        return;\n      }\n\n      const isComplete = await checkProfileCompletion(session.user.id);\n      setIsProfileComplete(isComplete);\n      \n      if (!isComplete) {\n        navigate('/seeker/profile/complete');\n        loadingRef.current = false;\n        return;\n      }\n\n      const hasProfile = await checkBusinessProfile(session.user.id);\n      setHasBusinessProfile(hasProfile);\n\n      await Promise.all([\n        loadProfile(session.user.id),\n        loadApplications(session.user.id),\n        loadCVData(session.user.id),\n        loadUserTickets(session.user.id)\n      ]);\n\n      // Convert skills to the format expected by loadOpportunities if needed\n      const skillsForOpportunities = skills ? skills.map(s => {\n        if ('skill' in s) return { ...s }; \n        if ('name' in s) return { skill: s.name, level: s.level };\n        return s;\n      }) : [];\n      \n      const opportunities = await loadOpportunities(session.user.id, skillsForOpportunities);\n      setAvailableOpportunities(opportunities);\n\n      const acceptedProjects = transformToEquityProjects(\n        applications.filter(app => app.status === 'accepted')\n      );\n\n      setEquityProjects(acceptedProjects);\n      setIsSessionChecked(true);\n\n    } catch (error) {\n      toast.error(\"Failed to load dashboard data\");\n    } finally {\n      setIsLoading(false);\n      loadingRef.current = false;\n    }\n  }, [\n    checkSession, \n    checkProfileCompletion, \n    checkBusinessProfile, \n    loadProfile, \n    loadApplications, \n    loadCVData, \n    loadUserTickets, \n    loadOpportunities, \n    skills, \n    applications, \n    navigate, \n    transformToEquityProjects\n  ]);\n\n  useEffect(() => {\n    if (refreshTrigger > 0) {\n      logsDisabledRef.current = false;\n      \n      const timer = setTimeout(() => {\n        logsDisabledRef.current = true;\n      }, 5000);\n      \n      return () => clearTimeout(timer);\n    }\n    \n    loadDashboardData();\n    \n    const sessionCheckInterval = setInterval(async () => {\n      await checkSession();\n    }, 300000); // 5 minute interval\n\n    return () => {\n      clearInterval(sessionCheckInterval);\n    };\n  }, [checkSession, loadDashboardData, refreshTrigger]);\n\n  const signOut = async () => {\n    const result = await handleSignOut();\n    if (result.success) {\n      navigate('/auth/seeker');\n    } else {\n      toast.error(\"Failed to sign out\");\n    }\n  };\n\n  const refreshApplications = async () => {\n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) return;\n      \n      await loadApplications(session.user.id);\n    } catch (error) {\n      console.error('Error refreshing applications:', error);\n    }\n  };\n\n  const onCvListUpdated = async () => {\n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (session) {\n        await loadCVData(session.user.id);\n      }\n    } catch (error) {\n      toast.error(\"Failed to refresh CV list\");\n    }\n  };\n\n  return {\n    isLoading,\n    profile,\n    cvUrl,\n    applications,\n    equityProjects,\n    availableOpportunities,\n    parsedCvData,\n    skills,\n    logEffort,\n    setLogEffort,\n    setCvUrl,\n    setParsedCvData,\n    setEquityProjects,\n    handleSignOut: signOut,\n    handleSkillsUpdate,\n    refreshApplications,\n    hasBusinessProfile,\n    isProfileComplete,\n    userCVs,\n    onCvListUpdated,\n    userTickets,\n    ticketMessages,\n    handleTicketAction\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/hooks/job-seeker/dashboard/useOpportunitiesLoader.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[292,295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[292,295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from \"react\";\nimport { supabase } from \"@/lib/supabase\";\nimport { EquityProject } from \"@/types/equity\";\nimport { Skill } from \"@/types/profile\";\n\nexport const useOpportunitiesLoader = () => {\n  const loadOpportunities = useCallback(async (userId: string, userSkills?: any[]) => {\n    try {\n      const { data: userApplications, error: applicationsError } = await supabase\n        .from('job_applications')\n        .select('task_id, status')\n        .eq('user_id', userId);\n\n      if (applicationsError) throw applicationsError;\n\n      const unavailableTaskIds = new Set(\n        userApplications\n          ?.filter(app => ['pending', 'in review', 'negotiation', 'accepted'].includes(app.status))\n          .map(app => app.task_id) || []\n      );\n\n      // Create an array of just skill names for easier matching\n      const userSkillStrings = (userSkills || []).map(skill => {\n        if (typeof skill === 'string') return skill.toLowerCase();\n        if (skill && typeof skill === 'object') {\n          return ('skill' in skill && skill.skill) \n            ? skill.skill.toLowerCase() \n            : ('name' in skill && skill.name)\n              ? skill.name.toLowerCase()\n              : '';\n        }\n        return '';\n      }).filter(Boolean);\n      \n      const formattedUserSkills = Array.isArray(userSkills) \n        ? userSkills.map(s => {\n            if (typeof s === 'string') return s.toLowerCase();\n            return typeof s === 'object' && s !== null && 'skill' in s && typeof s.skill === 'string' \n              ? s.skill.toLowerCase() \n              : '';\n          }).filter(Boolean)\n        : [];\n      \n      const { data: tasksData, error: tasksError } = await supabase\n        .from('project_sub_tasks')\n        .select(`\n          *,\n          business_projects!inner (\n            project_id,\n            title,\n            business_id,\n            businesses (\n              company_name\n            )\n          )\n        `)\n        .eq('status', 'open');\n\n      if (tasksError) {\n        console.error(\"Error fetching tasks:\", tasksError);\n        throw tasksError;\n      }\n\n      if (!tasksData || tasksData.length === 0) {\n        console.log(\"No tasks found\");\n        return [];\n      }\n      \n      const opportunities = tasksData\n        .filter(task => {\n          if (unavailableTaskIds.has(task.task_id)) return false;\n          \n          if (formattedUserSkills.length === 0) return true;\n          \n          if (!task.skill_requirements || !Array.isArray(task.skill_requirements)) return false;\n          \n          const taskSkills = task.skill_requirements.map(s => {\n            if (typeof s === 'string') return s.toLowerCase();\n            return typeof s === 'object' && s !== null && 'skill' in s && typeof s.skill === 'string' \n              ? s.skill.toLowerCase() \n              : '';\n          }).filter(Boolean);\n          \n          if (taskSkills.length === 0 || formattedUserSkills.length === 0) return true;\n          \n          const hasMatchingSkill = formattedUserSkills.some(skill => \n            taskSkills.includes(skill)\n          );\n          \n          return hasMatchingSkill;\n        })\n        .map(task => {\n          if (!task.skill_requirements || !Array.isArray(task.skill_requirements)) {\n            task.skill_requirements = [];\n          }\n          \n          // Safely convert skill requirements to string array for comparisons\n          const taskSkills = task.skill_requirements.map(s => {\n            if (typeof s === 'string') return s.toLowerCase();\n            return typeof s === 'object' && s !== null && 'skill' in s && typeof s.skill === 'string'\n              ? s.skill.toLowerCase()\n              : '';\n          }).filter(Boolean);\n          \n          // Only compare strings with strings for safety\n          const matchingSkills = formattedUserSkills.filter(skill => \n            typeof skill === 'string' && taskSkills.includes(skill)\n          );\n          \n          const matchPercentage = taskSkills.length > 0 \n            ? Math.round((matchingSkills.length / taskSkills.length) * 100) \n            : 0;\n\n          let companyName = \"Unknown Company\";\n          let projectTitle = \"Untitled Project\";\n          \n          if (task.business_projects) {\n            projectTitle = task.business_projects.title || \"Untitled Project\";\n            \n            if (task.business_projects.businesses) {\n              if (Array.isArray(task.business_projects.businesses)) {\n                companyName = task.business_projects.businesses[0]?.company_name || \"Unknown Company\";\n              } else {\n                companyName = task.business_projects.businesses.company_name || \"Unknown Company\";\n              }\n            }\n          }\n          \n          return {\n            id: task.task_id,\n            project_id: task.project_id,\n            equity_amount: task.equity_allocation,\n            time_allocated: task.timeframe,\n            status: task.status,\n            start_date: task.created_at,\n            effort_logs: [],\n            total_hours_logged: 0,\n            title: projectTitle,\n            created_by: task.created_by,\n            updated_at: task.updated_at,  // Add updated_at for filtering new opportunities\n            skill_match: matchPercentage,\n            sub_tasks: [{\n              id: task.task_id,\n              task_id: task.task_id,\n              project_id: task.project_id,\n              title: task.title,\n              description: task.description,\n              timeframe: task.timeframe,\n              status: task.status,\n              equity_allocation: task.equity_allocation,\n              skill_requirements: task.skill_requirements || [],\n              task_status: task.task_status,\n              completion_percentage: task.completion_percentage\n            }],\n            business_roles: {\n              title: task.title,\n              description: task.description,\n              project_title: projectTitle,\n              company_name: companyName,\n              skill_requirements: task.skill_requirements || []\n            }\n          };\n        });\n\n      return opportunities;\n    } catch (error) {\n      console.error(\"Error loading opportunities:\", error);\n      return [];\n    }\n  }, []);\n\n  return { loadOpportunities };\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/hooks/job-seeker/dashboard/useSessionCheck.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/hooks/job-seeker/dashboard/useTicketsAndMessages.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[269,272],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[269,272],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'loadTicketMessages'. Either include it or remove the dependency array.","line":43,"column":6,"nodeType":"ArrayExpression","endLine":43,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadTicketMessages]","fix":{"range":[1418,1420],"text":"[loadTicketMessages]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":90,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":93,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2140,2143],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2140,2143],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'notes' is never reassigned. Use 'const' instead.","line":144,"column":13,"nodeType":"Identifier","messageId":"useConst","endLine":144,"endColumn":18,"fix":{"range":[4418,4458],"text":"const notes = ticketNotesData.notes || [];"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"\nimport { useState, useCallback } from \"react\";\nimport { supabase } from \"@/lib/supabase\";\nimport { toast } from \"sonner\";\nimport { TicketMessage } from \"@/types/dashboard\";\n\nexport const useTicketsAndMessages = () => {\n  const [userTickets, setUserTickets] = useState<any[]>([]);\n  const [ticketMessages, setTicketMessages] = useState<TicketMessage[]>([]);\n\n  const loadUserTickets = useCallback(async (userId: string) => {\n    try {\n      const { data: reportedTickets, error: reportedError } = await supabase\n        .from('tickets')\n        .select('*')\n        .eq('reporter', userId);\n      \n      if (reportedError) {\n        console.error(\"Error fetching reported tickets:\", reportedError);\n        return;\n      }\n\n      const { data: assignedTickets, error: assignedError } = await supabase\n        .from('tickets')\n        .select('*')\n        .eq('assigned_to', userId);\n      \n      if (assignedError) {\n        console.error(\"Error fetching assigned tickets:\", assignedError);\n        return;\n      }\n\n      const allTickets = [...(reportedTickets || []), ...(assignedTickets || [])];\n      const uniqueTickets = Array.from(new Map(allTickets.map(ticket => [ticket.id, ticket])).values());\n      \n      setUserTickets(uniqueTickets);\n\n      await loadTicketMessages(userId, uniqueTickets.map(t => t.id));\n      \n    } catch (error) {\n      console.error(\"Error loading user tickets:\", error);\n    }\n  }, []);\n\n  const loadTicketMessages = useCallback(async (userId: string, ticketIds: string[]) => {\n    if (!ticketIds.length) return;\n    \n    try {\n      const { data: messages, error: messagesError } = await supabase\n        .from('user_messages')\n        .select('*')\n        .eq('recipient_id', userId)\n        .in('related_ticket', ticketIds);\n      \n      if (messagesError) {\n        console.error(\"Error fetching ticket messages:\", messagesError);\n        return;\n      }\n      \n      setTicketMessages(messages || []);\n      \n    } catch (error) {\n      console.error(\"Error loading ticket messages:\", error);\n    }\n  }, []);\n\n  const handleTicketAction = useCallback(async (ticketId: string, action: string, data?: any) => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      \n      if (!user) {\n        toast.error(\"You must be logged in to perform this action\");\n        return;\n      }\n      \n      if (action === 'reply') {\n        const { message } = data || {};\n        \n        if (!message || !message.trim()) {\n          toast.error(\"Message cannot be empty\");\n          return;\n        }\n        \n        const { data: ticketData, error: ticketError } = await supabase\n          .from('tickets')\n          .select('reporter, assigned_to')\n          .eq('id', ticketId)\n          .single();\n          \n        if (ticketError) {\n          console.error(\"Error fetching ticket:\", ticketError);\n          toast.error(\"Failed to send reply\");\n          return;\n        }\n        \n        let recipientId = user.id === ticketData.reporter \n          ? ticketData.assigned_to \n          : ticketData.reporter;\n          \n        if (!recipientId) {\n          const { data: adminData } = await supabase\n            .from('admin_users')\n            .select('user_id')\n            .limit(1)\n            .single();\n            \n          recipientId = adminData?.user_id;\n        }\n        \n        if (!recipientId) {\n          toast.error(\"No recipient found for your message\");\n          return;\n        }\n        \n        const { error: messageError } = await supabase\n          .from('user_messages')\n          .insert({\n            sender_id: user.id,\n            recipient_id: recipientId,\n            subject: `Re: Ticket #${ticketId.substring(0, 8)}`,\n            message: message,\n            related_ticket: ticketId,\n            read: false\n          });\n          \n        if (messageError) {\n          console.error(\"Error sending message:\", messageError);\n          toast.error(\"Failed to send message\");\n          return;\n        }\n        \n        const { data: ticketNotesData, error: notesError } = await supabase\n          .from('tickets')\n          .select('notes')\n          .eq('id', ticketId)\n          .single();\n          \n        if (notesError) {\n          console.error(\"Error fetching ticket notes:\", notesError);\n          toast.error(\"Message sent but failed to update ticket history\");\n          return;\n        }\n        \n        let notes = ticketNotesData.notes || [];\n        \n        const { data: userData } = await supabase\n          .from('profiles')\n          .select('first_name, last_name, email')\n          .eq('id', user.id)\n          .single();\n          \n        const userName = userData?.first_name \n          ? `${userData.first_name} ${userData.last_name || ''}`\n          : userData?.email || user.email || 'Unknown User';\n        \n        notes.push({\n          action: user.id === ticketData.reporter ? 'Reply from reporter' : 'Reply from assignee',\n          user: userName,\n          timestamp: new Date().toISOString(),\n          comment: message\n        });\n        \n        const { error: updateError } = await supabase\n          .from('tickets')\n          .update({\n            notes: notes,\n            updated_at: new Date().toISOString()\n          })\n          .eq('id', ticketId);\n          \n        if (updateError) {\n          console.error(\"Error updating ticket notes:\", updateError);\n          toast.error(\"Message sent but failed to update ticket history\");\n          return;\n        }\n        \n        toast.success(\"Message sent successfully\");\n        \n        // Reload ticket messages\n        const session = await supabase.auth.getSession();\n        if (session.data.session) {\n          await loadTicketMessages(session.data.session.user.id, [ticketId]);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error handling ticket action:\", error);\n      toast.error(\"Failed to perform ticket action\");\n    }\n  }, [loadTicketMessages]);\n\n  return {\n    userTickets,\n    ticketMessages,\n    loadUserTickets,\n    loadTicketMessages,\n    handleTicketAction\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/hooks/job-seeker/useApplications.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1309,1312],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1309,1312],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1711,1714],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1711,1714],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState } from \"react\";\nimport { supabase } from \"@/lib/supabase\";\nimport { toast } from \"sonner\";\nimport { JobApplication, SkillRequirement } from \"@/types/jobSeeker\";\n\nexport const useApplications = () => {\n  const [applications, setApplications] = useState<JobApplication[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const loadApplications = async (userId: string) => {\n    try {\n      setIsLoading(true);\n      \n      // Fetch all job applications for this user\n      const { data, error } = await supabase\n        .from('job_applications')\n        .select(`\n          *,\n          business_roles:project_sub_tasks (\n            task_id,\n            title,\n            description,\n            timeframe,\n            skill_requirements,\n            equity_allocation,\n            completion_percentage,\n            task_status,\n            project:business_projects (\n              project_id,\n              title,\n              business:businesses (\n                company_name\n              )\n            )\n          )\n        `)\n        .eq('user_id', userId)\n        .order('applied_at', { ascending: false });\n      \n      if (error) throw error;\n      \n      // Process the data to make it fit our JobApplication type\n      const processedApplications = data.map((app: any) => {\n        // Get company name from businesses relation\n        const companyName = app.business_roles?.project?.business?.company_name || \"Unknown Company\";\n        \n        // Properly format skill_requirements to match SkillRequirement type\n        const skillRequirements = app.business_roles?.skill_requirements || [];\n        const formattedSkillRequirements = skillRequirements.map((req: any) => {\n          if (typeof req === 'string') {\n            return req;\n          }\n          \n          // Ensure level is one of the allowed values\n          const level = ['Beginner', 'Intermediate', 'Expert'].includes(req.level) \n            ? req.level as 'Beginner' | 'Intermediate' | 'Expert'\n            : 'Intermediate';\n            \n          return { \n            skill: req.skill, \n            level \n          } as SkillRequirement;\n        });\n        \n        return {\n          ...app,\n          id: app.job_app_id, // Ensuring id property is set\n          status: app.status || \"\", // Ensure status is never undefined\n          business_roles: {\n            title: app.business_roles?.title || \"Unknown Role\",\n            description: app.business_roles?.description || \"\",\n            timeframe: app.business_roles?.timeframe || \"\",\n            skill_requirements: formattedSkillRequirements,\n            equity_allocation: app.business_roles?.equity_allocation,\n            completion_percentage: app.business_roles?.completion_percentage,\n            task_status: app.business_roles?.task_status,\n            company_name: companyName,\n            project_title: app.business_roles?.project?.title\n          }\n        };\n      });\n      \n      // Set all applications without filtering\n      setApplications(processedApplications);\n    } catch (error) {\n      toast.error(\"Failed to load applications\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return {\n    applications,\n    isLoading,\n    loadApplications\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/hooks/job-seeker/useCVData.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[308,311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[308,311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[333,336],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[333,336],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[353,356],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[353,356],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useRef } from \"react\";\nimport { supabase } from \"@/lib/supabase\";\nimport { toast } from \"sonner\";\n\nexport interface CVFile {\n  id: string;\n  name: string;\n  url: string;\n  created_at: string;\n  size?: number;\n  is_default?: boolean;\n}\n\nexport interface ParsedCVData {\n  skills: any[];\n  career_history: any[];\n  education: any[];\n}\n\nexport const useCVData = () => {\n  const [cvUrl, setCvUrl] = useState<string | null>(null);\n  const [parsedCvData, setParsedCvData] = useState<ParsedCVData>({\n    skills: [],\n    career_history: [],\n    education: []\n  });\n  const [userCVs, setUserCVs] = useState<CVFile[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const hasLogged = useRef<boolean>(false);\n  const dataLoadedRef = useRef<boolean>(false);\n\n  const loadCVData = async (userId: string) => {\n    if (!userId || dataLoadedRef.current) return;\n    \n    setIsLoading(true);\n    try {\n      // Fetch the user's profile to get their CV URL\n      const { data: profileData, error: profileError } = await supabase\n        .from('profiles')\n        .select('cv_url')\n        .eq('id', userId)\n        .single();\n\n      if (profileError && profileError.code !== 'PGRST116') {\n        console.error(\"Error fetching profile CV URL:\", profileError);\n      } else if (profileData?.cv_url) {\n        setCvUrl(profileData.cv_url);\n      }\n\n      // Fetch parsed CV data\n      const { data: parsedData, error: parsedError } = await supabase\n        .from('cv_parsed_data')\n        .select('skills, career_history, education')\n        .eq('user_id', userId)\n        .order('created_at', { ascending: false })\n        .limit(1)\n        .maybeSingle();\n\n      if (parsedError && parsedError.code !== 'PGRST116') {\n        console.error(\"Error fetching parsed CV data:\", parsedError);\n      } else if (parsedData) {\n        setParsedCvData({\n          skills: parsedData.skills || [],\n          career_history: parsedData.career_history || [],\n          education: parsedData.education || []\n        });\n      }\n\n      // Fetch the user's CV files\n      try {\n        const { data: cvFiles, error: cvFilesError } = await supabase\n          .storage\n          .from('cvs')\n          .list(`${userId}`);\n\n        if (cvFilesError) {\n          console.error(\"Error fetching CV files:\", cvFilesError);\n          setUserCVs([]);\n          return;\n        }\n\n        // Transform the data to include full URLs\n        if (cvFiles && cvFiles.length > 0) {\n          const transformedCVs: CVFile[] = await Promise.all(\n            cvFiles.map(async (file) => {\n              const { data: urlData } = await supabase\n                .storage\n                .from('cvs')\n                .createSignedUrl(`${userId}/${file.name}`, 60 * 60); // 1 hour expiry\n\n              return {\n                id: `${userId}_${file.name}`,\n                name: file.name,\n                url: urlData?.signedUrl || '',\n                created_at: file.created_at || new Date().toISOString(),\n                size: file.metadata?.size,\n                is_default: profileData?.cv_url?.includes(file.name) || false\n              };\n            })\n          );\n\n          if (!hasLogged.current) {\n            console.info(\"CV files loaded:\", transformedCVs.length);\n            hasLogged.current = true;\n          }\n          \n          setUserCVs(transformedCVs);\n        } else {\n          // If no files were found, set an empty array and only log once\n          if (!hasLogged.current) {\n            console.info(\"CV files loaded: 0\");\n            hasLogged.current = true;\n          }\n          setUserCVs([]);\n        }\n      } catch (error) {\n        // Handle storage errors gracefully\n        console.error(\"Storage error:\", error);\n        setUserCVs([]);\n      }\n      \n      // Mark data as loaded to prevent redundant fetches\n      dataLoadedRef.current = true;\n    } catch (error) {\n      console.error(\"Error loading CV data:\", error);\n      toast.error(\"Failed to load CV data\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Reset the dataLoadedRef when the component unmounts\n  useEffect(() => {\n    return () => {\n      dataLoadedRef.current = false;\n      hasLogged.current = false;\n    };\n  }, []);\n\n  return {\n    cvUrl,\n    setCvUrl,\n    parsedCvData,\n    setParsedCvData,\n    loadCVData,\n    userCVs,\n    setUserCVs,\n    isLoading\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/hooks/job-seeker/useEquityProjects.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/hooks/job-seeker/useProfile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/hooks/jobs/useAcceptedJobsCore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/hooks/jobs/useContractManagement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/hooks/jobs/useJobAcceptance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/hooks/use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/hooks/use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/hooks/useAcceptedJobs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/hooks/useAwardAgreementManagement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/hooks/useJobSeekerDashboard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/hooks/useNDAIntegration.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/hooks/useNDAManagement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/hooks/useWorkContractManagement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/integrations/supabase/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/integrations/supabase/testPolicies.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[989,992],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[989,992],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2580,2583],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2580,2583],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3262,3265],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3262,3265],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { supabase } from './client';\n\n// Function to test if a user can access files in a storage bucket\nasync function testStorageAccess(userId: string, bucketId: string, filePath: string) {\n  try {\n    // For testing storage policies, we need to be authenticated as the user\n    console.log(`Testing storage access for user ${userId} to ${bucketId}/${filePath}`);\n    \n    // Check if we're authenticated\n    const { data: { session } } = await supabase.auth.getSession();\n    if (!session) {\n      return { success: false, error: \"Not authenticated\", status: \"Not authenticated\" };\n    }\n    \n    // Check if the bucket exists using storage API directly\n    const { data, error } = await supabase.storage\n      .from(bucketId)\n      .list(filePath || '');\n    \n    if (error) {\n      console.error(\"Storage access error:\", error);\n      return { success: false, error, status: error.message };\n    }\n    \n    return { success: true, data, status: \"Access granted\" };\n  } catch (error: any) {\n    console.error(\"Error testing storage access:\", error);\n    return { success: false, error, status: error.message || \"Unknown error\" };\n  }\n}\n\n// Test Cases\nconst testCases = [\n  {\n    description: \"Authenticated User with Project ID in Path\",\n    bucketId: 'ticket-attachments',\n    role: 'authenticated',\n    path: 'project123/ticket456',\n    expectedResult: true,\n  },\n  {\n    description: \"Reporter of the Ticket\",\n    bucketId: 'ticket-attachments',\n    userId: 'reporter123',\n    ticketId: 'ticket456',\n    expectedResult: true,\n  },\n  {\n    description: \"Assigned User to the Ticket\",\n    bucketId: 'ticket-attachments',\n    userId: 'assignedUser123',\n    ticketId: 'ticket456',\n    expectedResult: true,\n  },\n  {\n    description: \"Creator of Related Project Sub-tasks\",\n    bucketId: 'ticket-attachments',\n    userId: 'subTaskCreator123',\n    ticketId: 'ticket456',\n    expectedResult: true,\n  },\n  {\n    description: \"Applicant in Related Job Applications\",\n    bucketId: 'ticket-attachments',\n    userId: 'applicant123',\n    ticketId: 'ticket456',\n    expectedResult: true,\n  },\n  {\n    description: \"Creator of Related Business Project\",\n    bucketId: 'ticket-attachments',\n    userId: 'businessProjectCreator123',\n    ticketId: 'ticket456',\n    expectedResult: true,\n  },\n  {\n    description: \"Creator of Business Project Related to the Business\",\n    bucketId: 'ticket-attachments',\n    userId: 'businessProjectCreator123',\n    ticketId: 'ticket456',\n    expectedResult: true,\n  },\n];\n\n// Function to simulate policy conditions\nconst simulatePolicy = async (testCase: any) => {\n  const { description, bucketId, role, path, userId, ticketId, expectedResult } = testCase;\n  \n  console.log(`Running test: ${description}`);\n  \n  try {\n    // For storage policies, we need to test actual storage access\n    if (bucketId && (path || (userId && ticketId))) {\n      const fullPath = path || `${userId}/${ticketId}`;\n      const result = await testStorageAccess(userId || 'test-user', bucketId, fullPath);\n      \n      console.log(`${description}: ${result.success === expectedResult ? 'PASS' : 'FAIL'} - ${result.status}`);\n      return result;\n    }\n    \n    console.log(`${description}: SKIP - Not a storage test case`);\n    return null;\n  } catch (error: any) {\n    console.error(`${description}: ERROR - ${error.message}`);\n    return { success: false, error, status: error.message };\n  }\n};\n\n// Run test cases\nexport const runPolicyTests = async () => {\n  console.log(\"Running storage policy tests...\");\n  const results = [];\n  for (const testCase of testCases) {\n    results.push(await simulatePolicy(testCase));\n  }\n  return results;\n};\n\n// Export for direct use\nexport { testCases };\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/integrations/supabase/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/lib/database.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/lib/supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/pages/Auth.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":244,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7955,7958],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7955,7958],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { toast } from \"sonner\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { supabase } from \"@/lib/supabase\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nconst Auth = () => {\n  const navigate = useNavigate();\n  const { type } = useParams<{ type: string }>();\n  const [isLoading, setIsLoading] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [verificationCode, setVerificationCode] = useState(\"\");\n  const [showVerification, setShowVerification] = useState(false);\n  const [showPasswordCreation, setShowPasswordCreation] = useState(false);\n\n  const handleSendCode = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const { error } = await supabase.auth.signInWithOtp({\n        email,\n        options: {\n          shouldCreateUser: true,\n          data: {\n            type\n          }\n        }\n      });\n      if (error) throw error;\n      \n      toast.success(\"Check your email for the verification code!\");\n      setShowVerification(true);\n    } catch (error) {\n      console.error('Error:', error);\n      toast.error(error instanceof Error ? error.message : \"An error occurred\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleVerifyCode = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const { error } = await supabase.auth.verifyOtp({\n        email,\n        token: verificationCode,\n        type: \"signup\"\n      });\n      if (error) throw error;\n      \n      setShowPasswordCreation(true);\n      toast.success(\"Email verified! Please set your password.\");\n    } catch (error) {\n      console.error('Error:', error);\n      toast.error(error instanceof Error ? error.message : \"Invalid verification code\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSetPassword = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const { error } = await supabase.auth.updateUser({\n        password: password\n      });\n      if (error) throw error;\n      toast.success(\"Registration complete!\");\n      navigate(`/${type}/profile`);\n    } catch (error) {\n      console.error('Error:', error);\n      toast.error(error instanceof Error ? error.message : \"Failed to set password\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const { error } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (error) throw error;\n      navigate(`/${type}/dashboard`);\n    } catch (error) {\n      console.error('Error:', error);\n      toast.error(error instanceof Error ? error.message : \"Invalid credentials\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const renderRegistrationForm = () => {\n    if (showPasswordCreation) {\n      return (\n        <form onSubmit={handleSetPassword} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Create Password</Label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              placeholder=\"Enter your password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              required\n              minLength={6}\n            />\n          </div>\n          <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n            {isLoading ? \"Creating account...\" : \"Complete Registration\"}\n          </Button>\n        </form>\n      );\n    }\n\n    if (showVerification) {\n      return (\n        <form onSubmit={handleVerifyCode} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email address</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={email}\n              disabled\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"code\">Enter 6-Character Verification Code</Label>\n            <Input\n              id=\"code\"\n              type=\"text\"\n              placeholder=\"ABCD12\"\n              value={verificationCode}\n              onChange={(e) => {\n                const value = e.target.value.toUpperCase().slice(0, 6);\n                setVerificationCode(value);\n              }}\n              required\n              maxLength={6}\n            />\n          </div>\n          <Button type=\"submit\" className=\"w-full\" disabled={isLoading || verificationCode.length !== 6}>\n            {isLoading ? \"Verifying...\" : \"Verify Code\"}\n          </Button>\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            className=\"w-full\"\n            onClick={handleSendCode}\n            disabled={isLoading}\n          >\n            Resend Code\n          </Button>\n        </form>\n      );\n    }\n\n    return (\n      <form onSubmit={handleSendCode} className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"registerEmail\">Email address</Label>\n          <Input\n            id=\"registerEmail\"\n            type=\"email\"\n            placeholder=\"Enter your email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            required\n          />\n        </div>\n        <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n          {isLoading ? \"Sending code...\" : \"Send Verification Code\"}\n        </Button>\n      </form>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center p-6 page-transition\">\n      <Card className=\"w-full max-w-md p-6 space-y-6\">\n        <div className=\"flex items-center gap-2 mb-6\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => navigate(\"/\")}\n            className=\"rounded-full\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <h1 className=\"text-2xl font-semibold\">\n            {type === 'seeker' ? 'Job Seeker' : 'Business'} Account\n          </h1>\n        </div>\n\n        {!showVerification && !showPasswordCreation ? (\n          <Tabs defaultValue=\"register\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"register\">Register</TabsTrigger>\n              <TabsTrigger value=\"login\">Log in</TabsTrigger>\n            </TabsList>\n            <TabsContent value=\"register\">\n              {renderRegistrationForm()}\n            </TabsContent>\n            <TabsContent value=\"login\">\n              <form onSubmit={handleLogin} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"loginEmail\">Email address</Label>\n                  <Input\n                    id=\"loginEmail\"\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <Label htmlFor=\"loginPassword\">Password</Label>\n                    <Button\n                      variant=\"link\"\n                      className=\"px-0\"\n                      type=\"button\"\n                      onClick={() => {\n                        setShowVerification(false);\n                        setShowPasswordCreation(false);\n                        handleSendCode(new Event('click') as any);\n                      }}\n                    >\n                      Forgot password?\n                    </Button>\n                  </div>\n                  <Input\n                    id=\"loginPassword\"\n                    type=\"password\"\n                    placeholder=\"Enter your password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    required\n                  />\n                </div>\n                <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                  {isLoading ? \"Logging in...\" : \"Log in\"}\n                </Button>\n              </form>\n            </TabsContent>\n          </Tabs>\n        ) : (\n          renderRegistrationForm()\n        )}\n      </Card>\n    </div>\n  );\n};\n\nexport default Auth;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/pages/AuthPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/pages/Index.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[811,814],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[811,814],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2207,2210],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2207,2210],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2642,2645],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2642,2645],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Card } from \"@/components/ui/card\";\nimport { Building2, User, Briefcase, BarChart2 } from \"lucide-react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { RegistrationProcess } from \"@/components/landing/RegistrationProcess\";\nimport { ContractProcessExplanation } from \"@/components/landing/ContractProcessExplanation\";\n\ninterface FeaturedProject {\n  project_id: string;\n  title: string;\n  description: string;\n  equity_allocation: number;\n  skills_required: string[];\n  sub_tasks: {\n    task_id: string;\n    title: string;\n    description: string;\n    equity_allocation: number;\n    skill_requirements: any[];\n  }[];\n  company_name?: string;\n  businesses?: {\n    company_name?: string;\n  };\n}\n\nconst Index = () => {\n  const navigate = useNavigate();\n  const [featuredProjects, setFeaturedProjects] = useState<FeaturedProject[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchFeaturedProjects = async () => {\n      try {\n        setIsLoading(true);\n        const { data, error } = await supabase\n          .from(\"business_projects\")\n          .select(`\n            project_id,\n            title,\n            description,\n            equity_allocation,\n            skills_required,\n            businesses(company_name),\n            project_sub_tasks:project_sub_tasks(\n              task_id,\n              title,\n              description,\n              equity_allocation,\n              skill_requirements\n            )\n          `)\n          .eq(\"status\", \"active\")\n          .limit(4);\n\n        if (error) throw error;\n\n        const processedData: FeaturedProject[] = data.map((project) => {\n          let companyName = \"Unknown Company\";\n          if (project.businesses) {\n            if (Array.isArray(project.businesses)) {\n              companyName = project.businesses[0]?.company_name || \"Unknown Company\";\n            } else if (project.businesses && typeof project.businesses === \"object\") {\n              companyName = (project.businesses as any).company_name || \"Unknown Company\";\n            }\n          }\n\n          return {\n            project_id: project.project_id,\n            title: project.title,\n            description: project.description,\n            equity_allocation: project.equity_allocation,\n            skills_required: project.skills_required || [],\n            company_name: companyName,\n            sub_tasks: (project.project_sub_tasks || []).map((task: any) => ({\n              task_id: task.task_id,\n              title: task.title,\n              description: task.description,\n              equity_allocation: task.equity_allocation,\n              skill_requirements: task.skill_requirements || [],\n            })),\n          };\n        });\n\n        setFeaturedProjects(processedData);\n      } catch (error) {\n        console.error(\"Error fetching featured projects:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchFeaturedProjects();\n  }, []);\n\n  const userTypes = [\n    {\n      title: \"Job Seeker\",\n      description: \"Find your next opportunity and showcase your skills\",\n      icon: User,\n      type: \"seeker\" as const,\n      path: \"/auth/seeker\",\n    },\n    {\n      title: \"Business\",\n      description: \"Post jobs and find the perfect candidates\",\n      icon: Building2,\n      type: \"business\" as const,\n      path: \"/auth/business\",\n    },\n  ];\n\n  return (\n    <div>\n      <header className=\"bg-gradient-to-r from-primary/20 to-primary/10 py-16 md:py-24\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">\n            Exchange <span className=\"text-primary\">Skills</span> for <span className=\"text-primary\">Equity</span>\n          </h1>\n          <p className=\"text-xl md:text-2xl mb-8 max-w-3xl mx-auto\">\n            Connect job seekers with businesses looking to offer equity in exchange for skills and experience.\n             <br /> \n             <br /> Let's start by registering or logging in.\n          </p>\n                    <div className=\"grid md:grid-cols-2 gap-6 w-full max-w-4xl mx-auto mb-12\">\n            {userTypes.map((type) => (\n              <Card\n                key={type.type}\n                className=\"p-6 landing-card hover:shadow-md transition-shadow cursor-pointer\"\n                onClick={() => navigate(type.path)}\n              >\n                <div className=\"flex flex-col items-center text-center h-full\">\n                  <div className=\"mb-4 p-3 rounded-full bg-accent/10 text-accent\">\n                    <type.icon size={24} />\n                  </div>\n                  <h2 className=\"text-xl font-semibold mb-2\">{type.title}</h2>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {type.description}\n                  </p>\n                </div>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </header>\n\n      <section className=\"py-16 bg-slate-50/50\">\n        <div className=\"container\">\n          <RegistrationProcess />\n        </div>\n      </section>\n\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-4 md:px-6\">\n          <ContractProcessExplanation />\n        </div>\n      </section>\n\n      <div className=\"w-full max-w-6xl mx-auto text-center mb-8\">\n        <h2 className=\"text-2xl font-semibold mb-6\">Featured Equity Projects</h2>\n\n        {isLoading ? (\n          <div className=\"grid md:grid-cols-2 gap-6 justify-center\">\n            {[1, 2, 3, 4].map((i) => (\n              <Card key={i} className=\"p-6 h-64 animate-pulse bg-muted/50\"></Card>\n            ))}\n          </div>\n        ) : (\n          <div className=\"grid md:grid-cols-2 gap-6 justify-center\">\n            {featuredProjects.map((project) => (\n              <Card key={project.project_id} className=\"p-6 hover:shadow-md transition-shadow\">\n                <h3 className=\"text-lg font-semibold\">{project.title}</h3>\n                <p className=\"text-sm text-muted-foreground\">{project.company_name}</p>\n                <p className=\"text-sm mb-4 line-clamp-2\">{project.description}</p>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Index;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/pages/Login/Business.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/pages/Login/Recruiter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/pages/Login/Seeker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/pages/NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/pages/ProfileCompletePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/pages/Register/Business.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/pages/Register/Recruiter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/pages/Register/Seeker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/pages/dashboards/AdminDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1135,1138],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1135,1138],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1192,1195],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1192,1195],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { supabase } from \"@/lib/supabase\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Button } from \"@/components/ui/button\";\nimport { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ShieldCheck, Users, Briefcase, FileText, LogOut, PieChart as PieChartIcon } from \"lucide-react\";\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];\n\nconst AdminDashboard = () => {\n  const navigate = useNavigate();\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [userStats, setUserStats] = useState({\n    totalUsers: 0,\n    businessUsers: 0,\n    jobSeekers: 0\n  });\n  const [projectStats, setProjectStats] = useState({\n    totalProjects: 0,\n    activeProjects: 0,\n    completedProjects: 0\n  });\n  const [applicationStats, setApplicationStats] = useState<any[]>([]);\n  const [taskStats, setTaskStats] = useState<any[]>([]);\n\n  useEffect(() => {\n    const checkAdminAccess = async () => {\n      try {\n        const { data: { session } } = await supabase.auth.getSession();\n        \n        if (!session) {\n          navigate('/');\n          return;\n        }\n        \n        // For demo purposes - in production, you would have a proper admin role check\n        const adminEmails = ['admin@sweaquity.com', 'your-admin-email@example.com'];\n        const isAdminUser = adminEmails.includes(session.user.email as string);\n        \n        if (!isAdminUser) {\n          navigate('/');\n          return;\n        }\n        \n        setIsAdmin(true);\n        fetchDashboardData();\n      } catch (error) {\n        console.error(\"Error checking admin access:\", error);\n        navigate('/');\n      }\n    };\n    \n    checkAdminAccess();\n  }, [navigate]);\n\n  const fetchDashboardData = async () => {\n    setIsLoading(true);\n    try {\n      // Fetch user statistics\n      const { count: businessCount } = await supabase\n        .from('businesses')\n        .select('*', { count: 'exact', head: true });\n      \n      const { count: profileCount } = await supabase\n        .from('profiles')\n        .select('*', { count: 'exact', head: true });\n      \n      setUserStats({\n        totalUsers: (businessCount || 0) + (profileCount || 0),\n        businessUsers: businessCount || 0,\n        jobSeekers: profileCount || 0\n      });\n      \n      // Fetch project statistics\n      const { data: projects, error: projectError } = await supabase\n        .from('business_projects')\n        .select('status');\n      \n      if (projectError) throw projectError;\n      \n      const activeProjects = projects.filter(p => p.status === 'active').length;\n      const completedProjects = projects.filter(p => p.status === 'completed').length;\n      \n      setProjectStats({\n        totalProjects: projects.length,\n        activeProjects,\n        completedProjects\n      });\n      \n      // Fetch application statistics by status\n      const { data: applications, error: appError } = await supabase\n        .from('job_applications')\n        .select('status');\n      \n      if (appError) throw appError;\n      \n      const appStatusCounts: Record<string, number> = {};\n      applications.forEach(app => {\n        const status = app.status.toLowerCase();\n        appStatusCounts[status] = (appStatusCounts[status] || 0) + 1;\n      });\n      \n      const appStats = Object.entries(appStatusCounts).map(([name, value]) => ({\n        name,\n        value\n      }));\n      \n      setApplicationStats(appStats);\n      \n      // Fetch task statistics by status\n      const { data: tasks, error: taskError } = await supabase\n        .from('project_sub_tasks')\n        .select('status');\n      \n      if (taskError) throw taskError;\n      \n      const taskStatusCounts: Record<string, number> = {};\n      tasks.forEach(task => {\n        const status = task.status.toLowerCase();\n        taskStatusCounts[status] = (taskStatusCounts[status] || 0) + 1;\n      });\n      \n      const taskStats = Object.entries(taskStatusCounts).map(([name, value]) => ({\n        name,\n        value\n      }));\n      \n      setTaskStats(taskStats);\n      \n    } catch (error) {\n      console.error(\"Error fetching dashboard data:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSignOut = async () => {\n    try {\n      await supabase.auth.signOut();\n      navigate('/');\n    } catch (error) {\n      console.error(\"Error signing out:\", error);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin h-12 w-12 border-4 border-primary border-t-transparent rounded-full\"></div>\n      </div>\n    );\n  }\n\n  if (!isAdmin) {\n    return null; // Will redirect in useEffect\n  }\n\n  return (\n    <div className=\"min-h-screen p-4 md:p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <div className=\"flex items-center gap-2\">\n            <ShieldCheck className=\"h-8 w-8 text-primary\" />\n            <h1 className=\"text-2xl font-bold\">Admin Dashboard</h1>\n          </div>\n          <Button variant=\"outline\" onClick={handleSignOut}>\n            <LogOut className=\"h-4 w-4 mr-2\" />\n            Sign Out\n          </Button>\n        </div>\n\n        <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n          <TabsList className=\"grid grid-cols-3 w-full md:w-auto\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"applications\">Applications</TabsTrigger>\n            <TabsTrigger value=\"tasks\">Tasks</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n              <Card>\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                    <Users className=\"h-4 w-4 text-blue-500\" />\n                    Users\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{userStats.totalUsers}</div>\n                  <div className=\"text-xs text-muted-foreground mt-1\">\n                    {userStats.businessUsers} businesses, {userStats.jobSeekers} job seekers\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                    <Briefcase className=\"h-4 w-4 text-green-500\" />\n                    Projects\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{projectStats.totalProjects}</div>\n                  <div className=\"text-xs text-muted-foreground mt-1\">\n                    {projectStats.activeProjects} active, {projectStats.completedProjects} completed\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                    <FileText className=\"h-4 w-4 text-yellow-500\" />\n                    Applications\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{applicationStats.reduce((sum, item) => sum + item.value, 0)}</div>\n                  <div className=\"text-xs text-muted-foreground mt-1\">\n                    Across all projects\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg font-medium\">User Distribution</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-[300px] flex items-center justify-center\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <PieChart>\n                        <Pie\n                          data={[\n                            { name: 'Job Seekers', value: userStats.jobSeekers },\n                            { name: 'Businesses', value: userStats.businessUsers }\n                          ]}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          labelLine={false}\n                          outerRadius={80}\n                          fill=\"#8884d8\"\n                          dataKey=\"value\"\n                          label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                        >\n                          {[\n                            { name: 'Job Seekers', value: userStats.jobSeekers },\n                            { name: 'Businesses', value: userStats.businessUsers }\n                          ].map((entry, index) => (\n                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                          ))}\n                        </Pie>\n                        <Tooltip />\n                        <Legend />\n                      </PieChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg font-medium\">Application Status</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-[300px]\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <BarChart\n                        width={500}\n                        height={300}\n                        data={applicationStats}\n                        margin={{\n                          top: 5,\n                          right: 30,\n                          left: 20,\n                          bottom: 5,\n                        }}\n                      >\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"name\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Legend />\n                        <Bar dataKey=\"value\" fill=\"#8884d8\" />\n                      </BarChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"applications\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Application Status Breakdown</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-[400px]\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <PieChart>\n                      <Pie\n                        data={applicationStats}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        labelLine={true}\n                        outerRadius={150}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                        label={({ name, value, percent }) => `${name}: ${value} (${(percent * 100).toFixed(0)}%)`}\n                      >\n                        {applicationStats.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                      <Legend />\n                    </PieChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"tasks\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Task Status Breakdown</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-[400px]\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart\n                      width={500}\n                      height={300}\n                      data={taskStats}\n                      margin={{\n                        top: 5,\n                        right: 30,\n                        left: 20,\n                        bottom: 5,\n                      }}\n                    >\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"name\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Legend />\n                      <Bar dataKey=\"value\" fill=\"#82ca9d\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminDashboard;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/pages/dashboards/BusinessDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1860,1863],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1860,1863],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3377,3380],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3377,3380],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3689,3692],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3689,3692],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3767,3770],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3767,3770],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Card, CardHeader, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { supabase } from \"@/lib/supabase\";\nimport { toast } from \"sonner\";\nimport { ProjectsSection } from \"@/components/business/ProjectsSection\";\nimport { BusinessProfileCompletion } from \"@/components/business/BusinessProfileCompletion\";\nimport { UserCircle2, Menu } from \"lucide-react\";\nimport { ActiveRolesTable } from \"@/components/business/roles/ActiveRolesTable\";\nimport { ProjectApplicationsSection } from \"@/components/business/ProjectApplicationsSection\";\nimport { RequestAccessButton } from \"@/components/business/users/RequestAccessButton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { AccountSettingsCard } from \"@/components/shared/AccountSettingsCard\";\nimport { BusinessProfileEditor } from \"@/components/business/profile/BusinessProfileEditor\";\nimport { LiveProjectsTab } from \"@/components/business/projects/LiveProjectsTab\";\n\ninterface SubTask {\n  id: string;\n  title: string;\n  description: string;\n  status: string;\n  equity_allocation: number;\n  timeframe: string;\n  skill_requirements: Array<{ skill: string; level: string }>;\n}\n\ninterface Project {\n  id: string;\n  title: string;\n  description: string;\n  status: string;\n  tasks: SubTask[];\n  equity_allocation: number;\n  equity_allocated: number;\n  skills_required: string[];\n}\n\nconst BusinessDashboard = () => {\n  const navigate = useNavigate();\n  const [isLoading, setIsLoading] = useState(true);\n  const [businessData, setBusinessData] = useState<any>(null);\n  const [hasJobSeekerProfile, setHasJobSeekerProfile] = useState(true);\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [newApplicationsCount, setNewApplicationsCount] = useState(0);\n  const [newMessagesCount, setNewMessagesCount] = useState(0);\n  const [isEditingProfile, setIsEditingProfile] = useState(false);\n  const [userId, setUserId] = useState<string | undefined>(undefined);\n  const [activeTab, setActiveTab] = useState(\"account\");\n  const [selectedProject, setSelectedProject] = useState<string | null>(null);\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) {\n        navigate('/auth/business');\n        return;\n      }\n\n      setUserId(session.user.id);\n\n      try {\n        const { data: businessData, error: businessError } = await supabase\n          .from('businesses')\n          .select('*')\n          .eq('businesses_id', session.user.id)\n          .maybeSingle();\n\n        if (businessError) throw businessError;\n        \n        console.log(\"Business profile check:\", businessData);\n        setBusinessData(businessData);\n\n        const { data: projectsData, error: projectsError } = await supabase\n          .from('business_projects')\n          .select('*')\n          .eq('business_id', session.user.id);\n\n        if (projectsError) throw projectsError;\n        \n        if (projectsData && projectsData.length > 0) {\n          const projectIds = projectsData.map((p: any) => p.project_id);\n\n          const { data: tasksData, error: tasksError } = await supabase\n            .from('project_sub_tasks')\n            .select('*')\n            .in('project_id', projectIds);\n\n          if (tasksError) throw tasksError;\n\n          const projectsWithTasks = projectsData.map((project: any) => ({\n            ...project,\n            tasks: tasksData.filter((task: any) => task.project_id === project.project_id) || []\n          }));\n\n          setProjects(projectsWithTasks);\n        }\n\n        const oneDayAgo = new Date();\n        oneDayAgo.setDate(oneDayAgo.getDate() - 1);\n        \n        const { data: recentApps, error: recentAppsError } = await supabase\n          .from('job_applications')\n          .select('applied_at, task_discourse, status')\n          .gte('applied_at', oneDayAgo.toISOString())\n          .eq('status', 'pending');\n          \n        if (recentAppsError) throw recentAppsError;\n        \n        setNewApplicationsCount(recentApps?.length || 0);\n        \n        const { data: recentMsgs, error: recentMsgsError } = await supabase\n          .from('job_applications')\n          .select('task_discourse, updated_at')\n          .gte('updated_at', oneDayAgo.toISOString())\n          .neq('task_discourse', null);\n          \n        if (recentMsgsError) throw recentMsgsError;\n        \n        const newMsgs = recentMsgs?.filter(msg => {\n          if (!msg.task_discourse) return false;\n          \n          const lastMessageMatch = msg.task_discourse.match(/\\[([^\\]]+)\\]/);\n          if (lastMessageMatch) {\n            try {\n              const msgDate = new Date(lastMessageMatch[1]);\n              return msgDate > oneDayAgo;\n            } catch (e) {\n              return false;\n            }\n          }\n          return false;\n        });\n        \n        setNewMessagesCount(newMsgs?.length || 0);\n\n        const { data: profileData } = await supabase\n          .from('profiles')\n          .select('id')\n          .eq('id', session.user.id)\n          .maybeSingle();\n\n        console.log(\"Job seeker profile check:\", profileData);\n        setHasJobSeekerProfile(!!profileData);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        toast.error(\"Failed to load dashboard data\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkAuth();\n    \n    const channel = supabase\n      .channel('dashboard-updates')\n      .on(\n        'postgres_changes',\n        {\n          event: 'INSERT',\n          schema: 'public',\n          table: 'job_applications'\n        },\n        () => {\n          setNewApplicationsCount(prev => prev + 1);\n          toast.info(\"New application received!\");\n        }\n      )\n      .on(\n        'postgres_changes',\n        {\n          event: 'UPDATE',\n          schema: 'public',\n          table: 'job_applications',\n          filter: 'task_discourse=neq.null'\n        },\n        () => {\n          setNewMessagesCount(prev => prev + 1);\n          toast.info(\"New message received!\");\n        }\n      )\n      .subscribe();\n      \n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, [navigate]);\n\n  const handleSignOut = async () => {\n    const { error } = await supabase.auth.signOut();\n    if (error) {\n      toast.error(\"Failed to sign out\");\n    } else {\n      navigate('/auth/business');\n    }\n  };\n\n  const handleProfileSwitch = () => {\n    console.log(\"Switching to job seeker profile\");\n    navigate('/seeker/dashboard');\n  };\n\n  const handleTabChange = (value: string) => {\n    setActiveTab(value);\n    if (value === 'applications') {\n      setNewApplicationsCount(0);\n    }\n    if (value === 'roles') {\n      setNewMessagesCount(0);\n    }\n  };\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center min-h-screen\">Loading...</div>;\n  }\n\n  if (isEditingProfile) {\n    return <BusinessProfileCompletion />;\n  }\n\n  if (!businessData?.company_name || !businessData?.industry || !businessData?.terms_accepted) {\n    return <BusinessProfileCompletion />;\n  }\n\n  return (\n    <div className=\"min-h-screen p-4 md:p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h1 className=\"text-xl md:text-2xl font-bold\">\n            {businessData?.company_name} Dashboard\n          </h1>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"hidden md:flex items-center gap-4\">\n              {hasJobSeekerProfile && (\n                <Button variant=\"outline\" onClick={handleProfileSwitch}>\n                  <UserCircle2 className=\"mr-2 h-4 w-4\" />\n                  Switch to Job Seeker\n                </Button>\n              )}\n              <Button variant=\"outline\" onClick={handleSignOut}>Sign Out</Button>\n            </div>\n            \n            <div className=\"flex md:hidden\">\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"outline\" size=\"icon\">\n                    <Menu className=\"h-5 w-5\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  {hasJobSeekerProfile && (\n                    <DropdownMenuItem onClick={handleProfileSwitch}>\n                      <UserCircle2 className=\"mr-2 h-4 w-4\" />\n                      Switch to Job Seeker\n                    </DropdownMenuItem>\n                  )}\n                  <DropdownMenuItem onClick={handleSignOut}>\n                    Sign Out\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>\n        </div>\n\n        <Tabs value={activeTab} className=\"space-y-6\" onValueChange={handleTabChange}>\n          <TabsList className=\"w-full grid grid-cols-6 md:flex md:w-auto\">\n            <TabsTrigger value=\"account\" className=\"px-3 py-1.5\">Account</TabsTrigger>\n            <TabsTrigger value=\"users\" className=\"px-3 py-1.5\">Users</TabsTrigger>\n            <TabsTrigger value=\"projects\" className=\"px-3 py-1.5\">Projects</TabsTrigger>\n            <TabsTrigger value=\"applications\" className=\"px-3 py-1.5 relative\">\n              Applications\n              {newApplicationsCount > 0 && (\n                <Badge className=\"absolute -top-2 -right-2 bg-red-500 text-white h-5 w-5 flex items-center justify-center p-0 rounded-full\">\n                  {newApplicationsCount}\n                </Badge>\n              )}\n            </TabsTrigger>\n            <TabsTrigger value=\"roles\" className=\"px-3 py-1.5 relative\">\n              Active Roles\n              {newMessagesCount > 0 && (\n                <Badge className=\"absolute -top-2 -right-2 bg-red-500 text-white h-5 w-5 flex items-center justify-center p-0 rounded-full\">\n                  {newMessagesCount}\n                </Badge>\n              )}\n            </TabsTrigger>\n            <TabsTrigger value=\"live-projects\" className=\"px-3 py-1.5\">Live Projects</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"account\">\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between\">\n                  <h2 className=\"text-lg font-semibold\">Business Details</h2>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"p-2\">\n                    <BusinessProfileEditor\n                      businessProfile={businessData}\n                      onProfileUpdate={() => {\n                        toast.success(\"Profile updated successfully\");\n                        window.location.reload();\n                      }}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <AccountSettingsCard userType=\"business\" />\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"users\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <h2 className=\"text-lg font-semibold\">Business Users</h2>\n                <RequestAccessButton />\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">No users have been added to your business yet. Use the \"Request Access\" button to invite team members.</p>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"projects\">\n            <ProjectsSection />\n          </TabsContent>\n\n          <TabsContent value=\"applications\">\n            <ProjectApplicationsSection />\n          </TabsContent>\n\n          <TabsContent value=\"roles\">\n            <Card>\n              <CardHeader>\n                <h2 className=\"text-lg font-semibold\">Active Project Roles</h2>\n                <div className=\"text-sm text-muted-foreground\">\n                  These are the projects with active applications on live projects, and the progress of completion of the projects.\n                </div>\n              </CardHeader>\n              <CardContent>\n                {projects.length === 0 ? (\n                  <p className=\"text-muted-foreground\">No active projects found.</p>\n                ) : (\n                  projects.map((project, index) => (\n                    <div key={project.id || index} className=\"mb-6\">\n                      <h3 className=\"text-lg font-medium mb-2\">{project.title}</h3>\n                      {project.tasks.length === 0 ? (\n                        <p className=\"text-sm text-muted-foreground\">No tasks available for this project.</p>\n                      ) : (\n                        <ActiveRolesTable project={project} />\n                      )}\n                    </div>\n                  ))\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"live-projects\">\n            <LiveProjectsTab businessId={userId || ''} />\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n};\n\nexport default BusinessDashboard;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/pages/dashboards/JobSeekerDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/pages/dashboards/RecruiterDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[693,696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[693,696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Card, CardHeader, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { supabase } from \"@/lib/supabase\";\nimport { toast } from \"sonner\";\n\nconst RecruiterDashboard = () => {\n  const navigate = useNavigate();\n  const [isLoading, setIsLoading] = useState(true);\n  const [organizationData, setOrganizationData] = useState<any>(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [isBankingEditing, setIsBankingEditing] = useState(false);\n  const [formData, setFormData] = useState({\n    company_name: \"\",\n    organization_type: \"\",\n    equity_recruiting: \"no\",\n    specializations: [],\n    geographic_scope: [],\n    banking_details: {\n      account_name: \"\",\n      account_number: \"\",\n      sort_code: \"\",\n      bank_name: \"\"\n    }\n  });\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const { data: { session } } = await supabase.auth.getSession();\n        if (!session) {\n          navigate('/auth/recruiter');\n          return;\n        }\n\n        // Try to fetch organization data if parent account\n        const { data: orgData, error: orgError } = await supabase\n          .from('recruiter_organizations')\n          .select('*')\n          .eq('id', session.user.id)\n          .maybeSingle();\n\n        if (!orgError && orgData) {\n          setOrganizationData(orgData);\n          setFormData({\n            company_name: orgData.company_name || \"\",\n            organization_type: orgData.organization_type || \"\",\n            equity_recruiting: orgData.equity_recruiting || \"no\",\n            specializations: orgData.specializations || [],\n            geographic_scope: orgData.geographic_scope || [],\n            banking_details: orgData.banking_details || {\n              account_name: \"\",\n              account_number: \"\",\n              sort_code: \"\",\n              bank_name: \"\"\n            }\n          });\n        } else {\n          // Try to fetch recruiter data if member account\n          const { data: recruiterData, error: recruiterError } = await supabase\n            .from('recruiters')\n            .select('*, recruiter_organizations(*)')\n            .eq('id', session.user.id)\n            .maybeSingle();\n\n          if (!recruiterError && recruiterData?.recruiter_organizations) {\n            setOrganizationData(recruiterData.recruiter_organizations);\n            setFormData({\n              company_name: recruiterData.recruiter_organizations.company_name || \"\",\n              organization_type: recruiterData.recruiter_organizations.organization_type || \"\",\n              equity_recruiting: recruiterData.recruiter_organizations.equity_recruiting || \"no\",\n              specializations: recruiterData.recruiter_organizations.specializations || [],\n              geographic_scope: recruiterData.recruiter_organizations.geographic_scope || [],\n              banking_details: recruiterData.recruiter_organizations.banking_details || {\n                account_name: \"\",\n                account_number: \"\",\n                sort_code: \"\",\n                bank_name: \"\"\n              }\n            });\n          } else {\n            toast.error(\"No organization data found\");\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        toast.error(\"Failed to load dashboard data\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkAuth();\n  }, [navigate]);\n\n  const handleSignOut = async () => {\n    const { error } = await supabase.auth.signOut();\n    if (error) {\n      toast.error(\"Failed to sign out\");\n    } else {\n      navigate('/auth/recruiter');\n    }\n  };\n\n  const handleSaveProfile = async () => {\n    if (!organizationData?.id) {\n      toast.error(\"No organization ID found\");\n      return;\n    }\n\n    try {\n      const { error } = await supabase\n        .from('recruiter_organizations')\n        .update({\n          company_name: formData.company_name,\n          organization_type: formData.organization_type,\n          equity_recruiting: formData.equity_recruiting,\n          specializations: formData.specializations,\n          geographic_scope: formData.geographic_scope\n        })\n        .eq('id', organizationData.id);\n\n      if (error) throw error;\n      setOrganizationData({ ...organizationData, ...formData });\n      setIsEditing(false);\n      toast.success(\"Profile updated successfully\");\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      toast.error(\"Failed to update profile\");\n    }\n  };\n\n  const handleSaveBanking = async () => {\n    if (!organizationData?.id) {\n      toast.error(\"No organization ID found\");\n      return;\n    }\n\n    try {\n      const { error } = await supabase\n        .from('recruiter_organizations')\n        .update({\n          banking_details: formData.banking_details\n        })\n        .eq('id', organizationData.id);\n\n      if (error) throw error;\n      setOrganizationData({ ...organizationData, banking_details: formData.banking_details });\n      setIsBankingEditing(false);\n      toast.success(\"Banking details updated successfully\");\n    } catch (error) {\n      console.error('Error updating banking details:', error);\n      toast.error(\"Failed to update banking details\");\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleBankingInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      banking_details: {\n        ...prev.banking_details,\n        [name]: value\n      }\n    }));\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <p>Loading...</p>\n      </div>\n    );\n  }\n\n  if (!organizationData) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center space-y-4\">\n          <p className=\"text-lg\">No organization data found</p>\n          <Button variant=\"outline\" onClick={handleSignOut}>Sign Out</Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h1 className=\"text-2xl font-bold\">\n            {organizationData.company_name ? `${organizationData.company_name} Dashboard` : 'Recruiter Dashboard'}\n          </h1>\n          <Button variant=\"outline\" onClick={handleSignOut}>Sign Out</Button>\n        </div>\n\n        <Tabs defaultValue=\"account\" className=\"space-y-6\">\n          <TabsList className=\"grid grid-cols-6 w-full\">\n            <TabsTrigger value=\"account\">Account</TabsTrigger>\n            <TabsTrigger value=\"opportunities\">Opportunities</TabsTrigger>\n            <TabsTrigger value=\"activity\">Past Activity</TabsTrigger>\n            <TabsTrigger value=\"applications\">Applications</TabsTrigger>\n            <TabsTrigger value=\"users\">Current Users</TabsTrigger>\n            <TabsTrigger value=\"prior-users\">Prior Users</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"account\">\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between\">\n                  <h2 className=\"text-lg font-semibold\">Organization Details</h2>\n                  {!isEditing ? (\n                    <Button onClick={() => setIsEditing(true)}>Edit Profile</Button>\n                  ) : (\n                    <div className=\"space-x-2\">\n                      <Button onClick={handleSaveProfile}>Save</Button>\n                      <Button variant=\"outline\" onClick={() => setIsEditing(false)}>Cancel</Button>\n                    </div>\n                  )}\n                </CardHeader>\n                <CardContent>\n                  {isEditing ? (\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"company_name\">Company Name</Label>\n                        <Input\n                          id=\"company_name\"\n                          name=\"company_name\"\n                          value={formData.company_name}\n                          onChange={handleInputChange}\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"organization_type\">Organization Type</Label>\n                        <Input\n                          id=\"organization_type\"\n                          name=\"organization_type\"\n                          value={formData.organization_type}\n                          onChange={handleInputChange}\n                        />\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <p className=\"font-semibold\">Company Name</p>\n                        <p>{organizationData.company_name || 'Not specified'}</p>\n                      </div>\n                      <div>\n                        <p className=\"font-semibold\">Organization Type</p>\n                        <p>{organizationData.organization_type || 'Not specified'}</p>\n                      </div>\n                      <div>\n                        <p className=\"font-semibold\">Equity Recruiting</p>\n                        <p>{organizationData.equity_recruiting || 'No'}</p>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between\">\n                  <h2 className=\"text-lg font-semibold\">Banking Details</h2>\n                  {!isBankingEditing ? (\n                    <Button onClick={() => setIsBankingEditing(true)}>Edit Banking Details</Button>\n                  ) : (\n                    <div className=\"space-x-2\">\n                      <Button onClick={handleSaveBanking}>Save</Button>\n                      <Button variant=\"outline\" onClick={() => setIsBankingEditing(false)}>Cancel</Button>\n                    </div>\n                  )}\n                </CardHeader>\n                <CardContent>\n                  {isBankingEditing ? (\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"account_name\">Account Name</Label>\n                        <Input\n                          id=\"account_name\"\n                          name=\"account_name\"\n                          value={formData.banking_details.account_name}\n                          onChange={handleBankingInputChange}\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"account_number\">Account Number</Label>\n                        <Input\n                          id=\"account_number\"\n                          name=\"account_number\"\n                          value={formData.banking_details.account_number}\n                          onChange={handleBankingInputChange}\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"sort_code\">Sort Code</Label>\n                        <Input\n                          id=\"sort_code\"\n                          name=\"sort_code\"\n                          value={formData.banking_details.sort_code}\n                          onChange={handleBankingInputChange}\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"bank_name\">Bank Name</Label>\n                        <Input\n                          id=\"bank_name\"\n                          name=\"bank_name\"\n                          value={formData.banking_details.bank_name}\n                          onChange={handleBankingInputChange}\n                        />\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <p className=\"font-semibold\">Account Name</p>\n                        <p>{formData.banking_details.account_name || 'Not specified'}</p>\n                      </div>\n                      <div>\n                        <p className=\"font-semibold\">Account Number</p>\n                        <p>{formData.banking_details.account_number || 'Not specified'}</p>\n                      </div>\n                      <div>\n                        <p className=\"font-semibold\">Sort Code</p>\n                        <p>{formData.banking_details.sort_code || 'Not specified'}</p>\n                      </div>\n                      <div>\n                        <p className=\"font-semibold\">Bank Name</p>\n                        <p>{formData.banking_details.bank_name || 'Not specified'}</p>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"opportunities\">\n            <Card>\n              <CardHeader>\n                <h2 className=\"text-lg font-semibold\">Relevant Opportunities</h2>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">No opportunities found.</p>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"activity\">\n            <Card>\n              <CardHeader>\n                <h2 className=\"text-lg font-semibold\">Past Activity</h2>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">No past activity found.</p>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"applications\">\n            <Card>\n              <CardHeader>\n                <h2 className=\"text-lg font-semibold\">Current Applications</h2>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">No applications found.</p>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"users\">\n            <Card>\n              <CardHeader>\n                <h2 className=\"text-lg font-semibold\">Current Users</h2>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">No current users found.</p>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"prior-users\">\n            <Card>\n              <CardHeader>\n                <h2 className=\"text-lg font-semibold\">Prior Users</h2>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">No prior users found.</p>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n};\n\nexport default RecruiterDashboard;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/pages/dashboards/SweaquityDashboard.tsx","messages":[{"ruleId":"prefer-const","severity":2,"message":"'notes' is never reassigned. Use 'const' instead.","line":133,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":133,"endColumn":16,"fix":{"range":[4374,4409],"text":"const notes = ticketData.notes || [];"}},{"ruleId":"prefer-const","severity":2,"message":"'notes' is never reassigned. Use 'const' instead.","line":296,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":296,"endColumn":16,"fix":{"range":[9501,9536],"text":"const notes = ticketData.notes || [];"}},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchAllData'. Either include it or remove the dependency array.","line":356,"column":6,"nodeType":"ArrayExpression","endLine":356,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchAllData]","fix":{"range":[11192,11194],"text":"[fetchAllData]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":477,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":477,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15186,15189],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15186,15189],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Users, Building, FileText, Briefcase, CircleDollarSign, AlertTriangle, CheckCircle, Clock, Image } from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { supabase } from \"@/lib/supabase\";\nimport { toast } from \"sonner\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { GanttChartView } from \"@/components/business/testing/GanttChartView\";\nimport { BarChart, Bar, XAxis, YAxis, Legend, ResponsiveContainer, Tooltip as RechartsTooltip } from \"recharts\";\nimport { \n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle \n} from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { AdminTicketManager } from \"@/components/admin/tickets/AdminTicketManager\";\nimport { Task, TaskType, KanbanColumn, DragResult, ApplicationStats } from \"@/types/dashboard\";\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { TicketAttachmentsList } from \"@/components/dashboard/TicketAttachmentsList\";\n\ninterface BetaTicket {\n  id: string;\n  title: string;\n  description: string;\n  status: string;\n  priority: string;\n  health: string;\n  due_date?: string;\n  created_at: string;\n  updated_at: string;\n  reporter_email?: string;\n  reporter?: string;\n  expanded?: boolean;\n  newNote?: string;\n  notes?: Array<{\n    action: string;\n    user: string;\n    timestamp: string;\n    comment?: string;\n  }> | null;\n  system_info?: {\n    url: string;\n    userAgent: string;\n    timestamp: string;\n    viewportSize: string;\n    referrer: string;\n  };\n  reported_url?: string;\n  attachments?: string[];\n  reproduction_steps?: string;\n}\n\ninterface StatisticsData {\n  totalTickets: number;\n  openTickets: number;\n  closedTickets: number;\n  highPriorityTickets: number;\n  byStatus: { [key: string]: number };\n  byPriority: { [key: string]: number };\n}\n\nconst SweaquityDashboard = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [betaTickets, setBetaTickets] = useState<BetaTicket[]>([]);\n  const [replyDialogOpen, setReplyDialogOpen] = useState(false);\n  const [activeTicketId, setActiveTicketId] = useState<string | null>(null);\n  const [replyMessage, setReplyMessage] = useState('');\n  const [showKanban, setShowKanban] = useState(true);\n  const [showGantt, setShowGantt] = useState(true);\n  const [appStats, setAppStats] = useState<ApplicationStats>({\n    totalUsers: 0,\n    totalBusinesses: 0,\n    totalProjects: 0,\n    totalApplications: 0,\n    pendingApplications: 0,\n    acceptedApplications: 0,\n    withdrawnApplications: 0,\n    rejectedApplications: 0,\n    openTasks: 0,\n    completedTasks: 0\n  });\n  \n  const [ticketStats, setTicketStats] = useState<StatisticsData>({\n    totalTickets: 0,\n    openTickets: 0,\n    closedTickets: 0,\n    highPriorityTickets: 0,\n    byStatus: {},\n    byPriority: {}\n  });\n\n  const handleAddTicketNote = async (ticketId: string, note: string) => {\n    if (!note.trim()) return;\n    \n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      \n      if (!user) {\n        toast.error(\"You must be logged in to add notes\");\n        return;\n      }\n      \n      const { data: userData } = await supabase\n        .from('profiles')\n        .select('email, first_name, last_name')\n        .eq('id', user.id)\n        .single();\n        \n      const userName = userData?.first_name \n        ? `${userData.first_name} ${userData.last_name || ''}`\n        : userData?.email || user.email || 'Unknown User';\n      \n      const { data: ticketData, error: fetchError } = await supabase\n        .from('tickets')\n        .select('notes')\n        .eq('id', ticketId)\n        .single();\n        \n      if (fetchError) {\n        console.error(\"Error fetching ticket:\", fetchError);\n        toast.error(\"Failed to add note\");\n        return;\n      }\n      \n      let notes = ticketData.notes || [];\n      \n      notes.push({\n        action: 'Note added',\n        user: userName,\n        timestamp: new Date().toISOString(),\n        comment: note\n      });\n      \n      const { error: updateError } = await supabase\n        .from('tickets')\n        .update({\n          notes: notes,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', ticketId);\n        \n      if (updateError) {\n        console.error(\"Error updating ticket:\", updateError);\n        toast.error(\"Failed to add note\");\n        return;\n      }\n      \n      setBetaTickets(prev => prev.map(t => \n        t.id === ticketId ? {...t, newNote: ''} : t\n      ));\n      \n      await fetchBetaTickets();\n      toast.success(\"Note added successfully\");\n      \n    } catch (err) {\n      console.error(\"Error in handleAddTicketNote:\", err);\n      toast.error(\"Failed to add note\");\n    }\n  };\n\n  const handleUpdateTicketStatus = async (ticketId: string, newStatus: string) => {\n    try {\n      const { error } = await supabase\n        .from('tickets')\n        .update({ status: newStatus })\n        .eq('id', ticketId);\n\n      if (error) {\n        console.error(\"Error updating ticket status:\", error);\n        toast.error(\"Failed to update ticket status\");\n        return;\n      }\n\n      setBetaTickets(prev => prev.map(ticket =>\n        ticket.id === ticketId ? { ...ticket, status: newStatus } : ticket\n      ));\n      calculateTicketStatistics(betaTickets.map(ticket =>\n        ticket.id === ticketId ? { ...ticket, status: newStatus } : ticket\n      ));\n      toast.success(\"Ticket status updated successfully\");\n    } catch (error) {\n      console.error(\"Error updating ticket status:\", error);\n      toast.error(\"Failed to update ticket status\");\n    }\n  };\n\n  const handleUpdateTicketPriority = async (ticketId: string, newPriority: string) => {\n    try {\n      const { error } = await supabase\n        .from('tickets')\n        .update({ priority: newPriority })\n        .eq('id', ticketId);\n\n      if (error) {\n        console.error(\"Error updating ticket priority:\", error);\n        toast.error(\"Failed to update ticket priority\");\n        return;\n      }\n\n      setBetaTickets(prev => prev.map(ticket =>\n        ticket.id === ticketId ? { ...ticket, priority: newPriority } : ticket\n      ));\n      calculateTicketStatistics(betaTickets.map(ticket =>\n        ticket.id === ticketId ? { ...ticket, priority: newPriority } : ticket\n      ));\n      toast.success(\"Ticket priority updated successfully\");\n    } catch (error) {\n      console.error(\"Error updating ticket priority:\", error);\n      toast.error(\"Failed to update ticket priority\");\n    }\n  };\n\n  const handleReplyToReporter = (ticketId: string) => {\n    setActiveTicketId(ticketId);\n    setReplyDialogOpen(true);\n  };\n\n  const sendReplyToReporter = async () => {\n    if (!activeTicketId || !replyMessage.trim()) return;\n    \n    try {\n      const ticket = betaTickets.find(t => t.id === activeTicketId);\n      if (!ticket || !ticket.reporter) {\n        toast.error(\"Cannot find reporter information\");\n        return;\n      }\n      \n      const { data: { user } } = await supabase.auth.getUser();\n      \n      if (!user) {\n        toast.error(\"You must be logged in to reply\");\n        return;\n      }\n      \n      const { data: userData } = await supabase\n        .from('profiles')\n        .select('email, first_name, last_name')\n        .eq('id', user.id)\n        .single();\n        \n      const userName = userData?.first_name \n        ? `${userData.first_name} ${userData.last_name || ''}`\n        : userData?.email || user.email || 'Unknown User';\n      \n      const { error: tableCheckError } = await supabase\n        .from('user_messages')\n        .select('id', { count: 'exact', head: true });\n      \n      if (tableCheckError) {\n        const { error: createTableError } = await supabase.rpc('create_messages_table_if_not_exists');\n        if (createTableError) {\n          console.error(\"Error creating messages table:\", createTableError);\n          toast.error(\"Failed to send reply: messaging system not available\");\n          return;\n        }\n      }\n      \n      const { error: messageError } = await supabase\n        .from('user_messages')\n        .insert({\n          sender_id: user.id,\n          recipient_id: ticket.reporter,\n          subject: `Re: ${ticket.title}`,\n          message: replyMessage,\n          related_ticket: activeTicketId,\n          read: false\n        });\n        \n      if (messageError) {\n        console.error(\"Error sending message:\", messageError);\n        toast.error(\"Failed to send reply to user dashboard, but message recorded in ticket notes\");\n      } else {\n        toast.success(\"Reply sent to reporter's dashboard\");\n      }\n      \n      const { data: ticketData, error: fetchError } = await supabase\n        .from('tickets')\n        .select('notes')\n        .eq('id', activeTicketId)\n        .single();\n        \n      if (fetchError) {\n        console.error(\"Error fetching ticket:\", fetchError);\n        toast.error(\"Failed to update ticket notes\");\n        return;\n      }\n      \n      let notes = ticketData.notes || [];\n      \n      notes.push({\n        action: 'Reply sent to reporter',\n        user: userName,\n        timestamp: new Date().toISOString(),\n        comment: replyMessage\n      });\n      \n      const { error: updateError } = await supabase\n        .from('tickets')\n        .update({\n          notes: notes,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', activeTicketId);\n        \n      if (updateError) {\n        console.error(\"Error updating ticket notes:\", updateError);\n        toast.error(\"Failed to record reply in ticket history\");\n        return;\n      }\n      \n      setReplyDialogOpen(false);\n      setActiveTicketId(null);\n      setReplyMessage('');\n      await fetchBetaTickets();\n      toast.success(\"Reply recorded in ticket history\");\n      \n    } catch (err) {\n      console.error(\"Error in sendReplyToReporter:\", err);\n      toast.error(\"Failed to send reply\");\n    }\n  };\n\n  const handleSetDueDate = async (ticketId: string, newDueDate: string) => {\n    try {\n      const { error } = await supabase\n        .from('tickets')\n        .update({ due_date: newDueDate })\n        .eq('id', ticketId);\n\n      if (error) {\n        console.error(\"Error setting due date:\", error);\n        toast.error(\"Failed to set due date\");\n        return;\n      }\n\n      setBetaTickets(prev => prev.map(ticket =>\n        ticket.id === ticketId ? { ...ticket, due_date: newDueDate } : ticket\n      ));\n      toast.success(\"Due date updated successfully\");\n    } catch (error) {\n      console.error(\"Error setting due date:\", error);\n      toast.error(\"Failed to set due date\");\n    }\n  };\n\n  useEffect(() => {\n    fetchAllData();\n  }, []);\n\n  const fetchAllData = async () => {\n    setIsLoading(true);\n    await Promise.all([\n      fetchDashboardData(),\n      fetchBetaTickets()\n    ]);\n    setIsLoading(false);\n  };\n\n  const fetchDashboardData = async () => {\n    try {\n      const fetchUsersCount = supabase\n        .from('profiles')\n        .select('id', { count: 'exact', head: true });\n        \n      const fetchBusinessesCount = supabase\n        .from('businesses')\n        .select('businesses_id', { count: 'exact', head: true });\n        \n      const fetchProjectsCount = supabase\n        .from('business_projects')\n        .select('project_id', { count: 'exact', head: true });\n        \n      const fetchApplicationsCount = supabase\n        .from('job_applications')\n        .select('job_app_id', { count: 'exact', head: true });\n        \n      const fetchPendingApplications = supabase\n        .from('job_applications')\n        .select('job_app_id', { count: 'exact', head: true })\n        .eq('status', 'pending');\n        \n      const fetchAcceptedApplications = supabase\n        .from('job_applications')\n        .select('job_app_id', { count: 'exact', head: true })\n        .eq('status', 'accepted');\n        \n      const fetchWithdrawnApplications = supabase\n        .from('job_applications')\n        .select('job_app_id', { count: 'exact', head: true })\n        .eq('status', 'withdrawn');\n        \n      const fetchRejectedApplications = supabase\n        .from('job_applications')\n        .select('job_app_id', { count: 'exact', head: true })\n        .eq('status', 'rejected');\n        \n      const fetchOpenTasks = supabase\n        .from('project_sub_tasks')\n        .select('task_id', { count: 'exact', head: true })\n        .eq('status', 'open');\n        \n      const fetchCompletedTasks = supabase\n        .from('project_sub_tasks')\n        .select('task_id', { count: 'exact', head: true })\n        .eq('status', 'completed');\n      \n      const [\n        usersResult,\n        businessesResult,\n        projectsResult,\n        applicationsResult,\n        pendingAppsResult,\n        acceptedAppsResult,\n        withdrawnAppsResult,\n        rejectedAppsResult,\n        openTasksResult,\n        completedTasksResult\n      ] = await Promise.all([\n        fetchUsersCount,\n        fetchBusinessesCount,\n        fetchProjectsCount,\n        fetchApplicationsCount,\n        fetchPendingApplications,\n        fetchAcceptedApplications,\n        fetchWithdrawnApplications,\n        fetchRejectedApplications,\n        fetchOpenTasks,\n        fetchCompletedTasks\n      ]);\n      \n      if (usersResult.error || businessesResult.error || projectsResult.error || applicationsResult.error) {\n        throw new Error(\"Error fetching data\");\n      }\n      \n      setAppStats({\n        totalUsers: usersResult.count || 0,\n        totalBusinesses: businessesResult.count || 0,\n        totalProjects: projectsResult.count || 0,\n        totalApplications: applicationsResult.count || 0,\n        pendingApplications: pendingAppsResult.count || 0,\n        acceptedApplications: acceptedAppsResult.count || 0,\n        withdrawnApplications: withdrawnAppsResult.count || 0,\n        rejectedApplications: rejectedAppsResult.count || 0,\n        openTasks: openTasksResult.count || 0,\n        completedTasks: completedTasksResult.count || 0\n      });\n      \n    } catch (error) {\n      console.error(\"Error fetching dashboard data:\", error);\n      toast.error(\"Failed to load dashboard data\");\n    }\n  };\n\n  const fetchBetaTickets = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('tickets')\n        .select('*')\n        .or('title.ilike.%Beta%,description.ilike.%Beta%,title.ilike.%Testing%')\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        console.error(\"Error fetching beta tickets:\", error);\n        toast.error(\"Failed to load beta tickets\");\n        return;\n      }\n\n      const processedTickets: BetaTicket[] = await Promise.all(\n        data.map(async (ticket: any) => {\n          let reporterEmail = null;\n          \n          if (ticket.reporter) {\n            const { data: profileData } = await supabase\n              .from('profiles')\n              .select('email')\n              .eq('id', ticket.reporter)\n              .maybeSingle();\n              \n            reporterEmail = profileData?.email;\n          }\n          \n          return {\n            ...ticket,\n            reporter_email: reporterEmail,\n            expanded: false,\n            newNote: ''\n          };\n        })\n      );\n\n      setBetaTickets(processedTickets);\n      calculateTicketStatistics(processedTickets);\n    } catch (err) {\n      console.error(\"Error in fetchBetaTickets:\", err);\n      toast.error(\"Failed to load beta tickets data\");\n    }\n  };\n\n  const calculateTicketStatistics = (tickets: BetaTicket[]) => {\n    const totalTickets = tickets.length;\n    const openTickets = tickets.filter(ticket => ticket.status !== 'done' && ticket.status !== 'closed').length;\n    const closedTickets = totalTickets - openTickets;\n    const highPriorityTickets = tickets.filter(ticket => ticket.priority === 'high').length;\n\n    const byStatus: { [key: string]: number } = {};\n    const byPriority: { [key: string]: number } = {};\n\n    tickets.forEach(ticket => {\n      byStatus[ticket.status] = (byStatus[ticket.status] || 0) + 1;\n      byPriority[ticket.priority] = (byPriority[ticket.priority] || 0) + 1;\n    });\n\n    setTicketStats({\n      totalTickets,\n      openTickets,\n      closedTickets,\n      highPriorityTickets,\n      byStatus,\n      byPriority,\n    });\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const handleRefreshData = async () => {\n    setIsLoading(true);\n    await fetchAllData();\n    setIsLoading(false);\n  };\n\n  const toggleTicketExpanded = (ticketId: string) => {\n    setBetaTickets(prev => prev.map(ticket =>\n      ticket.id === ticketId ? { ...ticket, expanded: !ticket.expanded } : ticket\n    ));\n  };\n\n  const getKanbanTickets = () => {\n    const columns = {\n      'new': { id: 'new', title: 'New', ticketIds: [] },\n      'in-progress': { id: 'in-progress', title: 'In Progress', ticketIds: [] },\n      'blocked': { id: 'blocked', title: 'Blocked', ticketIds: [] },\n      'review': { id: 'review', title: 'Review', ticketIds: [] },\n      'done': { id: 'done', title: 'Done', ticketIds: [] },\n      'closed': { id: 'closed', title: 'Closed', ticketIds: [] }\n    };\n    \n    const ticketMap: Record<string, BetaTicket> = {};\n    \n    betaTickets.forEach(ticket => {\n      ticketMap[ticket.id] = ticket;\n      const status = ticket.status || 'new';\n      if (columns[status as keyof typeof columns]) {\n        columns[status as keyof typeof columns].ticketIds.push(ticket.id);\n      } else {\n        columns['new'].ticketIds.push(ticket.id);\n      }\n    });\n    \n    return { columns, tickets: ticketMap };\n  };\n\n  const getGanttTasks = () => {\n    return betaTickets.map((ticket) => {\n      const startDate = new Date(ticket.created_at);\n      let endDate = ticket.due_date ? new Date(ticket.due_date) : new Date();\n      \n      if (!ticket.due_date || endDate < new Date()) {\n        endDate = new Date();\n        endDate.setDate(endDate.getDate() + 7);\n      }\n      \n      return {\n        id: ticket.id,\n        name: ticket.title,\n        start: startDate,\n        end: endDate,\n        type: 'task' as TaskType,\n        progress: ticket.status === 'done' || ticket.status === 'closed' ? 100 : \n                 ticket.status === 'in-progress' ? 50 : \n                 ticket.status === 'review' ? 75 : 25,\n        isDisabled: false,\n        styles: { \n          progressColor: \n            ticket.priority === 'high' ? '#ef4444' : \n            ticket.priority === 'medium' ? '#f59e0b' : '#3b82f6'\n        }\n      };\n    });\n  };\n\n  const StatCard = ({ title, value, icon, isLoading }: { title: string, value: number, icon: React.ReactNode, isLoading: boolean }) => (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div className=\"flex justify-between items-start\">\n          <div>\n            <p className=\"text-sm font-medium text-gray-500\">{title}</p>\n            {isLoading ? (\n              <div className=\"h-8 w-16 bg-gray-200 animate-pulse rounded mt-1\"></div>\n            ) : (\n              <p className=\"text-3xl font-bold mt-1\">{value}</p>\n            )}\n          </div>\n          <div className=\"p-2 bg-blue-50 rounded-full\">\n            {icon}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  const KanbanBoard = () => {\n    const { columns, tickets } = getKanbanTickets();\n    \n    const onDragEnd = (result: DragResult) => {\n      const { source, destination, draggableId } = result;\n      \n      if (!destination) return;\n      if (source.droppableId === destination.droppableId && source.index === destination.index) return;\n      \n      handleUpdateTicketStatus(draggableId, destination.droppableId);\n    };\n    \n    return (\n      <div className=\"overflow-x-auto p-4\">\n        <div className=\"flex space-x-4 min-w-fit\">\n          {Object.values(columns).map(column => (\n            <div key={column.id} className=\"w-64 bg-gray-50 rounded-md p-2\">\n              <h3 className=\"font-medium mb-2\">{column.title} ({column.ticketIds.length})</h3>\n              <div className=\"space-y-2\">\n                {column.ticketIds.map((ticketId) => {\n                  const ticket = tickets[ticketId];\n                  return (\n                    <Card key={ticketId} className={`\n                      p-2 cursor-pointer\n                      ${ticket.priority === 'high' ? 'border-l-4 border-l-red-500' : \n                        ticket.priority === 'medium' ? 'border-l-4 border-l-yellow-500' :\n                        'border-l-4 border-l-blue-500'}`\n                    }>\n                      <div className=\"text-sm font-medium\">{ticket.title}</div>\n                      <div className=\"text-xs text-gray-500 truncate\">{ticket.description}</div>\n                      <div className=\"flex justify-between mt-1\">\n                        <div className=\"text-xs\">{formatDate(ticket.due_date || '')}</div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"h-6 text-xs px-2\"\n                          onClick={() => toggleTicketExpanded(ticket.id)}\n                        >\n                          View\n                        </Button>\n                      </div>\n                    </Card>\n                  );\n                })}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  const ExpandedTicketDetails = ({ ticket }: { ticket: BetaTicket }) => {\n    const [activeTab, setActiveTab] = useState(\"details\");\n    const [hasAttachments, setHasAttachments] = useState(false);\n    const [isCheckingAttachments, setIsCheckingAttachments] = useState(true);\n\n    useEffect(() => {\n      const checkAttachments = async () => {\n        if (ticket.reporter && ticket.id) {\n          setIsCheckingAttachments(true);\n          try {\n            const { data: sessionData } = await supabase.auth.getSession();\n            if (!sessionData.session) {\n              console.error(\"Not authenticated\");\n              setHasAttachments(false);\n              setIsCheckingAttachments(false);\n              return;\n            }\n            \n            console.log(`Checking attachments for ticket: Reporter ID=${ticket.reporter}, Ticket ID=${ticket.id}`);\n            \n            const { data, error } = await supabase.storage\n              .from('ticket-attachments')\n              .list(`${ticket.reporter}/${ticket.id}`);\n            \n            if (error) {\n              console.error(\"Error checking attachments:\", error);\n              setHasAttachments(false);\n            } else {\n              console.log(\"Attachments found:\", data);\n              setHasAttachments(data && data.length > 0);\n            }\n          } catch (err) {\n            console.error(\"Error in checkAttachments:\", err);\n            setHasAttachments(false);\n          } finally {\n            setIsCheckingAttachments(false);\n          }\n        } else {\n          setHasAttachments(false);\n          setIsCheckingAttachments(false);\n        }\n      };\n      \n      checkAttachments();\n    }, [ticket.id, ticket.reporter]);\n    \n    const handleAttachmentsLoaded = (hasFiles: boolean) => {\n      setHasAttachments(hasFiles);\n    };\n\n    return (\n      <div className=\"p-4 border-t\">\n        <div className=\"border-b mb-4\">\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"mb-2\">\n              <TabsTrigger value=\"details\">Details</TabsTrigger>\n              {(hasAttachments || isCheckingAttachments) && (\n                <TabsTrigger value=\"attachments\">\n                  <div className=\"flex items-center\">\n                    <Image className=\"h-4 w-4 mr-1\" />\n                    Attachments\n                    {isCheckingAttachments && (\n                      <span className=\"ml-1 h-3 w-3 rounded-full bg-gray-200 animate-pulse\"></span>\n                    )}\n                  </div>\n                </TabsTrigger>\n              )}\n              <TabsTrigger value=\"activity\">Activity</TabsTrigger>\n            </TabsList>\n          </Tabs>\n        </div>\n\n        <TabsContent value=\"details\" className=\"mt-0\">\n          <div className=\"grid md:grid-cols-2 gap-4 mb-4\">\n            <div>\n              <p className=\"text-sm text-gray-600 mb-2\">{ticket.description}</p>\n              \n              <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                <div>\n                  <span className=\"text-gray-500\">Created: </span>\n                  {formatDate(ticket.created_at)}\n                </div>\n                {ticket.due_date && (\n                  <div>\n                    <span className=\"text-gray-500\">Due: </span>\n                    {formatDate(ticket.due_date)}\n                  </div>\n                )}\n                {ticket.reporter_email && (\n                  <div>\n                    <span className=\"text-gray-500\">Reporter: </span>\n                    {ticket.reporter_email}\n                  </div>\n                )}\n                {ticket.reported_url && (\n                  <div>\n                    <span className=\"text-gray-500\">URL: </span>\n                    <span className=\"text-blue-500 underline\">{ticket.reported_url}</span>\n                  </div>\n                )}\n              </div>\n              \n              {ticket.system_info && (\n                <div className=\"mt-3 p-2 bg-gray-50 rounded text-xs\">\n                  <p className=\"font-medium mb-1\">System Info:</p>\n                  <div className=\"grid grid-cols-2 gap-1\">\n                    <div><span className=\"text-gray-500\">Browser: </span>{ticket.system_info.userAgent}</div>\n                    <div><span className=\"text-gray-500\">Screen: </span>{ticket.system_info.viewportSize}</div>\n                    <div><span className=\"text-gray-500\">Time: </span>{new Date(ticket.system_info.timestamp).toLocaleString()}</div>\n                    <div><span className=\"text-gray-500\">Referrer: </span>{ticket.system_info.referrer}</div>\n                  </div>\n                </div>\n              )}\n            </div>\n            \n            {ticket.attachments && ticket.attachments.length > 0 && (\n              <div>\n                <p className=\"text-sm font-medium mb-2\">Screenshots ({ticket.attachments.length})</p>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  {ticket.attachments.map((url, i) => (\n                    <div key={i} className=\"relative group border rounded overflow-hidden h-36\">\n                      <img \n                        src={url} \n                        alt={`Screenshot ${i+1}`} \n                        className=\"w-full h-full object-cover\"\n                      />\n                      <div className=\"absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 flex items-center justify-center transition-opacity\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          className=\"text-white\"\n                          onClick={() => window.open(url, '_blank')}\n                        >\n                          View Full\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"attachments\" className=\"mt-0\">\n          <TicketAttachmentsList \n            reporterId={ticket.reporter} \n            ticketId={ticket.id} \n            onAttachmentsLoaded={handleAttachmentsLoaded}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"activity\" className=\"mt-0\">\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-medium mb-2\">Activity Timeline</h4>\n            <div className=\"space-y-2 text-sm pl-4 border-l-2 border-gray-200\">\n              {ticket.notes ? (\n                ticket.notes.map((activity, index) => (\n                  <div key={index} className=\"relative pl-4 pb-2\">\n                    <div className=\"absolute w-2 h-2 rounded-full bg-blue-500 -left-[5px]\"></div>\n                    <p className=\"font-medium\">{activity.action}</p>\n                    <p className=\"text-xs text-gray-500\">\n                      {new Date(activity.timestamp).toLocaleString()} by {activity.user}\n                    </p>\n                    {activity.comment && (\n                      <p className=\"mt-1 bg-gray-50 p-2 rounded border border-gray-100\">\n                        {activity.comment}\n                      </p>\n                    )}\n                  </div>\n                ))\n              ) : (\n                <p className=\"text-gray-500 italic\">No activity recorded yet</p>\n              )}\n            </div>\n          </div>\n        </TabsContent>\n        \n        <div className=\"border-t pt-4 flex flex-wrap gap-4\">\n          <div>\n            <Label htmlFor={`status-${ticket.id}`} className=\"text-xs block mb-1\">Update Status</Label>\n            <Select\n              defaultValue={ticket.status}\n              onValueChange={(value) => handleUpdateTicketStatus(ticket.id, value)}\n            >\n              <SelectTrigger id={`status-${ticket.id}`} className=\"w-[140px]\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"new\">New</SelectItem>\n                <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                <SelectItem value=\"blocked\">Blocked</SelectItem>\n                <SelectItem value=\"review\">Review</SelectItem>\n                <SelectItem value=\"done\">Done</SelectItem>\n                <SelectItem value=\"closed\">Closed</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <Label htmlFor={`priority-${ticket.id}`} className=\"text-xs block mb-1\">Update Priority</Label>\n            <Select\n              defaultValue={ticket.priority}\n              onValueChange={(value) => handleUpdateTicketPriority(ticket.id, value)}\n            >\n              <SelectTrigger id={`priority-${ticket.id}`} className=\"w-[140px]\">\n                <SelectValue placeholder=\"Priority\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"low\">Low</SelectItem>\n                <SelectItem value=\"medium\">Medium</SelectItem>\n                <SelectItem value=\"high\">High</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <Label htmlFor={`due-date-${ticket.id}`} className=\"text-xs block mb-1\">Set Due Date</Label>\n            <Input\n              id={`due-date-${ticket.id}`}\n              type=\"date\"\n              className=\"w-[180px]\"\n              value={ticket.due_date ? new Date(ticket.due_date).toISOString().split('T')[0] : ''}\n              onChange={(e) => handleSetDueDate(ticket.id, e.target.value)}\n            />\n          </div>\n          \n          {ticket.reporter && (\n            <div className=\"ml-auto\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => handleReplyToReporter(ticket.id)}\n              >\n                Reply to Reporter\n              </Button>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"mt-4 border-t pt-4\">\n          <Label htmlFor={`note-${ticket.id}`} className=\"text-sm font-medium mb-1 block\">Add Note</Label>\n          <div className=\"flex gap-2\">\n            <Textarea \n              id={`note-${ticket.id}`}\n              placeholder=\"Add a note about this ticket...\"\n              className=\"min-h-[80px]\"\n              value={ticket.newNote || ''}\n              onChange={(e) => {\n                setBetaTickets(prev => prev.map(t => \n                  t.id === ticket.id ? {...t, newNote: e.target.value} : t\n                ));\n              }}\n            />\n            <Button \n              className=\"self-end\" \n              onClick={() => handleAddTicketNote(ticket.id, ticket.newNote || '')}\n            >\n              Add Note\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto min-h-screen\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Sweaquity Admin Dashboard</h1>\n          <p className=\"text-muted-foreground\">Platform management and beta testing</p>\n        </div>\n        <Button variant=\"outline\" size=\"sm\" onClick={handleRefreshData} disabled={isLoading}>\n          {isLoading ? \"Refreshing...\" : \"Refresh Data\"}\n        </Button>\n      </div>\n      \n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"mb-8\">\n        <TabsList className=\"mb-4\">\n          <TabsTrigger value=\"overview\">Platform Overview</TabsTrigger>\n          <TabsTrigger value=\"tickets\">Beta Testing</TabsTrigger>\n          <TabsTrigger value=\"applications\">Applications</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"overview\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <StatCard \n              title=\"Total Users\" \n              value={appStats.totalUsers} \n              icon={<Users className=\"h-8 w-8 text-blue-500\" />} \n              isLoading={isLoading}\n            />\n            <StatCard \n              title=\"Total Businesses\" \n              value={appStats.totalBusinesses} \n              icon={<Building className=\"h-8 w-8 text-purple-500\" />} \n              isLoading={isLoading}\n            />\n            <StatCard \n              title=\"Total Projects\" \n              value={appStats.totalProjects} \n              icon={<Briefcase className=\"h-8 w-8 text-green-500\" />} \n              isLoading={isLoading}\n            />\n            <StatCard \n              title=\"Total Applications\" \n              value={appStats.totalApplications} \n              icon={<FileText className=\"h-8 w-8 text-amber-500\" />} \n              isLoading={isLoading}\n            />\n          </div>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Application Status</CardTitle>\n                <CardDescription>Current distribution of job applications</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <BarChart data={[\n                    { name: 'Pending', value: appStats.pendingApplications },\n                    { name: 'Accepted', value: appStats.acceptedApplications },\n                    { name: 'Withdrawn', value: appStats.withdrawnApplications },\n                    { name: 'Rejected', value: appStats.rejectedApplications }\n                  ]}>\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <RechartsTooltip />\n                    <Bar dataKey=\"value\" fill=\"#8884d8\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader>\n                <CardTitle>Task Completion</CardTitle>\n                <CardDescription>Progress on project tasks</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <BarChart data={[\n                    { name: 'Open Tasks', value: appStats.openTasks },\n                    { name: 'Completed Tasks', value: appStats.completedTasks }\n                  ]}>\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <RechartsTooltip />\n                    <Bar dataKey=\"value\" fill=\"#82ca9d\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n        \n        <TabsContent value=\"tickets\">\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <CardTitle>Beta Testing Tickets</CardTitle>\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setShowKanban(!showKanban)}\n                  >\n                    {showKanban ? \"Hide\" : \"Show\"} Kanban Board\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setShowGantt(!showGantt)}\n                  >\n                    {showGantt ? \"Hide\" : \"Show\"} Gantt Chart\n                  </Button>\n                </div>\n              </div>\n              <CardDescription>Manage beta testing feedback and issues</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n                <div className=\"bg-blue-50 p-4 rounded-lg\">\n                  <div className=\"flex justify-between items-start\">\n                    <div>\n                      <p className=\"text-xs font-medium text-blue-600\">Total Tickets</p>\n                      <p className=\"text-2xl font-bold\">{ticketStats.totalTickets}</p>\n                    </div>\n                    <div className=\"p-1.5 bg-blue-100 rounded-full\">\n                      <FileText className=\"h-5 w-5 text-blue-500\" />\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"bg-amber-50 p-4 rounded-lg\">\n                  <div className=\"flex justify-between items-start\">\n                    <div>\n                      <p className=\"text-xs font-medium text-amber-600\">Open Tickets</p>\n                      <p className=\"text-2xl font-bold\">{ticketStats.openTickets}</p>\n                    </div>\n                    <div className=\"p-1.5 bg-amber-100 rounded-full\">\n                      <Clock className=\"h-5 w-5 text-amber-500\" />\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"bg-green-50 p-4 rounded-lg\">\n                  <div className=\"flex justify-between items-start\">\n                    <div>\n                      <p className=\"text-xs font-medium text-green-600\">Closed Tickets</p>\n                      <p className=\"text-2xl font-bold\">{ticketStats.closedTickets}</p>\n                    </div>\n                    <div className=\"p-1.5 bg-green-100 rounded-full\">\n                      <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"bg-red-50 p-4 rounded-lg\">\n                  <div className=\"flex justify-between items-start\">\n                    <div>\n                      <p className=\"text-xs font-medium text-red-600\">High Priority</p>\n                      <p className=\"text-2xl font-bold\">{ticketStats.highPriorityTickets}</p>\n                    </div>\n                    <div className=\"p-1.5 bg-red-100 rounded-full\">\n                      <AlertTriangle className=\"h-5 w-5 text-red-500\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {showKanban && (\n                <div className=\"mb-8\">\n                  <h3 className=\"text-lg font-medium mb-4\">Ticket Board</h3>\n                  <div className=\"border rounded-lg overflow-hidden\">\n                    <DragDropContext onDragEnd={(result) => {\n                      const kanban = KanbanBoard();\n                      return kanban.props.onDragEnd(result);\n                    }}>\n                      <KanbanBoard />\n                    </DragDropContext>\n                  </div>\n                </div>\n              )}\n              \n              {showGantt && (\n                <div className=\"mb-8\">\n                  <h3 className=\"text-lg font-medium mb-4\">Timeline</h3>\n                  <div className=\"border rounded-lg overflow-hidden p-4\">\n                    <GanttChartView tasks={getGanttTasks()} />\n                  </div>\n                </div>\n              )}\n              \n              <div>\n                <h3 className=\"text-lg font-medium mb-4\">All Tickets</h3>\n                <Table className=\"w-full\">\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead className=\"w-[250px]\">Title</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Priority</TableHead>\n                      <TableHead>Created</TableHead>\n                      <TableHead>Due Date</TableHead>\n                      <TableHead className=\"text-right\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {betaTickets.map(ticket => (\n                      <React.Fragment key={ticket.id}>\n                        <TableRow className=\"group\">\n                          <TableCell className=\"font-medium\">{ticket.title}</TableCell>\n                          <TableCell>\n                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                              ticket.status === 'new' ? 'bg-blue-100 text-blue-800' :\n                              ticket.status === 'in-progress' ? 'bg-purple-100 text-purple-800' :\n                              ticket.status === 'blocked' ? 'bg-red-100 text-red-800' :\n                              ticket.status === 'review' ? 'bg-yellow-100 text-yellow-800' :\n                              ticket.status === 'done' ? 'bg-green-100 text-green-800' :\n                              'bg-gray-100 text-gray-800'\n                            }`}>\n                              {ticket.status}\n                            </span>\n                          </TableCell>\n                          <TableCell>\n                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                              ticket.priority === 'high' ? 'bg-red-100 text-red-800' :\n                              ticket.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :\n                              'bg-green-100 text-green-800'\n                            }`}>\n                              {ticket.priority}\n                            </span>\n                          </TableCell>\n                          <TableCell>{formatDate(ticket.created_at)}</TableCell>\n                          <TableCell>{ticket.due_date ? formatDate(ticket.due_date) : '-'}</TableCell>\n                          <TableCell className=\"text-right\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => toggleTicketExpanded(ticket.id)}\n                            >\n                              {ticket.expanded ? 'Collapse' : 'Expand'}\n                            </Button>\n                          </TableCell>\n                        </TableRow>\n                        {ticket.expanded && (\n                          <TableRow>\n                            <TableCell colSpan={6} className=\"p-0 border-t-0\">\n                              <ExpandedTicketDetails ticket={ticket} />\n                            </TableCell>\n                          </TableRow>\n                        )}\n                      </React.Fragment>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <AdminTicketManager />\n        </TabsContent>\n        \n        <TabsContent value=\"applications\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Application Management</CardTitle>\n              <CardDescription>Manage job applications across the platform</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground mb-8\">This section is under development.</p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n      \n      <Dialog open={replyDialogOpen} onOpenChange={setReplyDialogOpen}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Reply to Reporter</DialogTitle>\n            <DialogDescription>\n              Your message will be sent to the user who reported this issue.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <Textarea\n              placeholder=\"Write your reply here...\"\n              value={replyMessage}\n              onChange={(e) => setReplyMessage(e.target.value)}\n              className=\"min-h-[150px]\"\n            />\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setReplyDialogOpen(false)}>Cancel</Button>\n            <Button onClick={sendReplyToReporter}>Send Reply</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default SweaquityDashboard;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/pages/projects/ProjectApplicationPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":51,"column":6,"nodeType":"ArrayExpression","endLine":51,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [loadData, projectId, taskIdFromQuery]","fix":{"range":[1666,1694],"text":"[loadData, projectId, taskIdFromQuery]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3628,3631],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3628,3631],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { useParams, useLocation, useNavigate, useSearchParams } from \"react-router-dom\";\nimport { supabase } from \"@/lib/supabase\";\nimport { ApplicationForm } from \"@/components/projects/ApplicationForm\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Loader2 } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { Skill } from \"@/types/jobSeeker\";\n\ninterface Business {\n  company_name: string;\n  // Add other business properties if needed\n}\n\ninterface ProjectTask {\n  task_id: string;\n  title: string;\n  description: string;\n  timeframe: string;\n  equity_allocation: number;\n  skills_required: string[];\n  skill_requirements: Array<{\n    skill: string;\n    level: \"Beginner\" | \"Intermediate\" | \"Expert\";\n  }>;\n}\n\nconst ProjectApplicationPage = () => {\n  const { id: projectId } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const taskIdFromQuery = searchParams.get('taskId');\n  \n  const [isLoading, setIsLoading] = useState(true);\n  const [projectTitle, setProjectTitle] = useState(\"\");\n  const [companyName, setCompanyName] = useState(\"\");\n  const [businessId, setBusinessId] = useState(\"\");\n  const [tasks, setTasks] = useState<ProjectTask[]>([]);\n  const [selectedTaskId, setSelectedTaskId] = useState<string>(\"\");\n  const [userSkills, setUserSkills] = useState<Skill[]>([]);\n  \n  useEffect(() => {\n    if (taskIdFromQuery) {\n      setSelectedTaskId(taskIdFromQuery);\n    }\n    \n    loadData();\n    loadUserSkills();\n  }, [projectId, taskIdFromQuery]);\n  \n  const loadUserSkills = async () => {\n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) return;\n      \n      const { data, error } = await supabase\n        .from('profiles')\n        .select('skills')\n        .eq('id', session.user.id)\n        .single();\n        \n      if (error) throw error;\n      \n      if (data?.skills) {\n        setUserSkills(Array.isArray(data.skills) ? data.skills : JSON.parse(data.skills));\n      }\n    } catch (error) {\n      console.error(\"Error loading user skills:\", error);\n    }\n  };\n  \n  const loadData = async () => {\n    if (!projectId) {\n      toast.error(\"No project ID provided\");\n      navigate(-1);\n      return;\n    }\n    \n    try {\n      setIsLoading(true);\n      \n      // First, load project details\n      const { data: projectData, error: projectError } = await supabase\n        .from('business_projects')\n        .select(`\n          title,\n          description,\n          status,\n          equity_allocation,\n          project_timeframe,\n          skills_required,\n          business_id,\n          businesses(company_name)\n        `)\n        .eq('project_id', projectId)\n        .maybeSingle();\n      \n      if (projectError) {\n        console.error(\"Error fetching project:\", projectError);\n        throw projectError;\n      }\n      \n      if (!projectData) {\n        toast.error(\"Project not found\");\n        navigate(-1);\n        return;\n      }\n      \n      setProjectTitle(projectData.title);\n      \n      // Fix: Correctly access the company_name from the businesses join\n      if (projectData.businesses && Array.isArray(projectData.businesses)) {\n        // If businesses is an array, take the first item\n        setCompanyName(projectData.businesses[0]?.company_name || \"Unknown Company\");\n      } else if (projectData.businesses) {\n        // If businesses is an object\n        setCompanyName((projectData.businesses as any).company_name || \"Unknown Company\");\n      } else {\n        setCompanyName(\"Unknown Company\");\n      }\n      \n      setBusinessId(projectData.business_id);\n      \n      // Then, load tasks for this project\n      const { data: tasksData, error: tasksError } = await supabase\n        .from('project_sub_tasks')\n        .select('*')\n        .eq('project_id', projectId)\n        .eq('status', 'open');\n      \n      if (tasksError) {\n        console.error(\"Error fetching tasks:\", tasksError);\n        throw tasksError;\n      }\n      \n      setTasks(tasksData || []);\n      \n      // If there's a taskId in the query params and it's valid, use it\n      // Otherwise, use the first task\n      if (taskIdFromQuery && tasksData?.some(task => task.task_id === taskIdFromQuery)) {\n        setSelectedTaskId(taskIdFromQuery);\n      } else if (tasksData && tasksData.length > 0 && !selectedTaskId) {\n        setSelectedTaskId(tasksData[0].task_id);\n      }\n      \n    } catch (error) {\n      console.error(\"Error loading application details for project:\", projectId, \"task:\", taskIdFromQuery, error);\n      toast.error(\"Failed to load project details\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  const handleTaskSelect = (taskId: string) => {\n    setSelectedTaskId(taskId);\n    // Update URL with the new taskId without navigating\n    const newSearchParams = new URLSearchParams(searchParams);\n    newSearchParams.set('taskId', taskId);\n    navigate({\n      pathname: location.pathname,\n      search: newSearchParams.toString()\n    }, { replace: true });\n  };\n  \n  const goBack = () => {\n    navigate(-1);\n  };\n  \n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto flex justify-center items-center min-h-screen\">\n        <Loader2 className=\"mr-2 h-6 w-6 animate-spin\" />\n        <span>Loading application details...</span>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"container mx-auto py-8\">\n      <Button \n        variant=\"ghost\" \n        onClick={goBack} \n        className=\"mb-6\"\n      >\n        <ArrowLeft className=\"mr-2 h-4 w-4\" /> Back\n      </Button>\n      \n      <div className=\"grid gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Apply for Role at {companyName}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold\">{projectTitle}</h2>\n              {tasks.length > 1 && (\n                <div className=\"mt-4\">\n                  <h3 className=\"text-lg font-medium mb-2\">Available Roles</h3>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {tasks.map((task) => (\n                      <Button\n                        key={task.task_id}\n                        variant={selectedTaskId === task.task_id ? \"default\" : \"outline\"}\n                        onClick={() => handleTaskSelect(task.task_id)}\n                      >\n                        {task.title}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n            \n            {selectedTaskId && (\n              <ApplicationForm \n                projectId={projectId || \"\"}\n                taskId={selectedTaskId}\n                projectTitle={projectTitle}\n                taskTitle={tasks.find(t => t.task_id === selectedTaskId)?.title}\n              />\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectApplicationPage;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/pages/projects/ProjectDetailsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/services/DocumentService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/types/applications.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[453,456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[453,456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[569,572],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[569,572],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1168,1171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1168,1171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1228,1231],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1228,1231],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { BusinessRole } from './businessRoles';\n\nexport interface JobApplication {\n  job_app_id: string;\n  user_id: string;\n  task_id: string;\n  project_id?: string;\n  status: string;\n  message?: string;\n  cv_url?: string;\n  accepted_jobseeker?: boolean;\n  accepted_business?: boolean;\n  applicant_anonymized?: boolean;\n  created_at?: string;\n  updated_at?: string;\n  applied_at: string; // Required for compatibility\n  business_roles?: BusinessRole | any;\n  applicant_id?: string;\n  task_discourse?: string;\n  id?: string; // Add id field for compatibility\n  notes?: any[]; // Add notes field for compatibility\n  hours_logged?: number; // Added for time tracking\n  accepted_jobs?: {\n    equity_agreed: number;\n    jobs_equity_allocated: number;\n    id: string;\n    date_accepted: string;\n  };\n  // For compatibility with UI components\n  company_name?: string;\n  project_title?: string;\n  task_title?: string;\n  description?: string;\n  skills_required?: string[];\n  applicant_skills?: string[];\n  hasEquityData?: boolean; // Added for compatibility with EquityProjectsList\n  is_equity_project?: boolean; // Added for compatibility with EquityProjectsList\n  profile?: any; // For accessing applicant profile data\n  businesses?: any; // Added for business data compatibility\n  nda_document_id?: string; // Added for NDA handling\n  nda_status?: string; // Added for NDA status\n}\n\nexport interface AcceptedJob {\n  id: string;\n  job_app_id: string;\n  equity_agreed: number;\n  date_accepted: string;\n  document_url?: string;\n  accepted_discourse?: string;\n  created_at: string;\n  updated_at: string;\n  jobs_equity_allocated?: number; // Added for compatibility with UI\n  work_contract_document_id?: string;\n  work_contract_status?: string;\n  award_agreement_document_id?: string;\n  award_agreement_status?: string;\n}\n\n// Application component props\nexport interface PendingApplicationsListProps {\n  applications: JobApplication[];\n  onWithdraw?: (applicationId: string, reason?: string) => Promise<void>;\n  onAccept?: (application: JobApplication) => Promise<void>;\n  isWithdrawing?: boolean;\n}\n\nexport interface PendingApplicationItemProps {\n  application: JobApplication;\n  onAccept?: (application: JobApplication) => Promise<void>;\n  onWithdraw?: (applicationId: string, reason?: string) => Promise<void>;\n  isWithdrawing?: boolean;\n  getMatchedSkills: () => string[];\n  onApplicationUpdated?: () => void;\n}\n\nexport interface ApplicationsTabBaseProps {\n  applications: JobApplication[];\n  onApplicationUpdated: () => void;\n  newMessagesCount?: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/types/business.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/types/businessRoles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/types/dashboard.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1580,1583],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1580,1583],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1597,1600],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1597,1600],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1620,1623],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1620,1623],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1679,1682],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1679,1682],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nexport type TaskType = 'task' | 'milestone' | 'project';\n\nexport interface Task {\n  id: string;\n  name: string;\n  start: Date;\n  end: Date;\n  type: TaskType;\n  progress: number;\n  isDisabled: boolean;\n  styles?: {\n    progressColor?: string;\n    backgroundColor?: string;\n  };\n}\n\nexport interface KanbanColumn {\n  id: string;\n  title: string;\n  ticketIds: string[];\n}\n\nexport interface DragResult {\n  draggableId: string;\n  type: string;\n  source: {\n    droppableId: string;\n    index: number;\n  };\n  destination: {\n    droppableId: string;\n    index: number;\n  } | null;\n}\n\nexport interface ApplicationStats {\n  totalUsers: number;\n  totalBusinesses: number;\n  totalProjects: number;\n  totalApplications: number;\n  pendingApplications: number;\n  acceptedApplications: number;\n  withdrawnApplications: number;\n  rejectedApplications: number;\n  openTasks: number;\n  completedTasks: number;\n}\n\nexport interface Notification {\n  id: string;\n  title: string;\n  message: string;\n  type: 'message' | 'ticket' | 'application' | 'system';\n  createdAt: string;\n  read: boolean;\n  relatedId?: string;\n  sender?: string;\n}\n\nexport interface TicketMessage {\n  id: string;\n  ticketId: string;\n  senderId: string;\n  recipientId: string;\n  subject: string;\n  message: string;\n  content?: string; // For compatibility with different message formats\n  createdAt: string;\n  read: boolean;\n  related_ticket?: string;\n  sender?: {\n    id?: string;\n    name?: string;\n    avatar?: string;\n  };\n  job_app_id?: string; // Add job_app_id field\n}\n\nexport interface ExpandedTicketDetailsProps {\n  ticket: any;\n  messages: any[];\n  hoursLogged?: any;\n  onAction: (ticketId: string, action: string, data?: any) => void;\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/types/dashboardProps.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/types/equity.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[619,622],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[619,622],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { SubTask } from './businessRoles';\n\nexport interface EquityProject {\n  id: string;\n  project_id: string;\n  equity_amount: number;\n  time_allocated: string;\n  status: string;\n  start_date: string;\n  end_date?: string;\n  effort_logs: {\n    date: string;\n    hours: number;\n    description: string;\n  }[];\n  total_hours_logged: number;\n  sub_tasks?: SubTask[];\n  business_roles?: {\n    title: string;\n    description: string;\n    company_name?: string;\n    project_title?: string;\n    status?: string;\n    task_status?: string;\n    completion_percentage?: number;\n    timeframe?: string;\n    skill_requirements?: any[];\n    project_status?: string;\n  };\n  title?: string;\n  documents?: {\n    contract?: {\n      url: string;\n      status?: string;\n    };\n  };\n  created_by?: string;\n  created_at?: string;\n  skill_match?: number;\n  updated_at?: string;\n  skills_required?: string[]; // Added for compatibility with ProjectCard\n  is_equity_project?: boolean;\n  timeframe?: string;\n  equity_allocation?: number;\n  description?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/types/jobSeeker.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1727,1730],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1727,1730],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2540,2543],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2540,2543],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2941,2944],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2941,2944],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\n// This file re-exports all job seeker related types for backward compatibility\n// New code should import from the specific type files\n\nexport * from './profile';\nexport * from './businessRoles';\nexport * from './applications';\nexport * from './equity';\nexport * from './dashboardProps';\n\n// Legacy Skill interface (updated to match profile.ts)\nexport interface Skill {\n  id?: string;\n  skill?: string;\n  level?: 'Beginner' | 'Intermediate' | 'Advanced' | 'Expert';\n  name?: string; // Added for backward compatibility\n}\n\n// Legacy Profile interface (some code might still use this)\nexport interface Profile {\n  id: string;\n  first_name: string;\n  last_name: string;\n  title: string;\n  email: string;\n  location: string;\n  skills: Skill[];\n\n  // Adding the missing properties from previous errors\n  bio: string;\n  phone: string;\n  address: string;\n  availability: string;\n  social_links: {\n    linkedin?: string;\n    github?: string;\n    portfolio?: string;\n  };\n  marketing_consent: boolean;\n  project_updates_consent: boolean;\n  terms_accepted: boolean;\n}\n\n// Override the EquityProject interface for backward compatibility\nexport interface EquityProject {\n  id: string;\n  project_id: string;\n  equity_amount: number;\n  time_allocated: string;\n  status: string;\n  start_date: string;\n  end_date?: string;\n  effort_logs: {\n    date: string;\n    hours: number;\n    description: string;\n  }[];\n  total_hours_logged: number;\n  sub_tasks?: import('./businessRoles').SubTask[];\n  business_roles?: {\n    title: string;\n    description: string;\n    company_name?: string;\n    project_title?: string;\n    status?: string;\n    task_status?: string;\n    completion_percentage?: number;\n    timeframe?: string;\n    skill_requirements?: any[];\n    project_status?: string;\n  };\n  title?: string;\n  documents?: {\n    contract?: {\n      url: string;\n      status?: string;\n    };\n  };\n  created_by?: string;\n  created_at?: string;\n  skill_match?: number;\n  updated_at?: string;\n  skills_required?: string[];\n  is_equity_project?: boolean;\n  timeframe?: string;\n  equity_allocation?: number;\n  description?: string;\n}\n\n// Update AcceptedJob to match the database fields\nexport interface AcceptedJob {\n  equity_agreed: number;\n  jobs_equity_allocated: number;\n  date_accepted?: string;\n  id?: string;\n}\n\n// Add JobApplication interface properties needed for compatibility\nexport interface JobApplication {\n  job_app_id: string;\n  id?: string;\n  user_id: string;\n  task_id: string;\n  project_id?: string;\n  applied_at: string;\n  status: string;\n  notes?: any;\n  accepted_jobseeker: boolean;\n  accepted_business: boolean;\n  message?: string;\n  cv_url?: string;\n  task_discourse?: string;\n  business_roles?: {\n    id?: string;\n    title: string;\n    description: string;\n    company_name?: string;\n    project_title?: string;\n    status?: string;\n    task_status?: string;\n    completion_percentage?: number;\n    timeframe?: string;\n    skill_requirements?: any[];\n    project_status?: string;\n    equity_allocation?: number;\n  };\n  accepted_jobs?: AcceptedJob;\n  is_equity_project?: boolean;\n  applicant_skills?: string[];\n  // Adding additional fields for enhanced features\n  task_title?: string;\n  company_name?: string;\n  project_title?: string;\n  description?: string;\n  hasEquityData?: boolean;\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/types/jobSeeker.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1194,1197],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1194,1197],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1681,1684],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1681,1684],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2585,2588],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2585,2588],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2986,2989],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2986,2989],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nexport * from './profile';\nexport * from './businessRoles';\nexport * from './applications';\nexport * from './equity';\nexport * from './dashboardProps';\n\n// Legacy Skill interface (updated to match profile.ts)\nexport interface Skill {\n  id?: string;\n  skill: string;\n  level?: 'Beginner' | 'Intermediate' | 'Advanced' | 'Expert';\n  name?: string; // Added for backward compatibility\n}\n\n// Legacy Profile interface (some code might still use this)\nexport interface Profile {\n  id: string;\n  first_name: string;\n  last_name: string;\n  title: string;\n  email: string;\n  location: string;\n  skills: Skill[];\n\n  // Adding the missing properties from previous errors\n  bio: string;\n  phone: string;\n  address: string;\n  availability: string;\n  social_links: {\n    linkedin?: string;\n    github?: string;\n    portfolio?: string;\n  };\n  marketing_consent: boolean;\n  project_updates_consent: boolean;\n  terms_accepted: boolean;\n}\n\n// Override the EquityProject interface for backward compatibility\nexport interface EquityProject {\n  id: string;\n  project_id: string;\n  equity_amount: number;\n  time_allocated: string;\n  status: string;\n  start_date: string;\n  end_date?: string;\n  skill_requirements?: any[]; // Added for compatibility\n  skill_required?: string | null;\n  effort_logs: {\n    date: string;\n    hours: number;\n    description: string;\n  }[];\n  total_hours_logged: number;\n  sub_tasks?: import('./businessRoles').SubTask[];\n  business_roles?: {\n    title: string;\n    description: string;\n    company_name?: string;\n    project_title?: string;\n    status?: string;\n    task_status?: string;\n    completion_percentage?: number;\n    timeframe?: string;\n    skill_requirements?: any[];\n    project_status?: string;\n    project_id?: string; // Added for compatibility\n  };\n  title?: string;\n  documents?: {\n    contract?: {\n      url: string;\n      status?: string;\n    };\n  };\n  created_by?: string;\n  created_at?: string;\n  skill_match?: number;\n  updated_at?: string;\n  skills_required?: string[]; // Added for ProjectCard compatibility\n  is_equity_project?: boolean;\n  timeframe?: string;\n  equity_allocation?: number;\n  description?: string;\n}\n\n// Update AcceptedJob to match the database fields\nexport interface AcceptedJob {\n  equity_agreed: number;\n  jobs_equity_allocated: number;\n  date_accepted?: string;\n  id?: string;\n}\n\n// Add JobApplication interface properties needed for compatibility\nexport interface JobApplication {\n  job_app_id: string;\n  id?: string;\n  user_id: string;\n  task_id: string;\n  project_id?: string;\n  applied_at: string;\n  status: string;\n  notes?: any;\n  accepted_jobseeker: boolean;\n  accepted_business: boolean;\n  message?: string;\n  cv_url?: string;\n  task_discourse?: string;\n  business_roles?: {\n    id?: string;\n    title: string;\n    description: string;\n    company_name?: string;\n    project_title?: string;\n    status?: string;\n    task_status?: string;\n    completion_percentage?: number;\n    timeframe?: string;\n    skill_requirements?: any[];\n    project_status?: string;\n    equity_allocation?: number;\n    project_id?: string; // Added for compatibility\n    project?: {\n      id?: string;\n      title?: string;\n      status?: string;\n    };\n  };\n  accepted_jobs?: AcceptedJob;\n  is_equity_project?: boolean;\n  applicant_skills?: string[];\n  // Adding additional fields for enhanced features\n  task_title?: string;\n  company_name?: string;\n  project_title?: string;\n  description?: string;\n  hasEquityData?: boolean;\n}\n\n// Fix the SubTask type to include 'id' property\nexport interface SubTask {\n  task_id?: string | null;\n  id?: string;\n  project_id: string;\n  title: string;\n  description: string;\n  equity_allocation?: number | null;\n  status?: string | null;\n  task_status?: string | null;\n  skill_requirements?: Array<import('./profile').SkillRequirement | string> | null;\n  skill_required?: string | null;\n  skills_required?: string[];\n  timeframe?: string | null;\n  created_by?: string | null;\n  completion_percentage: number;\n  dependencies?: string | null;\n  last_activity_at?: string | null;\n  estimated_hours?: number | null;\n}\n\nexport interface LogEffort {\n  project_id: string;\n  hours: number;\n  description: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/types/profile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/types/ticket.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[223,226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[223,226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { ReactNode } from 'react';\nimport { Ticket } from './types';\n\nexport interface TicketDashboardProps {\n  initialTickets: Ticket[];\n  onRefresh: () => void;\n  onTicketAction: (ticketId: string, action: string, data: any) => Promise<void>;\n  showTimeTracking?: boolean;\n  userId: string;\n  onLogTime?: (ticketId: string) => void;\n  renderTicketActions?: (ticket: Ticket) => ReactNode;\n  expandedTickets: Set<string> | string[] | Record<string, boolean>;\n  toggleTicketExpansion: (ticketId: string) => void;\n  userCanEditDates?: boolean;\n  userCanEditStatus?: boolean;\n  loading?: boolean;\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/types/types.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[523,526],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[523,526],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1413,1416],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1413,1416],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nexport interface Ticket {\n  id: string;\n  title: string;\n  description: string; // Required field\n  status: string;\n  priority: string;\n  reporter?: string;\n  assigned_to?: string;\n  created_at?: string;\n  updated_at?: string;\n  due_date?: string;\n  notes?: Array<{\n    id: string;\n    user: string;\n    timestamp: string;\n    content?: string;\n    action?: string;\n    comment?: string;\n  }>;\n  expanded?: boolean;\n  newNote?: string;\n  system_info?: string;\n  reproduction_steps?: string;\n  health?: string;\n  replies?: any[];\n  project_id?: string;\n  task_id?: string;\n  job_app_id?: string;\n  equity_points?: number;\n  isTaskTicket?: boolean;\n  isProjectTicket?: boolean;\n  completion_percentage?: number;\n  estimated_hours?: number;\n  hours_logged?: number;\n  type?: string; // Added type property\n  // Legacy property to ensure backward compatibility:\n  ticket_type?: string;\n  attachments?: string[];\n}\n\nexport interface TicketMessage {\n  id: string;\n  user: string;\n  timestamp: string;\n  comment: string;\n}\n\nexport interface PendingApplicationsListProps {\n  applications: JobApplication[];\n  onWithdraw?: (applicationId: string, reason?: string) => Promise<void>;\n  onAccept?: (application: JobApplication) => Promise<void>;\n  isWithdrawing?: boolean;\n}\n\nexport interface ExpandedTicketDetailsProps {\n  ticket: Ticket;\n  onClose?: () => void;\n  onTicketAction?: (ticketId: string, action: string, data: any) => Promise<void>;\n  onLogTime?: (ticketId: string) => void;\n  userCanEditStatus?: boolean;\n  userCanEditDates?: boolean;\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/types/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[489,492],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[489,492],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[669,672],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[669,672],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[792,795],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[792,795],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1314,1317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1314,1317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":77,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":77,"endColumn":28,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[1762,1847],"text":"type BetaTicket = Ticket"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2087,2090],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2087,2090],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Update Ticket interface to fix inconsistencies\nexport interface Ticket {\n  id: string;\n  title: string;\n  description: string; // Making this required\n  status: string;\n  priority: string;\n  health: string; \n  assigned_to?: string;\n  created_by?: string;\n  created_at?: string;\n  project_id?: string;\n  due_date?: string;\n  ticket_type?: string;\n  task_id?: string;\n  completion_percentage?: number;\n  estimated_hours?: number;\n  hours_logged?: number;\n  updated_at?: string;\n  notes?: any[];\n  type?: string;\n  equity_points?: number;\n  reporter?: string;\n  expanded?: boolean;\n  newNote?: string;\n  system_info?: string;\n  reproduction_steps?: string;\n  replies?: any[];\n  job_app_id?: string;\n  isTaskTicket?: boolean;\n  isProjectTicket?: boolean;\n  attachments?: string[];\n  project?: any; // Add this property to fix the TypeScript error\n}\n\n// Update UserData interface to include the required name field\nexport interface UserData {\n  id: string;\n  name: string;\n  email: string;\n  avatar?: string;\n}\n\nexport interface Task {\n  id: string;\n  title: string;\n  description?: string;\n  status: string;\n  priority: string;\n  assignee?: string;\n  dueDate?: string;\n  startDate?: string;\n  endDate?: string;\n  progress: number;\n  dependencies?: string[];\n}\n\nexport interface TaskCompletionReviewProps {\n  task?: any;\n  onReviewComplete?: () => void;\n  onClose?: () => void;\n  open?: boolean; \n  setOpen?: React.Dispatch<React.SetStateAction<boolean>>; \n  businessId?: string;\n}\n\nexport interface TicketStatistics {\n  totalTickets: number;\n  openTickets: number;\n  inProgressTickets: number;\n  completedTickets: number;\n  overdueTickets: number;\n  total?: number; // Add this property to fix errors\n  open?: number; // Add this property to fix errors\n}\n\nexport interface BetaTicket extends Ticket {\n  // health is already required in Ticket now\n}\n\n// Add TicketDashboardProps with optional expandedTickets and toggleTicketExpansion\nexport interface TicketDashboardProps {\n  initialTickets: Ticket[];\n  onRefresh?: () => void;\n  onTicketAction?: (ticketId: string, action: string, data: any) => Promise<void>;\n  showTimeTracking?: boolean;\n  userId?: string;\n  onLogTime?: (ticketId: string) => void;\n  userCanEditDates?: boolean;\n  userCanEditStatus?: boolean;\n  renderTicketActions?: (ticket: Ticket) => React.ReactNode;\n  expandedTickets?: Set<string> | Record<string, boolean>;\n  toggleTicketExpansion?: (ticketId: string) => void;\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/utils/applicationUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[750,753],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[750,753],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { Application } from \"@/types/business\";\nimport { JobApplication, Skill } from \"@/types/jobSeeker\";\n\n/**\n * Converts an Application object to a JobApplication object\n * Handles type differences and ensures proper type conversion\n * \n * ID Mapping:\n * - job_app_id: The unique ID of the application itself\n * - project_id: The ID of the project the application is for\n * - task_id: The ID of the specific task/role within the project\n * - business_roles.id: References the task_id (the specific role being applied for)\n */\nexport function convertApplicationToJobApplication(application: Application): JobApplication {\n  // Helper function to normalize skill requirements to a consistent format\n  const normalizeSkillRequirements = (skillReqs: any) => {\n    if (!skillReqs) return [];\n    \n    if (Array.isArray(skillReqs)) {\n      return skillReqs.map(req => {\n        if (typeof req === 'string') {\n          return { skill: req, level: \"Intermediate\" };\n        }\n        // Ensure required properties exist\n        return {\n          skill: req.skill || (req.name || \"\"),\n          level: req.level || \"Intermediate\"\n        };\n      });\n    }\n    \n    return [];\n  };\n\n  // Create a basic JobApplication object\n  const jobApplication: JobApplication = {\n    job_app_id: application.job_app_id,\n    user_id: application.user_id,\n    task_id: application.task_id,\n    project_id: application.project_id,\n    status: application.status,\n    applied_at: application.applied_at || \"\",\n    notes: application.notes ? [application.notes] : [], // Convert string to array\n    message: application.message || \"\",\n    cv_url: application.cv_url,\n    task_discourse: application.task_discourse || \"\",\n    id: application.job_app_id, // Ensure id matches job_app_id for consistency\n    accepted_jobseeker: application.accepted_jobseeker || false,\n    accepted_business: application.accepted_business || false,\n    // Use helper function to ensure consistent skill requirement format\n    business_roles: {\n      // The ID here should reference the task_id - this is the specific role/task the applicant is applying for\n      id: application.task_id || \"\",\n      title: application.business_roles?.title || \"\",\n      description: application.business_roles?.description || \"\",\n      project_title: application.business_roles?.project?.title || \"\",\n      timeframe: application.business_roles?.timeframe,\n      skill_requirements: normalizeSkillRequirements(application.business_roles?.skill_requirements),\n      equity_allocation: application.business_roles?.equity_allocation,\n      project_status: application.business_roles?.project && \n                     typeof application.business_roles.project === 'object' ? \n                     application.business_roles.project.status : undefined\n    },\n    // Add hasEquityData property for type compatibility\n    hasEquityData: false, // Default value if accepted_jobs is not available\n    is_equity_project: false // Default value\n  };\n\n  // Handle accepted_jobs data if available\n  if ('accepted_jobs' in application && application.accepted_jobs) {\n    const acceptedJobs = application.accepted_jobs;\n    if (acceptedJobs && typeof acceptedJobs === 'object') {\n      jobApplication.accepted_jobs = {\n        equity_agreed: typeof acceptedJobs.equity_agreed === 'number' ? acceptedJobs.equity_agreed : 0,\n        jobs_equity_allocated: typeof acceptedJobs.jobs_equity_allocated === 'number' ? acceptedJobs.jobs_equity_allocated : 0,\n        id: acceptedJobs.id?.toString() || \"\",\n        date_accepted: acceptedJobs.date_accepted?.toString() || \"\"\n      };\n      jobApplication.hasEquityData = true;\n    }\n  }\n\n  return jobApplication;\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/utils/setupStorage.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":250,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":250,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6705,6708],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6705,6708],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":289,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":289,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7939,7942],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7939,7942],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { supabase } from \"@/lib/supabase\";\nimport { toast } from \"sonner\";\n\nexport const downloadCV = async (filePath: string) => {\n  try {\n    const { data: { session } } = await supabase.auth.getSession();\n    if (!session?.user) {\n      toast.error(\"You must be logged in to download CVs\");\n      return;\n    }\n\n    const { data, error } = await supabase.storage\n      .from('CVs Storage')\n      .download(filePath);\n\n    if (error) {\n      console.error(\"Error downloading CV:\", error);\n      toast.error(\"Failed to download CV\");\n      return;\n    }\n\n    // Create a URL for the file and trigger download\n    const url = URL.createObjectURL(data);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filePath.split('/').pop() || 'cv-file';\n    document.body.appendChild(a);\n    a.click();\n    URL.revokeObjectURL(url);\n    document.body.removeChild(a);\n    \n    return true;\n  } catch (error) {\n    console.error(\"Error downloading CV:\", error);\n    toast.error(\"Failed to download CV\");\n    return false;\n  }\n};\n\nexport const deleteCV = async (filePath: string) => {\n  try {\n    const { error } = await supabase.storage\n      .from('CVs Storage')\n      .remove([filePath]);\n\n    if (error) {\n      console.error(\"Error deleting CV:\", error);\n      toast.error(\"Failed to delete CV\");\n      return false;\n    }\n\n    toast.success(\"CV deleted successfully\");\n    return true;\n  } catch (error) {\n    console.error(\"Error deleting CV:\", error);\n    toast.error(\"Failed to delete CV\");\n    return false;\n  }\n};\n\nexport const previewCV = async (filePath: string) => {\n  try {\n    const { data: { session } } = await supabase.auth.getSession();\n    if (!session?.user) {\n      toast.error(\"You must be logged in to preview CVs\");\n      return;\n    }\n\n    const { data, error } = await supabase.storage\n      .from('CVs Storage')\n      .download(filePath);\n\n    if (error) {\n      console.error(\"Error previewing CV:\", error);\n      toast.error(\"Failed to preview CV\");\n      return;\n    }\n\n    // Create a URL for the file and open in a new tab\n    const url = URL.createObjectURL(data);\n    window.open(url, '_blank');\n    \n    // Don't forget to revoke the object URL when done\n    setTimeout(() => {\n      URL.revokeObjectURL(url);\n    }, 1000);\n    \n    return true;\n  } catch (error) {\n    console.error(\"Error previewing CV:\", error);\n    toast.error(\"Failed to preview CV\");\n    return false;\n  }\n};\n\nexport const setDefaultCV = async (userId: string, fileName: string) => {\n  try {\n    // Create public URL for the CV\n    const { data } = supabase.storage\n      .from('CVs Storage')\n      .getPublicUrl(`${userId}/${fileName}`);\n\n    if (!data.publicUrl) {\n      toast.error(\"Failed to set default CV\");\n      return null;\n    }\n\n    // Update the profile with the new CV URL\n    const { error: updateError } = await supabase\n      .from('profiles')\n      .update({ cv_url: data.publicUrl })\n      .eq('id', userId);\n\n    if (updateError) {\n      console.error(\"Error updating profile with CV URL:\", updateError);\n      toast.error(\"Failed to set default CV\");\n      return null;\n    }\n\n    toast.success(\"Default CV updated successfully\");\n    return data.publicUrl;\n  } catch (error) {\n    console.error(\"Error setting default CV:\", error);\n    toast.error(\"Failed to set default CV\");\n    return null;\n  }\n};\n\n// New function to preview Application CV\nexport const previewApplicationCV = async (cvUrl: string) => {\n  try {\n    if (!cvUrl) {\n      toast.error(\"No CV URL provided\");\n      return false;\n    }\n\n    // Check if this is a direct URL or a file path\n    if (cvUrl.startsWith('http')) {\n      // Direct URL, just open it\n      window.open(cvUrl, '_blank');\n      return true;\n    }\n    \n    // Otherwise, try to download from Supabase storage\n    let bucket = 'job_applications';\n    let filePath = cvUrl;\n    \n    // If the path includes the bucket name, extract it\n    if (cvUrl.includes('job_applications/')) {\n      filePath = cvUrl.split('job_applications/')[1];\n    } else if (cvUrl.includes('job-applications/')) {\n      bucket = 'job-applications';\n      filePath = cvUrl.split('job-applications/')[1];\n    } else if (cvUrl.includes('CVs Storage/')) {\n      bucket = 'CVs Storage';\n      filePath = cvUrl.split('CVs Storage/')[1];\n    }\n    \n    const { data, error } = await supabase.storage\n      .from(bucket)\n      .download(filePath);\n\n    if (error) {\n      console.error(\"Error downloading application CV:\", error);\n      toast.error(\"Failed to preview CV\");\n      return false;\n    }\n\n    // Create a URL for the file and open in a new tab\n    const url = URL.createObjectURL(data);\n    window.open(url, '_blank');\n    \n    // Don't forget to revoke the object URL when done\n    setTimeout(() => {\n      URL.revokeObjectURL(url);\n    }, 1000);\n    \n    return true;\n  } catch (error) {\n    console.error(\"Error previewing application CV:\", error);\n    toast.error(\"Failed to preview CV\");\n    return false;\n  }\n};\n\n// New function to list user CVs\nexport const listUserCVs = async (userId: string) => {\n  try {\n    const { data, error } = await supabase.storage\n      .from('cvs')\n      .list(`${userId}/`, {\n        sortBy: { column: 'created_at', order: 'desc' }\n      });\n\n    if (error) {\n      console.error(\"Error listing CVs:\", error);\n      return [];\n    }\n\n    return data || [];\n  } catch (error) {\n    console.error(\"Error listing CVs:\", error);\n    return [];\n  }\n};\n\n// Add new function to test storage permissions\nexport const checkStoragePermissions = async (bucketName: string, folderPath: string) => {\n  try {\n    console.log(`Checking storage permissions for ${bucketName}/${folderPath}`);\n    \n    const { data: { session } } = await supabase.auth.getSession();\n    if (!session?.user) {\n      console.error(\"Not authenticated\");\n      return { success: false, error: \"Not authenticated\", details: { userId: null, authenticated: false } };\n    }\n    \n    // Try to list files to check permissions\n    const { data, error } = await supabase.storage\n      .from(bucketName)\n      .list(folderPath);\n    \n    if (error) {\n      console.error(\"Storage permission check failed:\", error);\n      return { \n        success: false, \n        error: error.message,\n        details: {\n          statusText: error.message,\n          bucket: bucketName,\n          path: folderPath,\n          userId: session.user.id,\n          authenticated: true\n        }\n      };\n    }\n    \n    return { \n      success: true, \n      files: data,\n      details: {\n        bucket: bucketName,\n        path: folderPath,\n        userId: session.user.id,\n        authenticated: true,\n        fileCount: data?.length || 0\n      }\n    };\n  } catch (error: any) {\n    console.error(\"Error checking storage permissions:\", error);\n    return { \n      success: false, \n      error: error.message,\n      details: {\n        error: error.message,\n        stack: error.stack\n      }\n    };\n  }\n};\n\n// New function to get a signed URL with retries and fallback to public URL\nexport const getSecureFileUrl = async (bucketName: string, filePath: string, expirySeconds = 3600) => {\n  try {\n    // First try to get a signed URL (more secure)\n    const { data: signedData, error: signedError } = await supabase.storage\n      .from(bucketName)\n      .createSignedUrl(filePath, expirySeconds);\n    \n    if (signedData?.signedUrl) {\n      return { url: signedData.signedUrl, success: true };\n    }\n    \n    if (signedError) {\n      console.warn(`Failed to create signed URL for ${bucketName}/${filePath}:`, signedError);\n      \n      // Fall back to public URL\n      const { data: publicData } = supabase.storage\n        .from(bucketName)\n        .getPublicUrl(filePath);\n      \n      if (publicData?.publicUrl) {\n        return { url: publicData.publicUrl, success: true, isPublic: true };\n      }\n    }\n    \n    return { success: false, error: signedError || \"Could not generate URL\" };\n  } catch (error: any) {\n    console.error(`Error getting file URL for ${bucketName}/${filePath}:`, error);\n    return { success: false, error };\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/utils/skillMatching.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/sweaquity-a2885038/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
